"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[4386],{3583:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>h,toc:()=>l});var n=s(5893),r=s(1151);const i={identifier:"wg1071",title:"Struct type",stage:"0",champion:"benjie",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1071",events:[{type:"wgDiscussionCreated",date:new Date("2022-07-18T08:45:58.000Z"),href:"https://github.com/graphql/graphql-wg/discussions/1071",actor:"benjie"}],related:"127, 147, 237, 688, 733, 825, 929, 942, Struct",shortname:"Struct type",image:"/img/rfc_tracker.png"},a=void 0,h={id:"wg1071",title:"Struct type",description:"At a glance",source:"@site/rfcs/wg1071.md",sourceDirName:".",slug:"/wg1071",permalink:"/rfcs/wg1071",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"wg1071",title:"Struct type",stage:"0",champion:"benjie",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1071",events:[{type:"wgDiscussionCreated",date:"2022-07-18T08:45:58.000Z",href:"https://github.com/graphql/graphql-wg/discussions/1071",actor:"benjie"}],related:"127, 147, 237, 688, 733, 825, 929, 942, Struct",shortname:"Struct type",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"GraphQL Composite Schemas",permalink:"/rfcs/CompositeSchemas"},next:{title:"Servers must preserve lexical ordering between SDL and introspection",permalink:"/rfcs/673"}},o={},l=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Identifier"}),": wg#1071"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Stage"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Champion"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"PR"}),": -"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Related"}),":","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/rfcs/733",title:"Tagged type / RFCX",children:"#733"})," (Tagged type)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/rfcs/825",title:"OneOf Input Objects / RFC3",children:"#825"})," (OneOf Input Objects)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/rfcs/Struct",title:"Polymorphic-capable composite symmetric input/output type (`struct`) / RFC0",children:"Struct"})," (Polymorphic-capable composite symmetric input/output type (`struct`))"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/discussions/1071",children:"WG discussion"})," created"]})," on 2022-07-18 by benjie"]}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:['Whilst talking with @IvanGoncharov about metadata and the need for a structured type that\'s valid on both input and output, Ivan suggested that we might have a scalar "model" an input object, such that the scalar (which is valid on input and output) could be given a structure. Hot on the heels of ',(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/825",children:(0,n.jsx)(t.code,{children:"@oneOf"})})," I wondered if we could just give ",(0,n.jsx)(t.code,{children:"input"})," more powers and explored this idea further, and the ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/Struct.md",children:"struct RFC"})})," is the result of that exploration. It turns out that doing this would solve ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/issues/688",children:"a"})," ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/issues/237",children:"number"})," ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/issues/929",children:"of"})," ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/issues/127",children:"the"})," ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/issues/147",children:"open"})," ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/issues/942",children:"issues"})," people have discussed in the GraphQL spec repository issues, and may also be a more suitable solution to input polymorphism."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:'Think of struct as "a scalar with structure".'})," A struct represents some fixed data, like ",(0,n.jsx)(t.code,{children:'{ "type": "Feature", "geometry": { "type": "Point", "coordinates": [125.6, 10.1] }, "properties": { "name": "Dinagat Islands" } }'}),', that could be sent from the client to the server, or from the server to the client, as an "atom" - without any further resolution.']}),"\n",(0,n.jsx)(t.p,{children:"No resolvers. No field arguments. No infinite recursion. Just pure data."}),"\n",(0,n.jsx)(t.p,{children:"The struct type could be implemented as:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"an enhancement over a scalar, giving the scalar fields and thus structure"}),"\n",(0,n.jsx)(t.li,{children:"an enhancement of input, allowing it to be used on output"}),"\n",(0,n.jsx)(t.li,{children:'a new "struct" type.'}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Given Lee pushed towards (3) for the ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/733",children:'"tagged type"'})," when exploring oneOf, I explored that first. The problem that came up was the same one that came up for using scalars (1): it suddenly becomes unclear when an input object should be used, versus when a struct should be used. So it was clear that option (2) was the most promising."]}),"\n",(0,n.jsxs)(t.p,{children:['The biggest issue I see with option (2) is literally the name: "input". Using a type named "input" for output would certainly be unexpected. But since that\'s potentially just a "historical accident" let\u200b\'s ignore that for now ',"\ud83d\ude09"]}),"\n",(0,n.jsxs)(t.p,{children:["I've used the keyword ",(0,n.jsx)(t.code,{children:"struct"})," in the RFC, but it does not need a new keyword (reusing ",(0,n.jsx)(t.code,{children:"input"})," would be fine), I just wanted to make the distinction clear and to not have to rewrite everything if we chose an option other than (2) in future."]}),"\n",(0,n.jsxs)(t.p,{children:["In the RFC I've laid out ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/Struct.md#why",children:"a number of justifications"})," why the struct type is useful, ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/Struct.md#what-could-it-look-like",children:"what it might look like"}),", and have even explored ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/Struct.md#selection-sets",children:"what (optional) selection sets over the type might look like"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"If you have feedback on this RFC, this is the place to raise it before our next working group on August."}),"\n",(0,n.jsx)(t.p,{children:"Thanks to @IvanGoncharov, @michaelstaib and @andimarek for helping shape this RFC with their feedback."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>h,a:()=>a});var n=s(7294);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function h(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);