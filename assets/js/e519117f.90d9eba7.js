"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[5331],{2038:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var t=i(5893),r=i(1151);const s={identifier:"OptInFeatures",stage:"0",title:"Opt-in features",events:[{type:"docUpdated",date:new Date("2022-09-30T18:02:25.000Z"),href:"https://github.com/graphql/graphql-wg/blob/f3fa75bc36e91ab8036fdf2350a3baddd00045f2/rfcs/OptInFeatures.md",actor:"Martin Bonnin"},{type:"docUpdated",date:new Date("2022-06-07T12:34:53.000Z"),href:"https://github.com/graphql/graphql-wg/blob/a060e7c770bce2886d8d1af7067a6f53c54d7fdc/rfcs/OptInFeatures.md",actor:"Martin Bonnin"},{type:"docCreated",date:new Date("2022-06-06T08:02:31.000Z"),href:"https://github.com/graphql/graphql-wg/blob/cc4f5789a56def08ff5b664965078264198cc6df/rfcs/OptInFeatures.md",actor:"Martin Bonnin"}],related:"300, wg1006",shortname:"Opt-in features",image:"/img/rfc_tracker.png"},a=void 0,d={id:"OptInFeatures",title:"Opt-in features",description:"At a glance",source:"@site/rfcs/OptInFeatures.md",sourceDirName:".",slug:"/OptInFeatures",permalink:"/rfcs/OptInFeatures",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"OptInFeatures",stage:"0",title:"Opt-in features",events:[{type:"docUpdated",date:"2022-09-30T18:02:25.000Z",href:"https://github.com/graphql/graphql-wg/blob/f3fa75bc36e91ab8036fdf2350a3baddd00045f2/rfcs/OptInFeatures.md",actor:"Martin Bonnin"},{type:"docUpdated",date:"2022-06-07T12:34:53.000Z",href:"https://github.com/graphql/graphql-wg/blob/a060e7c770bce2886d8d1af7067a6f53c54d7fdc/rfcs/OptInFeatures.md",actor:"Martin Bonnin"},{type:"docCreated",date:"2022-06-06T08:02:31.000Z",href:"https://github.com/graphql/graphql-wg/blob/cc4f5789a56def08ff5b664965078264198cc6df/rfcs/OptInFeatures.md",actor:"Martin Bonnin"}],related:"300, wg1006",shortname:"Opt-in features",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"add spec edits for references",permalink:"/rfcs/998"},next:{title:"Expanding Subtyping (for output types)",permalink:"/rfcs/ExpandingSubtyping"}},l={},o=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"\ud83d\udcdc Problem Statement",id:"-problem-statement",level:2},{value:"Goals",id:"goals",level:3},{value:"Non-goals",id:"non-goals",level:3},{value:"\ud83d\udc40 Prior work",id:"-prior-work",level:2},{value:"\ud83e\uddd1\u200d\ud83d\udcbb Proposed solution",id:"-proposed-solution",level:2},{value:"The <code>@requiresOptIn</code> directive",id:"the-requiresoptin-directive",level:3},{value:"Introspection",id:"introspection",level:3},{value:"Validation",id:"validation",level:3},{value:"\ud83d\uddf3\ufe0f Alternate solutions",id:"\ufe0f-alternate-solutions",level:2},{value:"<code>@experimental</code> directive",id:"experimental-directive",level:3},{value:"marker directives",id:"marker-directives",level:3},{value:"\ud83e\udeb5 Decision Log",id:"-decision-log",level:2},{value:"directive name",id:"directive-name",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identifier"}),": OptInFeatures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stage"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Champion"}),": -"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PR"}),": -"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/f3fa75bc36e91ab8036fdf2350a3baddd00045f2/rfcs/OptInFeatures.md",children:"RFC document updated"})})," on 2022-09-30 by Martin Bonnin"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/a060e7c770bce2886d8d1af7067a6f53c54d7fdc/rfcs/OptInFeatures.md",children:"RFC document updated"})})," on 2022-06-07 by Martin Bonnin"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/cc4f5789a56def08ff5b664965078264198cc6df/rfcs/OptInFeatures.md",children:"RFC document created"})})," on 2022-06-06 by Martin Bonnin"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.h1,{id:"rfc-opt-in-features",children:"RFC: Opt-in features"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Proposed by:"})," ",(0,t.jsx)(n.a,{href:"https://twitter.com/martinbonnin",children:"Martin Bonnin"})]}),"\n",(0,t.jsxs)(n.p,{children:["This document is a work in progress. A lot of the questions about introspection are closely related\nto ",(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/issues/300",children:"#300"})," (",(0,t.jsx)(n.code,{children:"Expose user-defined meta-information via introspection API in form of directives"}),")\nand will therefore need to be revisited based on the progress there."]}),"\n",(0,t.jsx)(n.h2,{id:"-problem-statement",children:"\ud83d\udcdc Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["GraphQL has a ",(0,t.jsx)(n.a,{href:"https://spec.graphql.org/draft/#sec--deprecated",children:"built-in mechanism for deprecation"})," allowing to\ngracefully remove features from the schema. The lifecycle of a feature can typically be represented as ",(0,t.jsx)(n.code,{children:"stable"}),"\n-> ",(0,t.jsx)(n.code,{children:"deprecated"})," -> ",(0,t.jsx)(n.code,{children:"removed"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In a lot of cases though, a feature lifecycle includes an experimental phase where it has just been added and can be\nchanged without warning. In this state, the feature is usable and feedback is encouraged but isn't considered stable\nenough to be put in production. The feature lifecycle becomes ",(0,t.jsx)(n.code,{children:"experimental"})," -> ",(0,t.jsx)(n.code,{children:"stable"})," -> ",(0,t.jsx)(n.code,{children:"deprecated"})," -> ",(0,t.jsx)(n.code,{children:"removed"})," ."]}),"\n",(0,t.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,t.jsxs)(n.p,{children:["The goal of this proposal is to support the ",(0,t.jsx)(n.code,{children:"experimental"}),' state and, moving forward, any state that requires the client\ndeveloper to make an explicit decision before using a given feature. In that sense, it\'s about "opting in" to using the\nfeature, which includes supporting ',(0,t.jsx)(n.code,{children:"experimental"})," states."]}),"\n",(0,t.jsx)(n.p,{children:"To give a few examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"a field is experimental and might be changed or removed without prior notice (the above example)."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"a field is expensive to compute and should be used with caution."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"a field has specific security requirements and requires a specific header or other form of authentication."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"non-goals",children:"Non-goals"}),"\n",(0,t.jsx)(n.p,{children:"This proposal is not about security and/or hiding parts of a schema. Its goal is to make it easier to communicate opt-in\nfeatures to client developer and therefore needs to expose that information."}),"\n",(0,t.jsx)(n.h2,{id:"-prior-work",children:"\ud83d\udc40 Prior work"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["GitHub uses ",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/graphql/overview/schema-previews",children:"schema previews"})," to opt-in new features."]}),"\n",(0,t.jsxs)(n.li,{children:["Kotlin has ",(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/opt-in-requirements.html",children:"OptIn requirements"})," that started out\nas ",(0,t.jsx)(n.code,{children:"@Experimental"}),"\nbefore ",(0,t.jsxs)(n.a,{href:"https://youtrack.jetbrains.com/issue/KT-26216/Generalize-Experimental-API",children:["being changed to ",(0,t.jsx)(n.code,{children:"@RequiresOptIn"})]})]}),"\n",(0,t.jsxs)(n.li,{children:["Atlassian\nhas ",(0,t.jsxs)(n.a,{href:"https://developer.atlassian.com/platform/atlassian-graphql-api/graphql/#schema-changes",children:["a ",(0,t.jsx)(n.code,{children:"@beta"})," directive"]})," that\nis enforced during execution. A client must provide a ",(0,t.jsx)(n.code,{children:"X-ExperimentalApi: $Feature"})," HTTP header or the request will\nfail."]}),"\n",(0,t.jsxs)(n.li,{children:["Midas uses ",(0,t.jsxs)(n.a,{href:"https://engineering.getmidas.com/how-to-hide-parts-of-your-graphql-schema-c26a5364b8bd",children:["a ",(0,t.jsx)(n.code,{children:"hiddenIn"})," directive"]}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-proposed-solution",children:"\ud83e\uddd1\u200d\ud83d\udcbb Proposed solution"}),"\n",(0,t.jsxs)(n.h3,{id:"the-requiresoptin-directive",children:["The ",(0,t.jsx)(n.code,{children:"@requiresOptIn"})," directive"]}),"\n",(0,t.jsxs)(n.p,{children:["It is proposed to add an ",(0,t.jsx)(n.code,{children:"@requiresOptIn"})," directive to the specification:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'"""\nIndicates that the given field, argument, input field or enum value requires\ngiving explicit consent before being used.\n"""\ndirective @requiresOptIn(feature: String!) repeatable\non FIELD_DEFINITION\n    | ARGUMENT_DEFINITION\n    | INPUT_FIELD_DEFINITION\n    | ENUM_VALUE\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"optIn"})," directive can then be used in the schema. For an example, to signal an experimental field:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'type Session {\n    id: ID!\n    title: String!\n    # [...]\n    startInstant: Instant @requiresOptIn(feature: "experimentalInstantApi")\n    endInstant: Instant @requiresOptIn(feature: "experimentalInstantApi")\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"introspection",children:"Introspection"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This section is a proposal based on the current introspection mechanism. A more global mechanism (\nsee ",(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/issues/300",children:"#300"}),") would make it obsolete"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"@requiresOptIn"})," features should be hidden from introspection by default and include if ",(0,t.jsx)(n.code,{children:"includeRequiresOptIn"})," contains the\ngiven feature:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"type __Type {\n    kind: __TypeKind!\n    name: String\n\n    # [...] other fields omitted for clarity\n\n    # includeRequiresOptIn is a list of features to include\n    fields(includeDeprecated: Boolean = false, includeRequiresOptIn: [String!]): [__Field!]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Tools can get a list of ",(0,t.jsx)(n.code,{children:"@requiresOptIn"})," features required to use a field (or input field, argument, enum value)\nusing ",(0,t.jsx)(n.code,{children:"requiresOptIn"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"type __Field {\n    name: String!\n    isDeprecated: Boolean!\n\n    # [...] other fields omitted for clarity\n\n    # list of @requiresOptIn features required to use this field\n    requiresOptIn: [String!]\n    args(includeDeprecated: Boolean = false, includeRequiresOptIn: [String!]): [__InputValue!]!\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"A given field is included in introspection results if all the conditions are satisfied. In pseudo code, if the following\ncondition is true:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"includeRequiresOptIn.containsAll(field.requiresOptIn) && (includeDeprecated || !field.isDeprecated)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"validation",children:"Validation"}),"\n",(0,t.jsxs)(n.p,{children:["Similarly to ",(0,t.jsx)(n.a,{href:"https://spec.graphql.org/draft/#sel-FAHnBZNCAACCwDqvK",children:"deprecation"}),", the ",(0,t.jsx)(n.code,{children:"@requiresOptIn"})," directive must\nnot appear on required (non-null without a default) arguments or input object field definitions."]}),"\n",(0,t.jsxs)(n.p,{children:["In other words, ",(0,t.jsx)(n.code,{children:"@requiresOptIn"}),"  arguments or input fields, must be either nullable or have a default value."]}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-alternate-solutions",children:"\ud83d\uddf3\ufe0f Alternate solutions"}),"\n",(0,t.jsxs)(n.h3,{id:"experimental-directive",children:[(0,t.jsx)(n.code,{children:"@experimental"})," directive"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'# Indicates that the given field or enum value is still experimental and might be changed \n# in a backward incompatible manner\ndirective @experimental(\n    reason: String! = "Experimental"\n) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n'})}),"\n",(0,t.jsx)(n.p,{children:"Pros:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"simple"}),"\n",(0,t.jsxs)(n.li,{children:["symmetrical with ",(0,t.jsx)(n.code,{children:"@deprecated"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Cons:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"doesn't account for opt-in requirements that are not experimental"}),"\n",(0,t.jsxs)(n.li,{children:["makes it harder to group by features. ",(0,t.jsx)(n.code,{children:"reason"})," could be used for this but it is less explicit than ",(0,t.jsx)(n.code,{children:"feature"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"marker-directives",children:"marker directives"}),"\n",(0,t.jsx)(n.p,{children:"The spec defines a directive named @requiresOptIn (and in doing so introduces the need to be able to apply directives to\ndirective definitions)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"directive @requiresOptIn on DIRECTIVE_DEFINITION\n"})}),"\n",(0,t.jsx)(n.p,{children:"Services create a directive for each distinct opt-in feature they want in their schema:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"# optIn usage defines @experimentalDeploymentApi as an opt-in marker\ndirective @experimentalDeploymentApi on FIELD_DEFINITION @requiresOptIn\n\ntype Query {\n    deployment: Deployment @experimentalDeploymentApi\n}\n\nenum WorkspaceKind {\n    CROSS_PROJECT\n    CROSS_COMPANY\n}\ndirective @workspaces(kind: WorkspaceKind) on FIELD_DEFINITION @requiresOptIn\n\ntype Deployment {\n    workspaces: [Workspace] @workspaces(kind: CROSS_COMPANY)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Pros:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"gives more control to the user about the directive used"}),"\n",(0,t.jsx)(n.li,{children:"has more type information"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Cons:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"more complex"}),"\n",(0,t.jsx)(n.li,{children:"requires a grammar change"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-decision-log",children:"\ud83e\udeb5 Decision Log"}),"\n",(0,t.jsx)(n.p,{children:"This proposal started out with a very simple premise and implementation, and has gotten more complex as\nthe community has explored edge cases and facets about how GraphQL is actually used in practice."}),"\n",(0,t.jsx)(n.p,{children:"This decision log was written with newcomers in mind to avoid rediscussing issues that have already been hashed out,\nand to make it easier to understand why certain decisions have been made. At the time of writing,\nthe decisions here aren't set in stone, so any future discussions can use this log as a starting point."}),"\n",(0,t.jsx)(n.h3,{id:"directive-name",children:"directive name"}),"\n",(0,t.jsxs)(n.p,{children:["Initially, the directive name was ",(0,t.jsx)(n.code,{children:"@experimental"})," then ",(0,t.jsx)(n.code,{children:"@optIn"})," to account for other use cases than just experimental\nstatus before ",(0,t.jsxs)(n.a,{href:"https://github.com/graphql/graphql-wg/pull/1006#discussion_r889467023",children:["settling on ",(0,t.jsx)(n.code,{children:"@requiresOptIn"})]}),"\nbecause it is both more explicit and leaves room for clients to use an ",(0,t.jsx)(n.code,{children:"@optIn"})," directive."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>a});var t=i(7294);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);