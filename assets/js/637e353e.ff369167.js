"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[6314],{2457:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>h});var r=t(5893),s=t(1151);const o={identifier:"1184",closedAt:null,mergedAt:null,title:"Sibling errors should not be added after propagation",stage:"0",nextStage:!1,champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1184",events:[{type:"prCreated",date:new Date("2025-07-10T18:05:07.000Z"),href:"https://github.com/graphql/graphql-spec/pull/1184",actor:"benjie"},{type:"commitsPushed",date:new Date("2025-07-10T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/e199ebbc227f98d1eb8bd46245e4d51f57e86d28",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/e199ebbc227f98d1eb8bd46245e4d51f57e86d28",headline:"Sibling errors should not be added after propagation",ghUser:"benjie",authorName:"Benjie Gillam"}]}],shortname:"Sibling errors should not be added after propagation",image:"/img/rfc_tracker.png"},a=void 0,i={id:"1184",title:"Sibling errors should not be added after propagation",description:"At a glance",source:"@site/rfcs/1184.md",sourceDirName:".",slug:"/1184",permalink:"/rfcs/1184",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"1184",closedAt:null,mergedAt:null,title:"Sibling errors should not be added after propagation",stage:"0",nextStage:!1,champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1184",events:[{type:"prCreated",date:"2025-07-10T18:05:07.000Z",href:"https://github.com/graphql/graphql-spec/pull/1184",actor:"benjie"},{type:"commitsPushed",date:"2025-07-10T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/e199ebbc227f98d1eb8bd46245e4d51f57e86d28",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/e199ebbc227f98d1eb8bd46245e4d51f57e86d28",headline:"Sibling errors should not be added after propagation",ghUser:"benjie",authorName:"Benjie Gillam"}]}],shortname:"Sibling errors should not be added after propagation",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Remove fragmentSpreadName from visitedFragments when visit is complete",permalink:"/rfcs/1045"},next:{title:"NOTE: this document is kept for historic purposes; [`@oneOf`](https://github.com/graphql/graphql-spec/pull/825) gained RFC3 status in May 2025.",permalink:"/rfcs/InputUnion"}},l={},h=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Identifier"}),": #1184"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stage"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Champion"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PR"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1184",children:"Sibling errors should not be added after propagation"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1184",children:"Spec PR"})," created"]})," on 2025-07-10 by benjie"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Commit pushed"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/e199ebbc227f98d1eb8bd46245e4d51f57e86d28",children:"Sibling errors should not be added after propagation"})," on 2025-07-10 by ",(0,r.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"This PR is built on top of:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"#1183"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"GraphQL.js output is not (currently) stable after an operation terminates: more errors may be added to the result after the promise has resolved!"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsxs)("summary",{children:["Reproduction with ",(0,r.jsx)(n.code,{children:"graphql"})," module ",(0,r.jsx)(n.code,{children:"test.mts"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import type { ExecutionResult } from "graphql";\nimport {\n  graphql,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n} from "graphql";\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst Test = new GraphQLObjectType({\n  name: "Test",\n  fields: {\n    a: {\n      type: GraphQLInt,\n      async resolve() {\n        await sleep(0);\n        throw new Error(`a`);\n      },\n    },\n    b: {\n      type: new GraphQLNonNull(GraphQLInt),\n      async resolve() {\n        await sleep(10);\n        throw new Error(`b`);\n      },\n    },\n    c: {\n      type: GraphQLInt,\n      async resolve() {\n        await sleep(20);\n        throw new Error(`c`);\n      },\n    },\n  },\n});\n\nconst Query = new GraphQLObjectType({\n  name: "Query",\n  fields: {\n    test: {\n      type: Test,\n      resolve() {\n        return {};\n      },\n    },\n  },\n});\nconst schema = new GraphQLSchema({\n  query: Query,\n});\n\nconst result = await graphql({\n  schema,\n  source: `{ test { a b c } }`,\n});\n\nconsole.log("Result:");\nconsole.log();\nconsole.log(JSON.stringify(result, null, 2));\nawait sleep(100);\nconsole.log();\nconsole.log("Exact same object 100ms later:");\nconsole.log();\nconsole.log(JSON.stringify(result, null, 2));\n'})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'$ node test.mts \nResult:\n\n{\n  "errors": [\n    { "message": "a", "path": ["test", "a"] },\n    { "message": "b", "path": ["test", "b"] }\n  ],\n  "data": { "test": null }\n}\n\nExact same object 100ms later:\n\n{\n  "errors": [\n    { "message": "a", "path": ["test", "a"] },\n    { "message": "b", "path": ["test", "b"] },\n    { "message": "c", "path": ["test", "c"] }\n  ],\n  "data": { "test": null }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"(I've formatted this output for brevity)"}),"\n",(0,r.jsxs)(n.p,{children:["The reason for this: though we note in the spec that you ",(0,r.jsx)(n.em,{children:"may"})," cancel sibling execution positions, we don't do that in GraphQL.js; and furthermore, we even process errors from the result and add them to the errors list!"]}),"\n",(0,r.jsx)(n.p,{children:'This is particularly problematic for client-side "throw on error". Given this schema:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  test: Test\n}\ntype Test {\n  a: Int  # Throws immediately\n  b: Int! # Throws after 10ms\n  c: Int  # Throws after 20ms\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"And the same spec-valid result as above:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "errors": [\n    { "message": "a", "path": ["test", "a"] },\n    { "message": "b", "path": ["test", "b"] },\n    { "message": "c", "path": ["test", "c"] }\n  ],\n  "data": { "test": null }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Technically the ",(0,r.jsx)(n.code,{children:"Test.b"})," field is the field that caused ",(0,r.jsx)(n.code,{children:"data.test"})," to be null - it's non-nullable, so it triggered error propagation - but without looking at the schema we can't determine this."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": ",(0,r.jsx)(n.em,{children:"recommend"})," that servers don't keep adding to ",(0,r.jsx)(n.code,{children:"errors"})," after error propagation has occurred. This would mean:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["GraphQL.js won't keep adding to ",(0,r.jsx)(n.code,{children:"errors"}),' after the operation has "completed"']}),"\n",(0,r.jsxs)(n.li,{children:["We can throw the ",(0,r.jsx)(n.em,{children:"last"})," error received that relates to the associated field, and trust that for an implementation following the recommendations it's going to be the one either from the field itself or from the field that triggered error propagation to this level."]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var r=t(7294);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);