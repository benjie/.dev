"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[6977],{9353:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=o(5893),n=o(1151);const i={identifier:"631",title:"Make root query operation type optional",stage:"0",champion:"victorandree",prUrl:"https://github.com/graphql/graphql-spec/pull/631",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-12-05.md",date:new Date("2019-12-05T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-12-05.md",date:new Date("2019-12-05T00:00:00.000Z"),actor:null},{type:"prCreated",date:new Date("2019-10-23T10:11:10.000Z"),href:"https://github.com/graphql/graphql-spec/pull/631",actor:"victorandree"},{type:"commitsPushed",date:new Date("2019-10-11T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/5e643f2109f710bd7ed69b7b534c448ad468961b",actor:"victorandree",commits:[{href:"https://github.com/graphql/graphql-spec/commit/5e643f2109f710bd7ed69b7b534c448ad468961b",headline:"Make root query operation type optional",ghUser:"victorandree",authorName:"Victor Andr\xe9e"}]}],shortname:"Make root query operation type optional",image:"/img/rfc_tracker.png",nextStage:!1},a=void 0,s={id:"631",title:"Make root query operation type optional",description:"At a glance",source:"@site/rfcs/631.md",sourceDirName:".",slug:"/631",permalink:"/rfcs/631",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"631",title:"Make root query operation type optional",stage:"0",champion:"victorandree",prUrl:"https://github.com/graphql/graphql-spec/pull/631",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-12-05.md",date:"2019-12-05T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-12-05.md",date:"2019-12-05T00:00:00.000Z",actor:null},{type:"prCreated",date:"2019-10-23T10:11:10.000Z",href:"https://github.com/graphql/graphql-spec/pull/631",actor:"victorandree"},{type:"commitsPushed",date:"2019-10-11T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/5e643f2109f710bd7ed69b7b534c448ad468961b",actor:"victorandree",commits:[{href:"https://github.com/graphql/graphql-spec/commit/5e643f2109f710bd7ed69b7b534c448ad468961b",headline:"Make root query operation type optional",ghUser:"victorandree",authorName:"Victor Andr\xe9e"}]}],shortname:"Make root query operation type optional",image:"/img/rfc_tracker.png",nextStage:!1},sidebar:"rfcsSidebar",previous:{title:"allow empty selections",permalink:"/rfcs/674"},next:{title:"allow directives on directive definitions",permalink:"/rfcs/567"}},l={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Alternative: Allow root query operation type to be empty",id:"alternative-allow-root-query-operation-type-to-be-empty",level:3},{value:"Alternative: Don&#39;t require\u200b any root type",id:"alternative-dont-require-any-root-type",level:3}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Identifier"}),": #631"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Stage"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Champion"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/victorandree",children:"@victorandree"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"PR"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/631",children:"Make root query operation type optional"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Added to ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-12-05.md",children:"2019-12-05 WG agenda"})]})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Mentioned in ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-12-05.md",children:"2019-12-05 WG notes"})]})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/631",children:"Spec PR"})," created"]})," on 2019-10-23 by victorandree"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Commit pushed"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/5e643f2109f710bd7ed69b7b534c448ad468961b",children:"Make root query operation type optional"})," on 2019-10-11 by ",(0,r.jsx)(t.a,{href:"https://github.com/victorandree",children:"@victorandree"})]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["This change would make the root ",(0,r.jsx)(t.code,{children:"query"})," operation type optional, consistent with ",(0,r.jsx)(t.code,{children:"mutation"})," and ",(0,r.jsx)(t.code,{children:"subscription"}),'. In this proposal, schema introspection would still work as before, by allowing a "default" ',(0,r.jsx)(t.code,{children:"query"})," type if one is not defined, exposing only the implicit fields ",(0,r.jsx)(t.code,{children:"__schema"})," and ",(0,r.jsx)(t.code,{children:"__types"})," (in response to PR feedback)."]}),"\n",(0,r.jsx)(t.p,{children:'The change is worded so that a "schema must define at least one root operation type.". See below for motivation and alternatives.'}),"\n",(0,r.jsx)(t.p,{children:"See #490 for background on this issue."}),"\n",(0,r.jsx)(t.h3,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsxs)(t.p,{children:["Not all GraphQL APIs need a ",(0,r.jsx)(t.code,{children:"query"})," interface but do fine with just ",(0,r.jsx)(t.code,{children:"mutation"})," or ",(0,r.jsx)(t.code,{children:"subscription"}),". This becomes especially apparent for micro services. Such services are forced to expose dummy query fields, with real world examples such as ",(0,r.jsx)(t.code,{children:"_"}),", ",(0,r.jsx)(t.code,{children:"version"}),", ",(0,r.jsx)(t.code,{children:"helloWorld"}),", or ",(0,r.jsx)(t.code,{children:"dontQueryMe"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"alternative-allow-root-query-operation-type-to-be-empty",children:"Alternative: Allow root query operation type to be empty"}),"\n",(0,r.jsxs)(t.p,{children:["Instead of making the root ",(0,r.jsx)(t.code,{children:"query"})," operation type optional, it can be allowed to not have any fields."]}),"\n",(0,r.jsxs)(t.p,{children:["This has already been proposed (see #606), but would have wider impacts than just making ",(0,r.jsx)(t.code,{children:"query"})," optional. A benefit of this approach is that schema introspection wouldn't need any new treatment."]}),"\n",(0,r.jsxs)(t.p,{children:["Allowing for only the query root, or others, to be empty would require\u200b validating that type in the context of how it's used, which seems strange to me (e.g. if a type is only allowed to be empty if it's called ",(0,r.jsx)(t.code,{children:"Query"})," or is used in ",(0,r.jsx)(t.code,{children:"schema { query: Query }"}),")."]}),"\n",(0,r.jsx)(t.h3,{id:"alternative-dont-require-any-root-type",children:"Alternative: Don't require\u200b any root type"}),"\n",(0,r.jsxs)(t.p,{children:["A schema which only defines types without any operations ",(0,r.jsx)(t.em,{children:"could"}),' be useful in some scenarios, where a schema in service A is perhaps stitched or used as the basis for another. To support this, one could drop the requirement "A schema must define at least one root operation type."']}),"\n",(0,r.jsx)(t.p,{children:'I think this would be esoteric and counter to existing requirements enforcing a "useful" schema (for example requiring composite types not to be empty).'}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>s,a:()=>a});var r=o(7294);const n={},i=r.createContext(n);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);