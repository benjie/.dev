"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[1838],{1312:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>t,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=i(5893),l=i(1151);const r={identifier:"wg1700",title:"Lee's new nullability & error propagation proposal",stage:"0",champion:"leebyron",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1700",events:[{type:"wgDiscussionCreated",date:new Date("2025-03-26T16:56:46.000Z"),href:"https://github.com/graphql/graphql-wg/discussions/1700",actor:"leebyron"}],related:"SemanticNullability",shortname:"Lee's new nullability & error propagation proposal",image:"/img/rfc_tracker.png"},t=void 0,a={id:"wg1700",title:"Lee's new nullability & error propagation proposal",description:"At a glance",source:"@site/rfcs/wg1700.md",sourceDirName:".",slug:"/wg1700",permalink:"/rfcs/wg1700",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"wg1700",title:"Lee's new nullability & error propagation proposal",stage:"0",champion:"leebyron",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1700",events:[{type:"wgDiscussionCreated",date:"2025-03-26T16:56:46.000Z",href:"https://github.com/graphql/graphql-wg/discussions/1700",actor:"leebyron"}],related:"SemanticNullability",shortname:"Lee's new nullability & error propagation proposal",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"SemanticNonNull type (null only on error)",permalink:"/rfcs/1065"},next:{title:"Disable Error Propagation Directive",permalink:"/rfcs/DisableErrorPropagationDirective"}},s={},d=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"1. The default unadorned type should be semantically nullable",id:"1-the-default-unadorned-type-should-be-semantically-nullable",level:2},{value:"2. We introduce this with a variant of Martin&#39;s &quot;no error bubbling&quot; proposal.",id:"2-we-introduce-this-with-a-variant-of-martins-no-error-bubbling-proposal",level:2},{value:"What is the desired <em>end state</em>?",id:"what-is-the-desired-end-state",level:3},{value:"What does a new service with modern clients need to do?",id:"what-does-a-new-service-with-modern-clients-need-to-do",level:3},{value:"What about existing clients?",id:"what-about-existing-clients",level:3},{value:"1. Opt-in to legacy behavior across the service",id:"1-opt-in-to-legacy-behavior-across-the-service",level:4},{value:"2. Update your in-development clients to be aware of <code>propagateError</code> and <code>noPropagateError</code>",id:"2-update-your-in-development-clients-to-be-aware-of-propagateerror-and-nopropagateerror",level:4},{value:"3. Code-mod your schema to add <code>@propagateError</code>",id:"3-code-mod-your-schema-to-add-propagateerror",level:4},{value:"4. Remove <code>@propagateError</code> after all clients upgrade [Optional]",id:"4-remove-propagateerror-after-all-clients-upgrade-optional",level:4},{value:"What about third-party clients?",id:"what-about-third-party-clients",level:3},{value:"Criteria",id:"criteria",level:2},{value:"A. GraphQL should be able to indicate which nullable fields should become non-nullable when error propagation is disabled",id:"a-graphql-should-be-able-to-indicate-which-nullable-fields-should-become-non-nullable-when-error-propagation-is-disabled",level:3},{value:"B. Existing executable documents should retain validity and meaning",id:"b-existing-executable-documents-should-retain-validity-and-meaning",level:3},{value:"C. Unadorned type should mean nullable",id:"c-unadorned-type-should-mean-nullable",level:3},{value:"D. Syntax should be obvious to programmers",id:"d-syntax-should-be-obvious-to-programmers",level:3},{value:"E. Syntax used in SDL and in executable documents should be consistent with SDL",id:"e-syntax-used-in-sdl-and-in-executable-documents-should-be-consistent-with-sdl",level:3},{value:"F. Alternative syntaxes should not cause confusion",id:"f-alternative-syntaxes-should-not-cause-confusion",level:3},{value:"G. Error propagation boundaries should not change in existing executable documents",id:"g-error-propagation-boundaries-should-not-change-in-existing-executable-documents",level:3},{value:"H. Implementation and spec simplicity",id:"h-implementation-and-spec-simplicity",level:3},{value:"I. Syntax used in executable documents should be unchanged",id:"i-syntax-used-in-executable-documents-should-be-unchanged",level:3},{value:"J. Type reasoning should remain local",id:"j-type-reasoning-should-remain-local",level:3},{value:"K. Introspection must be backwards compatible",id:"k-introspection-must-be-backwards-compatible",level:3},{value:"L. General GraphQL consumers should only need to think about nullable vs non-nullable",id:"l-general-graphql-consumers-should-only-need-to-think-about-nullable-vs-non-nullable",level:3},{value:"M. The SDL should have exactly one form used by all producers and consumers",id:"m-the-sdl-should-have-exactly-one-form-used-by-all-producers-and-consumers",level:3},{value:"N. The solution should add value even with error propagation enabled",id:"n-the-solution-should-add-value-even-with-error-propagation-enabled",level:3},{value:"O. Should not have breaking changes for existing executable documents",id:"o-should-not-have-breaking-changes-for-existing-executable-documents",level:3},{value:"P. The solution should result in users marking all semantically non-null fields as such",id:"p-the-solution-should-result-in-users-marking-all-semantically-non-null-fields-as-such",level:3},{value:"Q. Migrating the unadorned output type to other forms of nullability should be non-breaking",id:"q-migrating-the-unadorned-output-type-to-other-forms-of-nullability-should-be-non-breaking",level:3},{value:"R. Semantic nullability should only impact outputs, not inputs",id:"r-semantic-nullability-should-only-impact-outputs-not-inputs",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Identifier"}),": wg#1700"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Stage"}),": ",(0,o.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Champion"}),": ",(0,o.jsx)(n.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PR"}),": -"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Related"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/rfcs/SemanticNullability",title:"Semantic Nullability / RFC0",children:"SemanticNullability"})," (Semantic Nullability)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/discussions/1700",children:"WG discussion"})," created"]})," on 2025-03-26 by leebyron"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"I keep thinking... what is the end state that we want? I don't think we want 3 types representing forms of nullability, we just want 2: is it nullable or is it not?"}),"\n",(0,o.jsx)(n.p,{children:"From here we have two key questions:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"What is the default unadorned type? Do we add a qualifier that a type is nullable? or that a type is non-nullable?"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"How do we introduce this in a non-breaking way? How would existing systems adopt this?"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"1-the-default-unadorned-type-should-be-semantically-nullable",children:"1. The default unadorned type should be semantically nullable"}),"\n",(0,o.jsxs)(n.p,{children:["I've changed my mind from my earlier proposals. I believe the unadorned type should be nullable and the qualifier makes it non-null. Why? Pragmatically, because that's how GraphQL works today. Principally because in queryable data systems like GraphQL output types should become ",(0,o.jsx)(n.em,{children:"more constrained"})," with more adornment (precedent: SQL's ",(0,o.jsx)(n.code,{children:"NON NULL"})," operator). This is because as you evolve your schema, changing ",(0,o.jsx)(n.code,{children:"Int"})," to ",(0,o.jsx)(n.code,{children:"Int?"})," would be a breaking change where ",(0,o.jsx)(n.code,{children:"Int"})," to ",(0,o.jsx)(n.code,{children:"Int!"})," is not breaking."]}),"\n",(0,o.jsxs)(n.p,{children:["One of the very early reasons why I preferred the other way around was an aesthetic one. I believe most systems will have more non-null fields than nullable. It bothers me that schema will be littered with ",(0,o.jsx)(n.code,{children:"!"}),'. I felt particularly strongly about this when we were focused on the "client-controlled" aspects of nullability and ',(0,o.jsx)(n.code,{children:"!"})," would appear all over ",(0,o.jsx)(n.em,{children:"queries"}),". I've made my peace with this in schema, and I believe we have a path which does not disrupt queries."]}),"\n",(0,o.jsx)(n.h2,{id:"2-we-introduce-this-with-a-variant-of-martins-no-error-bubbling-proposal",children:'2. We introduce this with a variant of Martin\'s "no error bubbling" proposal.'}),"\n",(0,o.jsx)(n.p,{children:"There are two types:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Unadorned type is Semantically Nullable"}),"\n",(0,o.jsxs)(n.li,{children:["Adorned ",(0,o.jsx)(n.code,{children:"NonNull(T)"})," / ",(0,o.jsx)(n.code,{children:"T!"})," is Semantically Non-nullable."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'There is no third "Strictly non-nullable" type. There is no error bubbling (by default).'}),"\n",(0,o.jsxs)(n.p,{children:["Error bubbling becomes an opt-in legacy field level error handling behavior via ",(0,o.jsx)(n.code,{children:"propagateError"})," introspection field described in detail below."]}),"\n",(0,o.jsxs)(n.h3,{id:"what-is-the-desired-end-state",children:["What is the desired ",(0,o.jsx)(n.em,{children:"end state"}),"?"]}),"\n",(0,o.jsxs)(n.p,{children:["Error bubbling is exclusively the domain of the client, and no longer occurs on the server. Optionally, we reintroduce a separate following client-controlled proposal for adding ",(0,o.jsx)(n.code,{children:"!"})," on query fields to opt-in to error bubbling in specific areas."]}),"\n",(0,o.jsx)(n.p,{children:'Anyone setting up a brand new GraphQL service should never need to know about error bubbling or strict non-null. There is no additional configuration, schema definition, or query qualifiers to add. There is no "strict mode" directive.'}),"\n",(0,o.jsx)(n.h3,{id:"what-does-a-new-service-with-modern-clients-need-to-do",children:"What does a new service with modern clients need to do?"}),"\n",(0,o.jsx)(n.p,{children:"Nothing."}),"\n",(0,o.jsx)(n.p,{children:"They get semantic nullable and semantic non-nullable types by default! They're already in our desired end state."}),"\n",(0,o.jsx)(n.h3,{id:"what-about-existing-clients",children:"What about existing clients?"}),"\n",(0,o.jsx)(n.p,{children:"There are three mechanisms for migrating to this desired end state, one for each of schema, service and request."}),"\n",(0,o.jsx)(n.p,{children:"At a high level:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Schema:"})," A new ",(0,o.jsx)(n.code,{children:"@propagateError"})," directive which opts-in to error bubbling (fka strict null). This is exposed via introspection.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["New introspection field on ",(0,o.jsx)(n.code,{children:"Field"})," \u2014 ",(0,o.jsx)(n.code,{children:"propagateError: Boolean"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Service:"})," A ",(0,o.jsx)(n.code,{children:"propagateErrorOnAllNonNullFields"})," which has the effect of auto-applying ",(0,o.jsx)(n.code,{children:"@propagateError"})," to every non-null field.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This is optional, and plausibly not part of the spec. It's a convienience tool for migration."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Request:"})," A ",(0,o.jsx)(n.code,{children:"noPropagateError"})," request level argument (sibling to, not part of, the operation document) which disables error bubbling on the server."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Let's look at it over the course of a migration timeline."}),"\n",(0,o.jsx)(n.h4,{id:"1-opt-in-to-legacy-behavior-across-the-service",children:"1. Opt-in to legacy behavior across the service"}),"\n",(0,o.jsxs)(n.p,{children:["You update to a major version bump of GraphQL runtime (like GraphQL.js) which has in its release notes that the new ",(0,o.jsx)(n.em,{children:"default"})," behavior is to not propagate errors. There is a config flag you can set called ",(0,o.jsx)(n.code,{children:"propagateErrorOnAllNonNullFields"})," which you can provide ",(0,o.jsx)(n.code,{children:": true"})," - now all Non-null types will have exactly the legacy error bubbling behavior as they did before."]}),"\n",(0,o.jsxs)(n.h4,{id:"2-update-your-in-development-clients-to-be-aware-of-propagateerror-and-nopropagateerror",children:["2. Update your in-development clients to be aware of ",(0,o.jsx)(n.code,{children:"propagateError"})," and ",(0,o.jsx)(n.code,{children:"noPropagateError"})]}),"\n",(0,o.jsxs)(n.p,{children:["This ensures new client development generates correct types and error management logic for all permutations of ",(0,o.jsx)(n.code,{children:"NonNull"})," & ",(0,o.jsx)(n.code,{children:"propagateError"}),". At this point, clients continue to behave as they did before, but are now resilient to future changes in schema which have ",(0,o.jsx)(n.code,{children:"NonNull"})," types that ",(0,o.jsxs)(n.em,{children:["do not also have ",(0,o.jsx)(n.code,{children:"propagateError"})]}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Clients should also ideally provide ",(0,o.jsx)(n.code,{children:"noPropagateError"})," at this step. This opts clients into a mode where errors never propagate, which gives them more local control over error handling."]}),"\n",(0,o.jsxs)(n.h4,{id:"3-code-mod-your-schema-to-add-propagateerror",children:["3. Code-mod your schema to add ",(0,o.jsx)(n.code,{children:"@propagateError"})]}),"\n",(0,o.jsx)(n.p,{children:"After step 1, your service continued to operate as it did before, however you could not add new semantic non-null types yet without incurring more error bubbling, which we'd like to avoid."}),"\n",(0,o.jsxs)(n.p,{children:["There is a new well-known directive called ",(0,o.jsx)(n.code,{children:"@propagateError"}),", which if applied to a field tells the GraphQL runtime to use the legacy error bubbling behavior. Update your schema such that ",(0,o.jsx)(n.em,{children:"every"})," non-null typed field changes from ",(0,o.jsx)(n.code,{children:"field: Type!"})," to ",(0,o.jsx)(n.code,{children:"field: Type! @propagateError"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Once you've done this, you can remove the ",(0,o.jsx)(n.code,{children:"propagateErrorOnAllNonNullFields"})," service-wide config flag, since this is exactly what that flag did internally."]}),"\n",(0,o.jsxs)(n.p,{children:["You can now also add ",(0,o.jsx)(n.em,{children:"new"})," Non-Null typed fields ",(0,o.jsx)(n.em,{children:"without"})," ",(0,o.jsx)(n.code,{children:"@propagateError"}),". Because they are new fields, they are non-breaking to existing clients."]}),"\n",(0,o.jsxs)(n.h4,{id:"4-remove-propagateerror-after-all-clients-upgrade-optional",children:["4. Remove ",(0,o.jsx)(n.code,{children:"@propagateError"})," after all clients upgrade [Optional]"]}),"\n",(0,o.jsxs)(n.p,{children:["If you're lucky enough to sunset existing clients, then once all active clients provide ",(0,o.jsx)(n.code,{children:"noPropagateError"}),", then you can remove all instances of ",(0,o.jsx)(n.code,{children:"@propagateError"})," from your schema without any observable effect."]}),"\n",(0,o.jsxs)(n.p,{children:["Once you've done this, clients can also remove their use of ",(0,o.jsx)(n.code,{children:"noPropagateError"})]}),"\n",(0,o.jsx)(n.p,{children:"Congrats! Now your GraphQL service and clients are fully in the modern era of semantic non-null without error bubbling."}),"\n",(0,o.jsx)(n.h3,{id:"what-about-third-party-clients",children:"What about third-party clients?"}),"\n",(0,o.jsx)(n.p,{children:"I admit that this proposal is quite biased towards first-party GraphQL installs. However that is the vast majority of the GraphQL userbase. The above migration path doesn't work well if you don't control all the clients, because you cannot get past step-2."}),"\n",(0,o.jsx)(n.p,{children:"However public-facing APIs are well aware of this problem and their own mechanisms for managing API changes."}),"\n",(0,o.jsxs)(n.p,{children:["A hand-wavy proposal is to automatically set ",(0,o.jsx)(n.code,{children:"propagateErrorOnAllNonNullFields"})," to true when recieving a request from an existing client which has not indicated that it's made this migration yet."]}),"\n",(0,o.jsx)(n.h2,{id:"criteria",children:"Criteria"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/SemanticNullability.md#-solution-criteria",children:"https://github.com/graphql/graphql-wg/blob/main/rfcs/SemanticNullability.md#-solution-criteria"})}),"\n",(0,o.jsx)(n.h3,{id:"a-graphql-should-be-able-to-indicate-which-nullable-fields-should-become-non-nullable-when-error-propagation-is-disabled",children:"A. GraphQL should be able to indicate which nullable fields should become non-nullable when error propagation is disabled"}),"\n",(0,o.jsxs)(n.p,{children:["\u2705 semantically non-null without ",(0,o.jsx)(n.code,{children:"propagateError"})]}),"\n",(0,o.jsx)(n.h3,{id:"b-existing-executable-documents-should-retain-validity-and-meaning",children:"B. Existing executable documents should retain validity and meaning"}),"\n",(0,o.jsxs)(n.p,{children:["~\u2705 See migration guide above. This is true when existing services must ensure ",(0,o.jsx)(n.code,{children:"propagateError"})," is set when adopting this behavior."]}),"\n",(0,o.jsx)(n.h3,{id:"c-unadorned-type-should-mean-nullable",children:"C. Unadorned type should mean nullable"}),"\n",(0,o.jsx)(n.p,{children:"\u2705"}),"\n",(0,o.jsx)(n.h3,{id:"d-syntax-should-be-obvious-to-programmers",children:"D. Syntax should be obvious to programmers"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 No new symbols. No new types. Error bubbling was previously implicit behavior, now it is explicit"}),"\n",(0,o.jsx)(n.h3,{id:"e-syntax-used-in-sdl-and-in-executable-documents-should-be-consistent-with-sdl",children:"E. Syntax used in SDL and in executable documents should be consistent with SDL"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 No change to input types"}),"\n",(0,o.jsx)(n.h3,{id:"f-alternative-syntaxes-should-not-cause-confusion",children:"F. Alternative syntaxes should not cause confusion"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 (Is this a repeat of D?)"}),"\n",(0,o.jsx)(n.h3,{id:"g-error-propagation-boundaries-should-not-change-in-existing-executable-documents",children:"G. Error propagation boundaries should not change in existing executable documents"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 (Is this a repeat of B?)"}),"\n",(0,o.jsx)(n.h3,{id:"h-implementation-and-spec-simplicity",children:"H. Implementation and spec simplicity"}),"\n",(0,o.jsx)(n.p,{children:"~\u2705 One new directive/introspection field. Behavior change is straightforward. Managing adoption/migration requires careful consideration."}),"\n",(0,o.jsx)(n.h3,{id:"i-syntax-used-in-executable-documents-should-be-unchanged",children:"I. Syntax used in executable documents should be unchanged"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 This proposes no change to executable documents"}),"\n",(0,o.jsx)(n.h3,{id:"j-type-reasoning-should-remain-local",children:"J. Type reasoning should remain local"}),"\n",(0,o.jsxs)(n.p,{children:["\u2705 The ",(0,o.jsx)(n.code,{children:"propagateError"})," introspection/directive is local to the field (the optional ",(0,o.jsx)(n.code,{children:"propagateErrorOnAllNonNullFields"})," config just does this for you)"]}),"\n",(0,o.jsx)(n.h3,{id:"k-introspection-must-be-backwards-compatible",children:"K. Introspection must be backwards compatible"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 Adds one new field. Migration path supports existing semantics for shipped clients."}),"\n",(0,o.jsx)(n.h3,{id:"l-general-graphql-consumers-should-only-need-to-think-about-nullable-vs-non-nullable",children:"L. General GraphQL consumers should only need to think about nullable vs non-nullable"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 There are only two types and they remain the same as they are today. This proposal is about changing error bubbling behavior, not nullability."}),"\n",(0,o.jsx)(n.h3,{id:"m-the-sdl-should-have-exactly-one-form-used-by-all-producers-and-consumers",children:"M. The SDL should have exactly one form used by all producers and consumers"}),"\n",(0,o.jsxs)(n.p,{children:["\u2705 First party APIs have a clear path to introduce ",(0,o.jsx)(n.code,{children:"propagateError"})," for all consumers.\n\u26a0\ufe0f Third party APIs have a more challenging migration path, and may wish to expose different Schema to different clients."]}),"\n",(0,o.jsx)(n.h3,{id:"n-the-solution-should-add-value-even-with-error-propagation-enabled",children:"N. The solution should add value even with error propagation enabled"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 Separating nullability from error bubbling allows for more control. Clients should preferably disable error bubbling, but even if they do not - this unlocks the ability for a semantically non-null type which does not error propagate."}),"\n",(0,o.jsx)(n.h3,{id:"o-should-not-have-breaking-changes-for-existing-executable-documents",children:"O. Should not have breaking changes for existing executable documents"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 (Is this a repeat of B?)"}),"\n",(0,o.jsxs)(n.p,{children:["Note that once this behavior is adopted, ",(0,o.jsx)(n.em,{children:"removing"})," ",(0,o.jsx)(n.code,{children:"propagateError"})," for an existing field ",(0,o.jsx)(n.em,{children:"is a breaking change"}),". However newly added fields can be semantically non-null without ",(0,o.jsx)(n.code,{children:"propagateError"})," and existing documents will be unaffected."]}),"\n",(0,o.jsx)(n.h3,{id:"p-the-solution-should-result-in-users-marking-all-semantically-non-null-fields-as-such",children:"P. The solution should result in users marking all semantically non-null fields as such"}),"\n",(0,o.jsxs)(n.p,{children:["\u2705 This is technically not breaking, however note that changing ",(0,o.jsx)(n.code,{children:"field: Type"})," to ",(0,o.jsx)(n.code,{children:"field: Type!"})," does introduce a new source of errors (which may be preferable!) Doing this without adding ",(0,o.jsx)(n.code,{children:"@propagateError"})," is preferred, since changing ",(0,o.jsx)(n.code,{children:"field: Type"})," to ",(0,o.jsx)(n.code,{children:"field: Type! @propagateError"}),", could lose data - and is exactly why this kind change is discouraged today."]}),"\n",(0,o.jsx)(n.h3,{id:"q-migrating-the-unadorned-output-type-to-other-forms-of-nullability-should-be-non-breaking",children:"Q. Migrating the unadorned output type to other forms of nullability should be non-breaking"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 See C. and P."}),"\n",(0,o.jsx)(n.h3,{id:"r-semantic-nullability-should-only-impact-outputs-not-inputs",children:"R. Semantic nullability should only impact outputs, not inputs"}),"\n",(0,o.jsx)(n.p,{children:"\u2705 No proposed change to inputs"}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>t});var o=i(7294);const l={},r=o.createContext(l);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);