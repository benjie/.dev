"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[5973],{8385:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>o});var r=a(5893),i=a(1151);const s={identifier:"326",title:"Scalar serialize as built-in scalar type",stage:"S",champion:"leebyron",prUrl:"https://github.com/graphql/graphql-spec/pull/326",events:[{type:"prCreated",date:new Date("2017-06-19T23:59:41.000Z"),href:"https://github.com/graphql/graphql-spec/pull/326",actor:"leebyron"},{type:"commitsPushed",date:new Date("2017-06-19T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/aa4f7b68769f83eeb36f7df67a598b08990c3a2c",actor:"leebyron",commits:[{href:"https://github.com/graphql/graphql-spec/commit/aa4f7b68769f83eeb36f7df67a598b08990c3a2c",headline:"RFC: Scalar serialize as built-in scalar type",ghUser:"leebyron",authorName:"Lee Byron"}]}],shortname:"Scalar serialize as built-in scalar type",image:"/img/rfc_tracker.png",closedAt:new Date("2018-10-14T11:55:24.000Z"),nextStage:!1},l=void 0,n={id:"326",title:"Scalar serialize as built-in scalar type",description:"At a glance",source:"@site/rfcs/326.md",sourceDirName:".",slug:"/326",permalink:"/rfcs/326",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"326",title:"Scalar serialize as built-in scalar type",stage:"S",champion:"leebyron",prUrl:"https://github.com/graphql/graphql-spec/pull/326",events:[{type:"prCreated",date:"2017-06-19T23:59:41.000Z",href:"https://github.com/graphql/graphql-spec/pull/326",actor:"leebyron"},{type:"commitsPushed",date:"2017-06-19T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/aa4f7b68769f83eeb36f7df67a598b08990c3a2c",actor:"leebyron",commits:[{href:"https://github.com/graphql/graphql-spec/commit/aa4f7b68769f83eeb36f7df67a598b08990c3a2c",headline:"RFC: Scalar serialize as built-in scalar type",ghUser:"leebyron",authorName:"Lee Byron"}]}],shortname:"Scalar serialize as built-in scalar type",image:"/img/rfc_tracker.png",closedAt:"2018-10-14T11:55:24.000Z",nextStage:!1},sidebar:"rfcsSidebar",previous:{title:"Limit uniqueness to `@skip`, `@include` and `@deprecated` directives",permalink:"/rfcs/471"}},c={},o=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Identifier"}),": #326"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Stage"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-x-rejected",children:"RFCX: Closed"})," 2018-10-14T11:55:24Z"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Champion"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"PR"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/326",children:"Scalar serialize as built-in scalar type"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/326",children:"Spec PR"})," created"]})," on 2017-06-20 by leebyron"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Commit pushed"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/aa4f7b68769f83eeb36f7df67a598b08990c3a2c",children:"RFC: Scalar serialize as built-in scalar type"})," on 2017-06-19 by ",(0,r.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"Currently, Custom Scalars only describe their name and no other behavior about them can be programmatically determined. However in practice most custom scalar types are specializations of one of the existing built-in scalar types (String, Int, Float, etc.)."}),"\n",(0,r.jsx)(t.p,{children:'This proposes adding one additional piece of metadata to custom scalars, a "serializes as" type which must be a built-in scalar type. This serialize as type describes what kinds of values are allowed to be provided as input to that type and what kind of value is expected to serialize from that type. This metadata is useful for code-generation systems which expect to generate code in well typed environments. It can also improve the validation accuracy and IDE ergonomics by providing a similar level of information about custom scalars as exist for the built-in scalars.'}),"\n",(0,r.jsxs)(t.p,{children:["To provide this metadata to those kinds of tools, this also extends the introspection system to return the serialize as type in the ",(0,r.jsx)(t.code,{children:"ofType"})," field."]}),"\n",(0,r.jsxs)(t.p,{children:["This spec text has a reference implementation here: ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-js/pull/914/",children:"https://github.com/graphql/graphql-js/pull/914/"})]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>n,a:()=>l});var r=a(7294);const i={},s=r.createContext(i);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);