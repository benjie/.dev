"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[9364],{8397:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var i=n(5893),s=n(1151);const r={identifier:"806",title:"__typename should be valid at subscription root",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/806",events:[{type:"prCreated",date:new Date("2020-12-05T11:12:27.000Z"),href:"https://github.com/graphql/graphql-spec/pull/806",actor:"benjie"},{type:"commitsPushed",date:new Date("2020-12-05T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/f5cd0c6db6713dfca9e549e067505544ec855e80",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/f5cd0c6db6713dfca9e549e067505544ec855e80",headline:"Ignore introspection fields when creating source event stream",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"776",shortname:"__typename should be valid at subscription root",image:"/img/rfc_tracker.png",closedAt:new Date("2022-01-06T13:03:02.000Z")},o=void 0,l={id:"806",title:"__typename should be valid at subscription root",description:"At a glance",source:"@site/rfcs/806.md",sourceDirName:".",slug:"/806",permalink:"/rfcs/806",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"806",title:"__typename should be valid at subscription root",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/806",events:[{type:"prCreated",date:"2020-12-05T11:12:27.000Z",href:"https://github.com/graphql/graphql-spec/pull/806",actor:"benjie"},{type:"commitsPushed",date:"2020-12-05T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/f5cd0c6db6713dfca9e549e067505544ec855e80",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/f5cd0c6db6713dfca9e549e067505544ec855e80",headline:"Ignore introspection fields when creating source event stream",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"776",shortname:"__typename should be valid at subscription root",image:"/img/rfc_tracker.png",closedAt:"2022-01-06T13:03:02.000Z"},sidebar:"rfcsSidebar",previous:{title:"Map type",permalink:"/rfcs/888"},next:{title:"Input Objects accepting exactly @oneField",permalink:"/rfcs/586"}},c={},a=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Description of issue",id:"description-of-issue",level:2},{value:"Solution outline",id:"solution-outline",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Identifier"}),": #806"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Stage"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-x-rejected",children:"RFCX: Closed"})," 2022-01-06T13:03:02Z"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Champion"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"PR"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/806",children:"__typename should be valid at subscription root"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Related"}),":","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/rfcs/776",title:"__typename is not valid at subscription root / RFC3",children:"#776"})," (__typename is not valid at subscription root)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/806",children:"Spec PR"})," created"]})," on 2020-12-05 by benjie"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Commit pushed"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/f5cd0c6db6713dfca9e549e067505544ec855e80",children:"Ignore introspection fields when creating source event stream"})," on 2020-12-05 by ",(0,i.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["This is an alternative solution to #776 wherein ",(0,i.jsx)(t.code,{children:"__typename"})," is explicitly allowed inspired by @IvanGoncharov's ",(0,i.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/776#issuecomment-738079711",children:"comment on that PR"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"description-of-issue",children:"Description of issue"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"__typename"})," does not return an event stream, so it does not make sense to allow for it to be ",(0,i.jsx)(t.a,{href:"https://spec.graphql.org/draft/#sec-Source-Stream",children:"the source stream"})," in a GraphQL subscription operation. As currently specified, the following query passes validation, but it should always produce an error since the ",(0,i.jsx)(t.a,{href:"https://spec.graphql.org/draft/#ResolveFieldEventStream()",children:"ResolveFieldEventStream"})," algorithm cannot resolve a subscription ",(0,i.jsx)(t.code,{children:"resolver"})," for ",(0,i.jsx)(t.code,{children:"__typename"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-graphql",children:"subscription {\n  __typename\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Separately; it's valid to add ",(0,i.jsx)(t.code,{children:"__typename"})," to any selection set in any GraphQL operation ",(0,i.jsx)(t.em,{children:"except"})," the root selection set (including fragments) on a Subscription operation. This exclusion complicates life for various GraphQL tooling; it's desirable that this (currently invalid) GraphQL operation be valid:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-graphql",children:"subscription sub {\n  newMessage {\n    body\n    sender\n  }\n  __typename\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:['The current GraphQL algorithm for subscriptions operates in two steps; first it resolves the "source stream" from the root field that will generate the subscription events, and then when an event is received it executes the entire operation (NOTE: not just the selection set of the source stream\'s field, but the entire selection set of the operation) using this event as the ',(0,i.jsx)(t.code,{children:"initialValue"}),". As such, ",(0,i.jsx)(t.code,{children:"__typename"})," ",(0,i.jsx)(t.em,{children:"could"})," be valid in the root selection set so long as there is exactly one field capable of providing the source stream."]}),"\n",(0,i.jsx)(t.h2,{id:"solution-outline",children:"Solution outline"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Change validation for subscription operations so that instead of saying the root selection set must include exactly one field, it's now exactly one ",(0,i.jsx)(t.em,{children:"non-introspection"})," field."]}),"\n",(0,i.jsxs)(t.li,{children:["Change ",(0,i.jsx)(t.code,{children:"CreateSourceEventStream"})," such that it uses this non-introspection field as the event source (i.e. so that it ignores introspection fields)."]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var i=n(7294);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);