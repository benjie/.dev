"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[6189],{3289:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=s(5893),r=s(1151);const t={identifier:"SchemaCoordinates",stage:"0",title:"Schema Coordinates",events:[{type:"docUpdated",date:new Date("2024-02-08T09:24:51.000Z"),href:"https://github.com/graphql/graphql-wg/blob/6d02705dea034fb65ebc6799632adb7bd550d0aa/rfcs/SchemaCoordinates.md",actor:"Benjie"},{type:"docCreated",date:new Date("2021-01-07T19:18:22.000Z"),href:"https://github.com/graphql/graphql-wg/blob/257673b7ede31f1856b53ae833a43fc5034ac99b/rfcs/SchemaCoordinates.md",actor:"Mark Larah"}],related:"733, 735, 746, 794",shortname:"Schema Coordinates",image:"/img/rfc_tracker.png"},a=void 0,o={id:"SchemaCoordinates",title:"Schema Coordinates",description:"At a glance",source:"@site/rfcs/SchemaCoordinates.md",sourceDirName:".",slug:"/SchemaCoordinates",permalink:"/rfcs/SchemaCoordinates",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"SchemaCoordinates",stage:"0",title:"Schema Coordinates",events:[{type:"docUpdated",date:"2024-02-08T09:24:51.000Z",href:"https://github.com/graphql/graphql-wg/blob/6d02705dea034fb65ebc6799632adb7bd550d0aa/rfcs/SchemaCoordinates.md",actor:"Benjie"},{type:"docCreated",date:"2021-01-07T19:18:22.000Z",href:"https://github.com/graphql/graphql-wg/blob/257673b7ede31f1856b53ae833a43fc5034ac99b/rfcs/SchemaCoordinates.md",actor:"Mark Larah"}],related:"733, 735, 746, 794",shortname:"Schema Coordinates",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"GraphQL Defer and Stream Directives",permalink:"/rfcs/DeferStream"},next:{title:"SemanticNonNull type (null only on error)",permalink:"/rfcs/1065"}},l={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"\ud83d\udcdc Problem Statement",id:"-problem-statement",level:2},{value:"Use cases",id:"use-cases",level:3},{value:"\u2705 RFC Goals",id:"-rfc-goals",level:2},{value:"\ud83d\udeab RFC Non-goals",id:"-rfc-non-goals",level:2},{value:"\ud83e\uddd1\u200d\ud83d\udcbb Proposed syntax",id:"-proposed-syntax",level:2},{value:"<code>Type</code>",id:"type",level:3},{value:"<code>Type.attribute</code>",id:"typeattribute",level:3},{value:"<code>Type.field(argName:)</code>",id:"typefieldargname",level:3},{value:"<code>@directive</code>",id:"directive",level:3},{value:"<code>@directive(argName:)</code>",id:"directiveargname",level:3},{value:"\u2728 Examples",id:"-examples",level:3},{value:"\ud83c\udfa8 Prior art",id:"-prior-art",level:2},{value:"\ud83e\udd63 Document -&gt; Schema Coordinate serialization",id:"-document---schema-coordinate-serialization",level:2},{value:"\ud83d\uddf3\ufe0f Alternatives considered",id:"\ufe0f-alternatives-considered",level:2},{value:"Naming",id:"naming",level:3},{value:"Separator",id:"separator",level:3},{value:"Field Arguments",id:"field-arguments",level:3},{value:"Pros for <code>Query.rollDice.numDice</code>",id:"pros-for-queryrolldicenumdice",level:4},{value:"Pros for <code>Query.rollDice(numDice:)</code>",id:"pros-for-queryrolldicenumdice-1",level:4},{value:"Decision",id:"decision",level:4},{value:"\ud83d\ude45 Syntax Non-goals",id:"-syntax-non-goals",level:2},{value:"Answered questions",id:"answered-questions",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identifier"}),": SchemaCoordinates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stage"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": -"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PR"}),": -"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Related"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/733",title:"Tagged type / RFCX",children:"#733"})," (Tagged type)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/794",title:"Schema Coordinates / RFC2",children:"#794"})," (Schema Coordinates)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/6d02705dea034fb65ebc6799632adb7bd550d0aa/rfcs/SchemaCoordinates.md",children:"RFC document updated"})})," on 2024-02-08 by Benjie"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/257673b7ede31f1856b53ae833a43fc5034ac99b/rfcs/SchemaCoordinates.md",children:"RFC document created"})})," on 2021-01-07 by Mark Larah"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.h1,{id:"rfc-schema-coordinates",children:"RFC: Schema Coordinates"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Proposed by:"})," ",(0,i.jsx)(n.a,{href:"https://twitter.com/mark_larah",children:"Mark Larah"})," - Yelp"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Spec pull request"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/794",children:"https://github.com/graphql/graphql-spec/pull/794"})]}),"\n",(0,i.jsx)(n.p,{children:'This RFC proposes formalizing "Schema Coordinates" - a human readable syntax to\nuniquely identify a type, field, field argument, enum value, directive or\ndirective argument defined in a GraphQL Schema.'}),"\n",(0,i.jsx)(n.p,{children:"This should be listed as a non-normative note in the GraphQL specification to\nserve as an official reference for use by third party tooling."}),"\n",(0,i.jsx)(n.h2,{id:"-problem-statement",children:"\ud83d\udcdc Problem Statement"}),"\n",(0,i.jsx)(n.p,{children:"GraphQL tooling and libraries may wish to refer to various components of a\nGraphQL schema. Use cases include documentation, metrics and logging libraries."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.fluffy.cc/5Cz9cpwLVsH1FsSF9VPVLwXvwrGpNh7q.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"(Example shown from GraphiQL's documentation search tab)"})}),"\n",(0,i.jsx)(n.p,{children:"There already exists a convention used by some libraries and tools for writing\nout fields in a unique way for such purposes. However, there is no formal\nspecification or name for this convention."}),"\n",(0,i.jsx)(n.h3,{id:"use-cases",children:"Use cases"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A GraphQL server wants to ",(0,i.jsx)(n.strong,{children:"log how often each field in the schema is\nrequested"}),". This may be implemented by incrementing a counter by the name of\nthe schema coordinate for each field executed in a request."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Existing implementations: Yelp (internal), Facebook (internal),\n",(0,i.jsx)(n.a,{href:"https://shopify.dev/concepts/about-apis/versioning/api-health",children:"Shopify (API health report)"})]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["GraphiQL and other playgrounds / documentation sites want to show a list of\n",(0,i.jsx)(n.strong,{children:"search results"})," when a user searches for a type or field name. We can\ndisplay a list of schema coordinates that match the search term. A schema\ncoordinate can also be used in the hyperlink to form a permalink for\ndocumentation for a particular field."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Existing implementations: GraphiQL, Apollo Studio (see "Prior Art")'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A developer may want to perform ",(0,i.jsx)(n.strong,{children:"analytics"})," on all known\n",(0,i.jsx)(n.a,{href:"https://www.apollographql.com/docs/apollo-server/performance/apq/",children:"persisted queries"})," - e.g. what are the most commonly used fields across\nall documents. Schema coordinates may be used as the index/lookup keys when\nstoring this information in the database."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Existing implementations: Yelp (internal)"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"GitHub bot"})," may want to warn developers in a Pull Request comment\nwhenever the schema diff contains a breaking change. Schema coordinates can be\nused to provide a list of which fields were broken."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Existing implementations: GraphQL Inspector (see "Prior Art")'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"GraphQL IDEs"})," (e.g. GraphiQL, GraphQL Playground, Apollo Studio) may wish\nto display the schema definition type of a node in a query when hovering over\nit."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("summary",{children:"Example"}),"\n",(0,i.jsx)(n.img,{src:"https://i.fluffy.cc/g78sJCjCJ0MsbNPhvgPXP46Kh9knBCKF.png",alt:""})]})}),"\n",(0,i.jsx)(n.p,{children:"Schema coordinates can be used to form the left hand side of this popover."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Existing implementations: Apollo Studio (see "Prior Art")'})}),"\n",(0,i.jsx)(n.h2,{id:"-rfc-goals",children:"\u2705 RFC Goals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'There be one, unambiguous way to write a "schema coordinate" that refers to a\nparticular element in a GraphQL schema. (This is to avoid users having to\n"simplify" more complex coordinates to produce a canonical representation.)'}),"\n",(0,i.jsxs)(n.li,{children:["Schema coordinate syntax should build off of existing de-facto standards\nalready adopted for this purpose (i.e. ",(0,i.jsx)(n.code,{children:"Foo.bar"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Schema coordinate syntax is open for extension in the future. We should make\ndesign choices that give us flexibility and anticipate future syntax needs\n(based off of discussions around this RFC)."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-rfc-non-goals",children:"\ud83d\udeab RFC Non-goals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['This does not cover "selectors" or "wildcard" syntax - e.g. ',(0,i.jsx)(n.code,{children:"User.*"}),". ",(0,i.jsx)(n.em,{children:"(See\nalternatives considered.)"})]}),"\n",(0,i.jsxs)(n.li,{children:["There are ",(0,i.jsx)(n.strong,{children:"no proposed GraphQL language/syntax changes"})]}),"\n",(0,i.jsxs)(n.li,{children:["There are ",(0,i.jsx)(n.strong,{children:"no proposed GraphQL runtime changes"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#-syntax-non-goals",children:"Schema coordinate non-goals"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-proposed-syntax",children:"\ud83e\uddd1\u200d\ud83d\udcbb Proposed syntax"}),"\n",(0,i.jsx)(n.h3,{id:"type",children:(0,i.jsx)(n.code,{children:"Type"})}),"\n",(0,i.jsxs)(n.p,{children:["Refers to a named type (e.g. something represented by ",(0,i.jsx)(n.code,{children:"__typename"})," in a GraphQL\nintrospection call)."]}),"\n",(0,i.jsx)(n.h3,{id:"typeattribute",children:(0,i.jsx)(n.code,{children:"Type.attribute"})}),"\n",(0,i.jsx)(n.p,{children:"Refers to a named attribute on the named type."}),"\n",(0,i.jsxs)(n.p,{children:["Not all types support this. For object types and interface types this is a field,\nfor input objects this would be an input field, for enums this would be an enum\nvalue, for future GraphQL types this will relate to a related concept if they\nhave one (e.g. for the ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/733",children:'proposed "tagged" type'}),' it would refer to\nthe "member field").']}),"\n",(0,i.jsx)(n.h3,{id:"typefieldargname",children:(0,i.jsx)(n.code,{children:"Type.field(argName:)"})}),"\n",(0,i.jsx)(n.p,{children:"Refers to a named argument on the named field of the named type."}),"\n",(0,i.jsx)(n.h3,{id:"directive",children:(0,i.jsx)(n.code,{children:"@directive"})}),"\n",(0,i.jsx)(n.p,{children:"References the given named directive"}),"\n",(0,i.jsx)(n.h3,{id:"directiveargname",children:(0,i.jsx)(n.code,{children:"@directive(argName:)"})}),"\n",(0,i.jsx)(n.p,{children:"References the named argument of the named directive."}),"\n",(0,i.jsx)(n.h3,{id:"-examples",children:"\u2728 Examples"}),"\n",(0,i.jsx)(n.p,{children:"For example, consider the following schema:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'directive @private(scope: String!) on FIELD\n\ntype Person {\n  name: String\n  email: String @private(scope: "loggedIn")\n}\n\ntype Business {\n  name: String\n  owner: Person\n}\n\ntype Query {\n  searchBusinesses(name: String): [Business]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"We can write the following schema coordinates:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Person"}),' uniquely identifies the the "Person" type']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Business"}),' uniquely identifies the the "Business" type']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Person.name"}),' uniquely identifies the "name" field on the "Person" type']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Business.name"}),' uniquely identifies the "name" field on the "Business"\ntype']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Business.owner"}),' uniquely identifies the "owner" field on the "Business" type']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Query.searchBusinesses"}),' uniquely identifies the "searchBusinesses" field on\nthe "Query" type']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Query.searchBusinesses(name:)"}),' uniquely identifies the "name" argument on the\n"searchBusinesses" field on the "Query" type']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@private"}),' uniquely identifies the "private" directive']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@private(scope:)"}),' uniquely identifies the "scope" argument on the "private"\ndirective']}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-prior-art",children:"\ud83c\udfa8 Prior art"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['The name "schema coordinates" is inspired from ',(0,i.jsx)(n.a,{href:"https://github.com/graphql-java/graphql-java",children:"GraphQL Java"}),'\n(4.3k stars), where "field coordinates" are already used in a similar way as\ndescribed in this RFC.']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/issues/735#issuecomment-646979049",children:"GitHub comment"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql-java/graphql-java/blob/2acb557474ca73/src/main/java/graphql/schema/FieldCoordinates.java",children:"Implementation"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"GraphiQL displays schema coordinates in its documentation search tab:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.fluffy.cc/5Cz9cpwLVsH1FsSF9VPVLwXvwrGpNh7q.png",alt:""})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/kamilkisiela/graphql-inspector",children:"GraphQL Inspector"})," (840\nstars) shows schema coordinates in its output:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.imgur.com/HAf18rz.png",alt:""})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.apollographql.com/docs/studio/",children:"Apollo Studio"})," shows schema\ncoordinates when hovering over fields in a query:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.fluffy.cc/g78sJCjCJ0MsbNPhvgPXP46Kh9knBCKF.png",alt:""})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-document---schema-coordinate-serialization",children:"\ud83e\udd63 Document -> Schema Coordinate serialization"}),"\n",(0,i.jsx)(n.p,{children:"Use cases 3 and 5 above imply that a mapping from GraphQL query nodes to schema\ncoordinates is performed."}),"\n",(0,i.jsx)(n.p,{children:"For example, consider the following schema:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Person {\n  name: String\n}\n\ntype Business {\n  name: String\n  owner: Person\n}\n\ntype Query {\n  searchBusiness(name: String): [Business]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"And the following query:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'query {\n  searchBusinesses(name: "El Greco Deli") {\n    name\n    owner {\n      name\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"From the query above, we may calculate the following list of schema coordinates:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Query.searchBusinesses"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Business.name"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Business.owner"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Person.name"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Query.searchBusinesses(name:)"})," is also a valid member of the output set. The\nserialization algorithm may optionally choose to output all permutations of field\narguments used, should this be specified."]}),"\n",(0,i.jsxs)(n.p,{children:["A library has been written to demonstrate this mapping:\n",(0,i.jsx)(n.code,{children:"https://github.com/sharkcore/extract-schema-coordinates"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-alternatives-considered",children:"\ud83d\uddf3\ufe0f Alternatives considered"}),"\n",(0,i.jsx)(n.h3,{id:"naming",children:"Naming"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'"Schema Selectors"'})}),"\n",(0,i.jsxs)(n.p,{children:['"Selectors" is a term used in ',(0,i.jsx)(n.a,{href:"https://www.w3.org/TR/selectors-api/",children:"HTML"})," and\n",(0,i.jsx)(n.a,{href:"https://drafts.csswg.org/selectors-4/",children:"CSS"})," to ",(0,i.jsx)(n.em,{children:"select"})," parts of an HTML\ndocument."]}),"\n",(0,i.jsxs)(n.p,{children:["This would be a compelling, familiar choice - however, we've decided to not\nsupport wildcard expansion in this spec. See the section\n",(0,i.jsx)(n.a,{href:"#-syntax-non-goals",children:"Syntax Non-goals"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'"type/field pairs"'})}),"\n",(0,i.jsx)(n.p,{children:"This was the original working name. However, there already exists more\nestablished terminology for this concept, and we also wish to describe more\nthan just types on fields."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'"Field Coordinates"'})}),"\n",(0,i.jsxs)(n.p,{children:['"Field Coordinates" is already understood and used by the popular\n',(0,i.jsx)(n.a,{href:"https://github.com/graphql-java/graphql-java",children:"GraphQL Java"})," project."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://youtu.be/FYF15RA9H3k?t=3786",children:"Feedback in the August GraphQL Working Group meeting"}),"\nhinted that since we're targeting also describing arguments, ",(0,i.jsx)(n.em,{children:"field"}),'\ncoordinates might not be the right name. Hence "Schema Coordinates" is chosen\ninstead, as a more generalized form of this.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'"GraphQL Coordinates"'})}),"\n",(0,i.jsxs)(n.p,{children:['Similar to Field Coordinates/Schema Coordinates - however, "GraphQL\nCoordinates" is potentially ambiguous as to if it describes ',(0,i.jsx)(n.em,{children:"schema"})," members,\n",(0,i.jsx)(n.em,{children:"query/document"})," members or response object members."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'"Field path" / "GraphQL path"'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.a,{href:"https://github.com/graphql/graphql-js/blob/8f3d09b54260565/src/type/definition.js#L951",children:[(0,i.jsx)(n.code,{children:"path"})," exists as an attribute on ",(0,i.jsx)(n.code,{children:"GraphQLResolveInfo"})]}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Given the following query:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'query {\n  searchBusinesses(name: "El Greco Deli") {\n    name\n    owner {\n      name\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Person.name"}),' in the response may be written as the following "field path":']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'["query", "searchBusinesses", 1, "owner", "name"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:['Note that here, the "path" is a serialized ',(0,i.jsx)(n.em,{children:"response"})," tree traversal, instead\nof describing the location of the field in the ",(0,i.jsx)(n.em,{children:"schema"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'Since "path" is already used in GraphQL nomenclature to describe the location\nof a field in a response, we\'ll avoid overloading this term.'}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"separator",children:"Separator"}),"\n",(0,i.jsxs)(n.p,{children:['This RFC proposes using "',(0,i.jsx)(n.code,{children:"."}),'" as the separator character between a type and\nfield. The following have also been proposed:']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Foo::bar"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Foo#bar"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Foo->bar"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Foo~bar"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Foo:bar"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['"',(0,i.jsx)(n.code,{children:"."}),'" is already used in the existing implementations of field coordinates, hence\nthe suggested usage in this RFC. However, we may wish to consider one of the\nalternatives above, should this conflict with existing or planned language\nfeatures.']}),"\n",(0,i.jsx)(n.h3,{id:"field-arguments",children:"Field Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["We have discussed multiple options for selecting arguments on fields. (",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/746#discussion_r526243627",children:"PR"}),",\nand ",(0,i.jsx)(n.a,{href:"https://youtu.be/Duh4MRXQRQA?t=2506",children:"December WG Meeting"}),"). For example, consider the following\nschema:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  rollDice(numDice: Int, numSides: Int): Int\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We may want to refer to the ",(0,i.jsx)(n.code,{children:"numDice"})," argument in a schema selector. Two options\nfor this syntax are:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Query.rollDice.numDice"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Query.rollDice(numDice:)"})}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"pros-for-queryrolldicenumdice",children:["Pros for ",(0,i.jsx)(n.code,{children:"Query.rollDice.numDice"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Less bytes/characters to type"}),"\n",(0,i.jsx)(n.li,{children:'May allow for extension to include nested "field paths" (e.g. Foo.bar.Baz.qux...)'}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/746#issuecomment-752941039",children:"Prior usage"})," of this syntax to represent state internally"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"pros-for-queryrolldicenumdice-1",children:["Pros for ",(0,i.jsx)(n.code,{children:"Query.rollDice(numDice:)"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Indicating arguments with colons disambiguates against other types of schema\nnodes. For those unfamiliar with schema selectors, it may be unclear if the\nthird dot separated item refers to a directive or a child object etc."}),"\n",(0,i.jsxs)(n.li,{children:["Using trailing colons for arguments is borrowed from other languages (e.g.\n[Swift][swift]). This may indicate to users who are unfamiliar with schema\ncoordinates, but recognize this from other languages, that ",(0,i.jsx)(n.code,{children:"numDice:"}),' refers\nto an argument. The function parentheses and colons more strongly communicate\n"this is an argument!" than a second dot separator.']}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["We are choosing ",(0,i.jsx)(n.code,{children:"Query.rollDice(numDice:)"})," to optimize for ",(0,i.jsx)(n.strong,{children:"readability"})," and\n",(0,i.jsx)(n.strong,{children:"extensibility"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Given our expected use cases, we assume Schema Coordinates will be ",(0,i.jsx)(n.em,{children:"read"})," more\noften than they are ",(0,i.jsx)(n.em,{children:"written"}),' (e.g. error messages in a stack trace from a\nschema linting tool). Readers may be unfamiliar with its syntax. We want to\n"hint" as much as possible the meaning of the coordinates in its syntax. We\nthink ',(0,i.jsx)(n.code,{children:"(numDice:)"}),' more clearly communicates that "numDice" is an argument, over\n',(0,i.jsx)(n.code,{children:".numDice"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"In addition, we want to be mindful of extensions to this syntax in the future.\nUsing dots only as a separator may overload the meaning of elements in schema\ncoordinates in the future. (If we capture new schema node types, or nested\npaths.)"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"We should make sure that the spec enables future innovation including using it\nfor things other than schema coordinates. To my mind the (foo:) syntax is more\nflexible in this regard. For example, I can imagine referring to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Foo.bar(baz.qux:)"}),": the qux field of the input object referred to from the\nbaz argument of the bar field on the Foo type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Foo.bar(baz:).qux"}),": the qux field on the return type of the bar field\n(with baz: argument) of the Foo type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Foo.bar.baz.qux"}),": the qux field of the return type of the baz field on the\nreturn type of the bar field on type Foo."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If we were to only use periods then all of these would come out the same as\n",(0,i.jsx)(n.code,{children:"Foo.bar.baz.qux"}),", and this ambiguity precludes this kind of reusal of the\nschema-coordinates syntax for this use case (which is outside the scope of the\nschema coordinates spec, for sure, but is still a potential use-case for the\nsyntax)."]}),"\n",(0,i.jsxs)(n.p,{children:["~ ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/746#discussion_r527639917",children:"benjie"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-syntax-non-goals",children:"\ud83d\ude45 Syntax Non-goals"}),"\n",(0,i.jsx)(n.p,{children:"This syntax consciously does not cover the following use cases:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Wildcard selectors"})}),"\n",(0,i.jsxs)(n.p,{children:["Those familiar with ",(0,i.jsx)(n.code,{children:"document.querySelector"}),' may be expecting the ability to\npass "wildcards" or "star syntax" to be able to select multiple schema\nelements. This implies multiple ways of ',(0,i.jsx)(n.em,{children:"selecting"})," a schema node."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"User.address"})," and ",(0,i.jsx)(n.code,{children:"User.a*"})," might both resolve to ",(0,i.jsx)(n.code,{children:"User.address"}),".\nBut ",(0,i.jsx)(n.code,{children:"User.a*"})," could also ambiguously refer to ",(0,i.jsx)(n.code,{children:"User.age"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It's unclear how wildcard expansion would work with respect to field\narguments*, potentially violating the requirement of this schema to ",(0,i.jsx)(n.em,{children:"uniquely"}),"\nidentify schema components."]}),"\n",(0,i.jsxs)(n.p,{children:["* ",(0,i.jsxs)(n.em,{children:["(e.g. does ",(0,i.jsx)(n.code,{children:"Query.getUser"})," also select all arguments on the ",(0,i.jsx)(n.code,{children:"getUser"}),"\nfield? Who knows! A discussion for another time.)"]})]}),"\n",(0,i.jsxs)(n.p,{children:["A more general purpose schema selector language could be built on top of this\nspec - however, we'll consider this ",(0,i.jsx)(n.strong,{children:"out of scope"})," for now."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Nested field paths"})}),"\n",(0,i.jsxs)(n.p,{children:["This spec does ",(0,i.jsx)(n.em,{children:"not"})," support selecting schema members with a path from a root\ntype (e.g. ",(0,i.jsx)(n.code,{children:"Query"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"For example, given this schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type User {\n  name: String\n  bestFriend: User\n}\n\ntype Query {\n  userById(id: String): User\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following are invalid schema coordinates:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Query.userById.name"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"User.bestFriend.bestFriend.bestFriend.name"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['This violates a non-goal that there be one, unambiguous way to write a\nschema coordinate to refer to a schema member. Both examples can be\n"simplified" to ',(0,i.jsx)(n.code,{children:"User.name"}),", which ",(0,i.jsx)(n.em,{children:"is"})," a valid schema coordinate."]}),"\n",(0,i.jsxs)(n.p,{children:['Should a use case for this arise in the future, a follow up RFC may investigate\nhow schema coordinates could work with "field paths" (e.g. ',(0,i.jsx)(n.code,{children:'["query", "searchBusinesses", 1, "owner", "name"]'}),") to cover this."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Directive applications"})}),"\n",(0,i.jsxs)(n.p,{children:["This spec does ",(0,i.jsx)(n.em,{children:"not"})," support selecting applications of directive."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'directive @private(scope: String!) on FIELD\n\ntype User {\n  name: String\n  reviewCount: Int\n  friends: [User]\n  email: String @private(scope: "loggedIn")\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You ",(0,i.jsx)(n.em,{children:"can"})," select the definition of the ",(0,i.jsx)(n.code,{children:"private"})," directive and its arguments\n(with ",(0,i.jsx)(n.code,{children:"@private"})," and ",(0,i.jsx)(n.code,{children:"@private(scope:)"})," respectively), but you cannot select the\napplication of the ",(0,i.jsx)(n.code,{children:"@private"})," on ",(0,i.jsx)(n.code,{children:"User.email"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For the stated use cases of this RFC, it is more likely that consumers want to\nselect and track usage and changes to the definition of the custom directive\ninstead."}),"\n",(0,i.jsxs)(n.p,{children:["If we ",(0,i.jsx)(n.em,{children:"did"})," want to support this, a syntax such as ",(0,i.jsx)(n.code,{children:"User.email@private[0]"}),"\ncould work. (The indexing is necessary since ",(0,i.jsx)(n.a,{href:"http://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location",children:"multiple applications of the same\ndirective is allowed"}),", and each is considered unique.)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Union members"})}),"\n",(0,i.jsx)(n.p,{children:"This spec does not support selecting members inside a union definition."}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Breakfast {\n  eggCount: Int\n}\n\ntype Lunch {\n  sandwichFilling: String\n}\n\nunion Meal = Breakfast | Lunch\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You may select the ",(0,i.jsx)(n.code,{children:"Meal"}),' definition (as "',(0,i.jsx)(n.code,{children:"Meal"}),'"), but you may ',(0,i.jsx)(n.strong,{children:"not"})," select\nmembers on ",(0,i.jsx)(n.code,{children:"Meal"})," (e.g. ",(0,i.jsx)(n.code,{children:"Meal.Breakfast"})," or ",(0,i.jsx)(n.code,{children:"Meal.Lunch"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["It is unclear what the use case for this would be, so we won't (yet?) support\nthis. In such cases, consumers may select type members directly (e.g. ",(0,i.jsx)(n.code,{children:"Lunch"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"answered-questions",children:"Answered questions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Would we want to add a method to graphql-js?"})," A ",(0,i.jsx)(n.code,{children:"fieldCoordinateToFieldNode"}),"\nmethod (for example) may take in a field coordinate string and return a field\nAST node to serve as a helper / reference implementation of the algorithm to\nlook up the field node."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Update:"})," ",(0,i.jsx)(n.a,{href:"https://youtu.be/FYF15RA9H3k?t=2865",children:"This was discussed in the August Working Group Meeting"})," -\nit was suggested to keep any utilities as third party libraries to avoid edge\nambiguity problems, and to be able to iterate faster."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var i=s(7294);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);