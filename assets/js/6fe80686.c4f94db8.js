"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[4690],{974:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=r(5893),n=r(1151);const l={identifier:"601",title:"Number value literal lookahead restrictions",stage:"3",champion:"leebyron",prUrl:"https://github.com/graphql/graphql-spec/pull/601",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-10-10.md",date:new Date("2019-10-10T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-10-10.md",date:new Date("2019-10-10T00:00:00.000Z"),actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-09-12.md",date:new Date("2019-09-12T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-09-12.md",date:new Date("2019-09-12T00:00:00.000Z"),actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-08-01.md",date:new Date("2019-08-01T00:00:00.000Z"),actor:null},{type:"prCreated",date:new Date("2019-07-30T08:16:01.000Z"),href:"https://github.com/graphql/graphql-spec/pull/601",actor:"leebyron"},{type:"commitsPushed",date:new Date("2019-07-30T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/4e3c343660978091628aee5cc1f687200c2c1ba6",actor:"leebyron",commits:[{href:"https://github.com/graphql/graphql-spec/commit/4e3c343660978091628aee5cc1f687200c2c1ba6",headline:"RFC: Number value literal lookahead restrictions",ghUser:"leebyron",authorName:"Lee Byron"}]}],shortname:"Number value literal lookahead restrictions",image:"/img/rfc_tracker.png",closedAt:new Date("2020-01-10T21:24:35.000Z"),mergedAt:new Date("2020-01-10T21:24:35.000Z"),mergedBy:"leebyron"},i=void 0,s={id:"601",title:"Number value literal lookahead restrictions",description:"At a glance",source:"@site/rfcs/601.md",sourceDirName:".",slug:"/601",permalink:"/rfcs/601",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"601",title:"Number value literal lookahead restrictions",stage:"3",champion:"leebyron",prUrl:"https://github.com/graphql/graphql-spec/pull/601",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-10-10.md",date:"2019-10-10T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-10-10.md",date:"2019-10-10T00:00:00.000Z",actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-09-12.md",date:"2019-09-12T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-09-12.md",date:"2019-09-12T00:00:00.000Z",actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-08-01.md",date:"2019-08-01T00:00:00.000Z",actor:null},{type:"prCreated",date:"2019-07-30T08:16:01.000Z",href:"https://github.com/graphql/graphql-spec/pull/601",actor:"leebyron"},{type:"commitsPushed",date:"2019-07-30T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/4e3c343660978091628aee5cc1f687200c2c1ba6",actor:"leebyron",commits:[{href:"https://github.com/graphql/graphql-spec/commit/4e3c343660978091628aee5cc1f687200c2c1ba6",headline:"RFC: Number value literal lookahead restrictions",ghUser:"leebyron",authorName:"Lee Byron"}]}],shortname:"Number value literal lookahead restrictions",image:"/img/rfc_tracker.png",closedAt:"2020-01-10T21:24:35.000Z",mergedAt:"2020-01-10T21:24:35.000Z",mergedBy:"leebyron"},sidebar:"rfcsSidebar",previous:{title:"Clarify that lexing is greedy",permalink:"/rfcs/599"},next:{title:"Avoid parse ambiguity on types & extensions",permalink:"/rfcs/598"}},o={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Identifier"}),": #601"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Stage"}),": ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-3-accepted",children:"RFC3: Accepted"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Champion"}),": ",(0,a.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"PR"}),": ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/601",children:"Number value literal lookahead restrictions"})]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsxs)(t.strong,{children:["Added to ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-10-10.md",children:"2019-10-10 WG agenda"})]})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsxs)(t.strong,{children:["Mentioned in ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-10-10.md",children:"2019-10-10 WG notes"})]})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsxs)(t.strong,{children:["Added to ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-09-12.md",children:"2019-09-12 WG agenda"})]})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsxs)(t.strong,{children:["Mentioned in ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2019/2019-09-12.md",children:"2019-09-12 WG notes"})]})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsxs)(t.strong,{children:["Added to ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2019/2019-08-01.md",children:"2019-08-01 WG agenda"})]})}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsxs)(t.strong,{children:[(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/601",children:"Spec PR"})," created"]})," on 2019-07-30 by leebyron"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Commit pushed"}),": ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/4e3c343660978091628aee5cc1f687200c2c1ba6",children:"RFC: Number value literal lookahead restrictions"})," on 2019-07-30 by ",(0,a.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n"]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"This RFC proposes adding a lookahead restriction to the IntValue and FloatValue lexical grammars to not allow following a number with a letter."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Problem:"})}),"\n",(0,a.jsx)(t.p,{children:"Currently there are some language ambiguities and underspecification for lexing numbers which each implementation has handled slightly differently."}),"\n",(0,a.jsxs)(t.p,{children:["Because commas are optional and white space isn't required between tokens, these two snippets are equivalent: ",(0,a.jsx)(t.code,{children:"[123, abc]"}),", ",(0,a.jsx)(t.code,{children:"[123abc]"}),". This may be confusing to read, but it should parse correctly. However the opposite is not true, since digits may belong in a Name, the following two are ",(0,a.jsx)(t.em,{children:"not"})," equivalent: ",(0,a.jsx)(t.code,{children:"[abc, 123]"}),", ",(0,a.jsx)(t.code,{children:"[abc123]"}),". This could lead to mistakes."]}),"\n",(0,a.jsxs)(t.p,{children:['Ambiguity and underspecification enter when the Name starts with "e", since "e" indicats the beginning of an exponent in a FloatValue. ',(0,a.jsx)(t.code,{children:"123efg"}),' is a lexical error in GraphQL.js which greedily starts to lex a FloatValue when it encounters the "e", however you might also expect it to validly lex (',(0,a.jsx)(t.code,{children:"123"}),", ",(0,a.jsx)(t.code,{children:"efg"}),") and some implementations might do this."]}),"\n",(0,a.jsxs)(t.p,{children:["Further, other languages offer variations of numeric literals which GraphQL does not support, such as hexidecimal literals. The input ",(0,a.jsx)(t.code,{children:"0x1F"})," properly lexes as (",(0,a.jsx)(t.code,{children:"0"}),", ",(0,a.jsx)(t.code,{children:"x"}),", ",(0,a.jsx)(t.code,{children:"1"}),", ",(0,a.jsx)(t.code,{children:"F"}),") however this is very likely a confusing syntax error. A similar issue exists for some languages which allow underscores in numbers for readability, ",(0,a.jsx)(t.code,{children:"1_000"})," lexes a ",(0,a.jsx)(t.code,{children:"1"})," and ",(0,a.jsx)(t.code,{children:"_"})," but fails when ",(0,a.jsx)(t.code,{children:"000"})," is not a valid number."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Proposed Solution:"})}),"\n",(0,a.jsxs)(t.p,{children:["Add a lookahead restriction to IntValue and FloatValue to disallow any NameStart character (including letters and ",(0,a.jsx)(t.code,{children:"_"}),") to follow."]}),"\n",(0,a.jsxs)(t.p,{children:["This makes it clear that ",(0,a.jsx)(t.code,{children:"1e5"})," can only possibly be one FloatValue and not three tokens, makes lexer errors specified clearly to remove ambiguity, and provides clear errors for mistaken input."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Precedent"})}),"\n",(0,a.jsx)(t.p,{children:"Javascript applies this same restriction for similar reasons, I believe originally to produce an early error if C-style typed literals were used in a Javascript program."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-literals-numeric-literals",children:"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-literals-numeric-literals"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Cost of change"})}),"\n",(0,a.jsxs)(t.p,{children:["While this is ",(0,a.jsx)(t.em,{children:"technically"})," a breaking change to the language grammar, it seeks to restrict cases that are almost certainly already producing either syntax or validation errors."]}),"\n",(0,a.jsx)(t.p,{children:"This is different from the current implementation of GraphQL.js and I believe other parsers, and will require\u200b minor implementation updates."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>s,a:()=>i});var a=r(7294);const n={},l=a.createContext(n);function i(e){const t=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(l.Provider,{value:t},e.children)}}}]);