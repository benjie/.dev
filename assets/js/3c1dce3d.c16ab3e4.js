"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[9800],{1696:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var n=l(5893),r=l(1151);const i={identifier:"1048",title:"Null-Only-On-Error / Semantically-Non-Null type (asterisk)",stage:"S",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1048",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/10-Oct/05-wg-primary.md",date:new Date("2023-10-05T00:00:00.000Z"),actor:null},{type:"prCreated",date:new Date("2023-10-04T10:55:29.000Z"),href:"https://github.com/graphql/graphql-spec/pull/1048",actor:"benjie"},{type:"commitsPushed",date:new Date("2023-10-04T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",headline:"Add specification changes for Null-Only-On-Error type",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/8241d78b68154ce0322fd20dc1fae0ccab9792b6",headline:"Add examples combining null-only-on-error with list and non-null",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/23fa23b7c06d0cf36b3ce53e377e0789d40c56ff",headline:"Remove duplicate coercion for brevity",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-10.md",date:"2023-10",actor:null}],related:"1046, 1050, 1065, wg1394, wg1410",shortname:"Null-Only-On-Error / Semantically-Non-Null type (asterisk)",image:"/img/rfc_tracker.png",closedAt:new Date("2023-11-24T11:32:44.000Z"),nextStage:!1},a=void 0,c={id:"1048",title:"Null-Only-On-Error / Semantically-Non-Null type (asterisk)",description:"At a glance",source:"@site/rfcs/1048.md",sourceDirName:".",slug:"/1048",permalink:"/rfcs/1048",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"1048",title:"Null-Only-On-Error / Semantically-Non-Null type (asterisk)",stage:"S",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1048",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/10-Oct/05-wg-primary.md",date:"2023-10-05T00:00:00.000Z",actor:null},{type:"prCreated",date:"2023-10-04T10:55:29.000Z",href:"https://github.com/graphql/graphql-spec/pull/1048",actor:"benjie"},{type:"commitsPushed",date:"2023-10-04T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",headline:"Add specification changes for Null-Only-On-Error type",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/8241d78b68154ce0322fd20dc1fae0ccab9792b6",headline:"Add examples combining null-only-on-error with list and non-null",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/23fa23b7c06d0cf36b3ce53e377e0789d40c56ff",headline:"Remove duplicate coercion for brevity",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-10.md",date:"2023-10",actor:null}],related:"1046, 1050, 1065, wg1394, wg1410",shortname:"Null-Only-On-Error / Semantically-Non-Null type (asterisk)",image:"/img/rfc_tracker.png",closedAt:"2023-11-24T11:32:44.000Z",nextStage:!1},sidebar:"rfcsSidebar",previous:{title:"deduplicated incremental delivery",permalink:"/rfcs/1052"},next:{title:"incremental delivery with deduplication + concurrent execution",permalink:"/rfcs/1034"}},s={},h=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function o(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Identifier"}),": #1048"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Stage"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-x-rejected",children:"RFCX: Closed"})," 2023-11-24T11:32:44Z"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Champion"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"PR"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/1048",children:"Null-Only-On-Error / Semantically-Non-Null type (asterisk)"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Related"}),":","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/rfcs/1050",title:"Directive proposal for opting out of null bubbling / RFC0",children:"#1050"})," (Directive proposal for opting out of null bubbling)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/rfcs/1065",title:"SemanticNonNull type (null only on error) / RFC0",children:"#1065"})," (SemanticNonNull type (null only on error))"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/rfcs/wg1394",title:"True Nullability Schema / RFC0",children:"wg#1394"})," (True Nullability Schema)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/rfcs/wg1410",title:"Strict Semantic Nullability / RFC0",children:"wg#1410"})," (Strict Semantic Nullability)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsxs)(t.strong,{children:["Added to ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/10-Oct/05-wg-primary.md",children:"2023-10-05 WG agenda"})]})}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/1048",children:"Spec PR"})," created"]})," on 2023-10-04 by benjie"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"3 commits pushed"})," on 2023-10-04:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",children:"Add specification changes for Null-Only-On-Error type"})," by ",(0,n.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/8241d78b68154ce0322fd20dc1fae0ccab9792b6",children:"Add examples combining null-only-on-error with list and non-null"})," by ",(0,n.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/23fa23b7c06d0cf36b3ce53e377e0789d40c56ff",children:"Remove duplicate coercion for brevity"})," by ",(0,n.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsxs)(t.strong,{children:["Mentioned in ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-10.md",children:"2023-10 WG notes"})]})}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"This PR replaces #1046. Here's an updated description:"}),"\n",(0,n.jsxs)(t.p,{children:["Inspired by @captbaritone's True Nullability Schema discussion (",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/discussions/1394",children:"https://github.com/graphql/graphql-wg/discussions/1394"}),') and following @fotoetienne\'s excellent talk at GraphQLConf and feedback on my resulting PR #1046, I am proposing that we introduce a new wrapper type, the "Null-Only-On-Error" type, represented via asterisk ',(0,n.jsx)(t.code,{children:"*"}),'. This new type walks the line between the default nullable types and the existing Non-Null type wrapper - it states that the value may only be {null} if a field error has been raised - i.e. it represents the "true nullability" of the field, whilst still acting as an error boundary to avoid null propagation.']}),"\n",(0,n.jsxs)(t.p,{children:['Critically, this type would "evaporate" for legacy clients, appearing the same as a nullable field. (This is enabled via the ',(0,n.jsx)(t.code,{children:"includeNullOnlyOnError"})," argument to the ",(0,n.jsx)(t.code,{children:"__Field.type"})," field, which defaults to ",(0,n.jsx)(t.code,{children:"false"}),".)"]}),"\n",(0,n.jsx)(t.p,{children:"This is a much more complete RFC that #1046 was, and happily leverages a lot of the existing behavior of the spec."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},1151:(e,t,l)=>{l.d(t,{Z:()=>c,a:()=>a});var n=l(7294);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);