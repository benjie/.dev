"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[6352],{1481:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var i=s(5893),l=s(1151);const t={type:"page",title:"WG Status",description:"A rough summary of the status of the nullability WG",tag:"graphql",author:"Benjie",breadcrumb:!1},r=void 0,o={id:"graphql/nullability/status",title:"WG Status",description:"A rough summary of the status of the nullability WG",source:"@site/pages/graphql/nullability/status.mdx",sourceDirName:"graphql/nullability",slug:"/graphql/nullability/status",permalink:"/graphql/nullability/status",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{type:"page",title:"WG Status",description:"A rough summary of the status of the nullability WG",tag:"graphql",author:"Benjie",breadcrumb:!1},sidebar:"defaultSidebar",previous:{title:"Nullability",permalink:"/graphql/nullability/"},next:{title:"Nested Mutations",permalink:"/graphql/nested-mutations"}},a={},h=[{value:"Disabling error propagation",id:"disabling-error-propagation",level:2},{value:"Semantic nullability",id:"semantic-nullability",level:2},{value:"Specification",id:"specification",level:3},{value:"Server support",id:"server-support",level:3},{value:"Client support",id:"client-support",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A rough overview of the current state of the nullability proposals from the\nnullability working group."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Disclaimer"}),": this is based on Benjie's opinions"]}),"\n",(0,i.jsx)(n.h2,{id:"disabling-error-propagation",children:"Disabling error propagation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last updated: 2025-03-28"})}),"\n",(0,i.jsx)(n.p,{children:"Generally agreed that the future of GraphQL in one in which error propagation is\ndisabled. Current thought is it should be a request option."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Originally proposed as a directive\n(",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1050",children:"spec edits"}),") - currently\n",(0,i.jsx)(n.code,{children:"@disableErrorPropagation"})]}),"\n",(0,i.jsxs)(n.li,{children:["Currently, Benjie proposes this should be a request (in the GraphQL sense, not\nnecessarily the HTTP sense) parameter:\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1153",children:"https://github.com/graphql/graphql-spec/pull/1153"})]}),"\n",(0,i.jsxs)(n.li,{children:['There\'s discussion around whether clients that reject the entire response on\nany error should get their own "behavior", e.g. ',(0,i.jsx)(n.code,{children:'onError: "ABORT"'})," - this\nwould increase server efficiency, and prevent sending unnecessary data over\nthe wire that the client would ignore anyway."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@experimental_disableErrorPropagation"})," directive can be used to experiment\nwith disabling error propagation without any further impact, and will be\navailable in the next releases of:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-js/pull/4348",children:"graphql-js"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql-java/graphql-java/pull/3772",children:"graphql-java"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Similarly the ",(0,i.jsx)(n.code,{children:"onError"})," request property can be adopted without impact, and is\navailable via:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-js/pull/4364",children:"graphql-js"}),"\n",(0,i.jsx)(n.code,{children:"graphql@canary-pr-4364"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"semantic-nullability",children:"Semantic nullability"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["THIS IS BENJIE'S OPINION, FOR TRUE STATUS SEE\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/SemanticNullability.md",children:"THE RFC DOCUMENT"}),"!"]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last updated: 2025-03-28"})}),"\n",(0,i.jsx)(n.h3,{id:"specification",children:"Specification"}),"\n",(0,i.jsxs)(n.p,{children:['To deal with the legacy clients problem, the working group has generally\nsolidified around the concept of a "semantic non-nullable" type that can be\nthought of as "null only on error" - i.e. it will never be ',(0,i.jsx)(n.code,{children:"null"})," unless an\nerror has occurred (and been noted in the ",(0,i.jsx)(n.code,{children:'"errors"'})," list)."]}),"\n",(0,i.jsxs)(n.p,{children:["However, how this is presented via the SDL is under heavy discussion. There were\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/SemanticNullability.md#-possible-solutions",children:"7 solutions"}),"\ndiscussed, but currently solutions 1, 6 and 7 are under discussion"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Semantic non-null, represented by ",(0,i.jsx)(n.code,{children:"*"})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": Benjie"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": Preferred by Benjie, outdated."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spec edits"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1065",children:"https://github.com/graphql/graphql-spec/pull/1065"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),":\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-js/pull/4192",children:"https://github.com/graphql/graphql-js/pull/4192"})," - available via\n",(0,i.jsx)(n.code,{children:"graphql@canary-pr-4192"})]}),"\n",(0,i.jsx)(n.li,{children:"An outdated version of what is proposed above."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TODO"}),": update this!"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Rejected solutions"}),(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Strict Semantic Nullability"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": Lee Byron"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": Rejected by Lee"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spec edits"}),": none"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),": none"]}),"\n",(0,i.jsxs)(n.li,{children:['This proposal choose to break the "nullable by default" tradition in\nfavour of representing nullable with a ',(0,i.jsx)(n.code,{children:"?"}),": nullable (",(0,i.jsx)(n.code,{children:"T?"}),"), semantically\nnon-nullable (",(0,i.jsx)(n.code,{children:"T"}),") and strictly non-nullable (",(0,i.jsx)(n.code,{children:"T!"}),")strictly non-nullable\n(",(0,i.jsx)(n.code,{children:"T!"}),"), and does so by introducing a directive on the schema to indicate\nthis."]}),"\n",(0,i.jsx)(n.li,{children:"Benjie believes it's non-viable for a number of reasons, chiefly that it\ndoesn't consider what it means for executable documents (how do clients\ndefine variables?), and none of the three solutions to executable\ndocuments seem desirable."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Semantic non-null usurps ",(0,i.jsx)(n.code,{children:"!"})," syntax, strict non-null uses ",(0,i.jsx)(n.code,{children:"!!"})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": Benjie"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": On hold, since solution 1 is currently preferred by Benjie."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spec edits"}),": none"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),": none"]}),"\n",(0,i.jsxs)(n.li,{children:["This was a derivative of solution 1 to attempt to address concerns that\nthe ",(0,i.jsx)(n.code,{children:"*"})," syntax was non-obvious."]}),"\n",(0,i.jsxs)(n.li,{children:["It requires a document directive to opt in to the new syntax (otherwise\n",(0,i.jsx)(n.code,{children:"!"})," will continue to mean strict non-null)."]}),"\n",(0,i.jsx)(n.li,{children:"Client documents need not change."}),"\n",(0,i.jsx)(n.li,{children:"It recognises the two modes laid out in this article, but tries to move\ntowards a future where every schema only uses semantically non-null types,\nand the legacy strict non-null is phased out."}),"\n",(0,i.jsxs)(n.li,{children:["Benjie doesn't currently prefer this because he agrees with solution 5 -\nthe future of GraphQL uses its current syntax, and doesn't need a\n",(0,i.jsx)(n.code,{children:'"use strict"'}),"-style pragma at the top of every document."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Unadorned becomes semantic non-null, nullable represented by ",(0,i.jsx)(n.code,{children:"?"})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": None (currently Alex Reilly is representing)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": Unknown"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spec edits"}),": none"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),":\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-js/pull/4337",children:"https://github.com/graphql/graphql-js/pull/4337"})]}),"\n",(0,i.jsx)(n.li,{children:"This is an expansion of solution 2 that moves the directive from the\nschema to the document."}),"\n",(0,i.jsxs)(n.li,{children:["Benjie dislikes it because:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data is nullable by default, but this makes data semantically\nnon-nullable by default."}),"\n",(0,i.jsxs)(n.li,{children:["The unadorned type cannot be migrated to other types (specifically the\n",(0,i.jsx)(n.code,{children:"T?"})," nullable type) in a non-breaking way, so schema authors will have\nto be extra careful that they have remembered to mark up every type\ncorrectly - they can't fix it later by adding a symbol."]}),"\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"?"})," means nullable in the SDL and unadorned means non-nullable, what\ndoes this mean for existing executable documents where unadorned means\nnullable?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Should executable documents use ",(0,i.jsx)(n.code,{children:"@semanticNullability"})," and use\n",(0,i.jsx)(n.code,{children:"?"}),"/unadorned, or should they continue to use unadorned/",(0,i.jsx)(n.code,{children:"!"}),"?"]}),"\n",(0,i.jsx)(n.li,{children:"Will this cause a split in the GraphQL ecosystem over best practices\naround this?"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Having the meaning of unadorned suddenly mean the opposite of what it\ndid before (nullable \u21d2 non-nullable) based on the presence of a\ndirective at the top of the document is super confusing."}),"\n",(0,i.jsx)(n.li,{children:"Spec implementation is complex."}),"\n",(0,i.jsx)(n.li,{children:"Reference implementation is complex."}),"\n",(0,i.jsx)(n.li,{children:'Updating all the "nullable by default" documentation across the last\ndecade for GraphQL is not desirable.'}),"\n",(0,i.jsx)(n.li,{children:"Newbies to GraphQL will be super confused."}),"\n",(0,i.jsx)(n.li,{children:"I think this would be one of the worst possible moves that GraphQL could\nmake."}),"\n",(0,i.jsxs)(n.li,{children:['I would much rather see a "GraphQL 2.0" that disables null bubbling\n(and, if you like, gets rid of the ',(0,i.jsx)(n.code,{children:"!"})," syntax in favour of ",(0,i.jsx)(n.code,{children:"?"}),") than see\nGraphQL enter this state."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:'Increasingly incoherent "old man yells at cloud" noises.'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Just use ",(0,i.jsx)(n.code,{children:"!"})," for semantically non-nullable"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": Martin Bonnin"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": Actively proposed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spec edits"}),": no action needed!"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),": no action needed!"]}),"\n",(0,i.jsx)(n.li,{children:"Martin thinks we should just use the existing non-null in semantically\nnon-nullable places, relying on the ability to disable error propagation\nfor all future clients."}),"\n",(0,i.jsx)(n.li,{children:"This proposal is extremely compelling, it feels like it should be the\nfuture of GraphQL, and it recognises that error propagation was probably a\nmistake and just turning that off should be enough to fix our woes."}),"\n",(0,i.jsxs)(n.li,{children:["Unfortunately, as laid out ",(0,i.jsx)(n.a,{href:"#supporting-legacy-clients",children:"above"}),", this would\nbe a major shift in behavior for existing deployed clients resulting in\nerror boundaries moving towards the root of the operation, causing legacy\nclients that cannot be updated to be less resilient to errors."]}),"\n",(0,i.jsx)(n.li,{children:"This sparked Benjie's reframing of solution 1 as presented in this\narticle."}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"@semanticNonNull"})," directive"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": Benjie (the nullability WG designed this together as an\ninterrim solution, Benjie is treating it as a syntax variant of solution 1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": Interrim solution, implemented in a number of runtimes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spec edits"}),": None (though solution 1 could be changed to doing this\nwith very few edits)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),": None (though solution 1 could be changed to\ndoing this with very few edits)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Community spec"}),":\n",(0,i.jsx)(n.a,{href:"https://specs.apollo.dev/nullability/v0.4/#@semanticNonNull",children:"https://specs.apollo.dev/nullability/v0.4/#@semanticNonNull"})]}),"\n",(0,i.jsxs)(n.li,{children:["Essentially this is solution 1, but instead of introducing a ",(0,i.jsx)(n.code,{children:"*"})," character\n(e.g. ",(0,i.jsx)(n.code,{children:"[T*]*"}),") we use a directive to indicate semantic nullability\n(",(0,i.jsx)(n.code,{children:"[T] @semanticNonNull(levels: [0, 1])"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Does everything that solution 1 does, except for the convenient syntax."}),"\n",(0,i.jsx)(n.li,{children:"Directives already exist, so we don't need to debate syntax!"}),"\n",(0,i.jsxs)(n.li,{children:["Benjie's opinion:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Given this is essentially solution 1 but without the syntax changes, I\nsupport it..."}),"\n",(0,i.jsxs)(n.li,{children:["Do we really hate ",(0,i.jsx)(n.code,{children:"*"})," syntax so much that we'd rather type\n",(0,i.jsx)(n.code,{children:"@semanticNonNull(levels: [0, 1])"})," than adding two ",(0,i.jsx)(n.code,{children:"*"})," characters?"]}),"\n",(0,i.jsxs)(n.li,{children:["I currently see this as being implemented in the same way as solution 1;\n",(0,i.jsx)(n.strong,{children:"however"}),", it could be implemented as schema metadata and thus never\nactually enter the specification.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It needs support in both server and client, so it feels like it should\nbe part of the spec."}),"\n",(0,i.jsxs)(n.li,{children:["Keeping it as schema metadata would require a solution to the infamous\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/issues/300",children:"#300"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Lee's new nullability & error propagation proposal"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": Lee"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": Being discussed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spec edits"}),": None"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),": None"]}),"\n",(0,i.jsxs)(n.li,{children:["See: ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/discussions/1700",children:"https://github.com/graphql/graphql-wg/discussions/1700"})]}),"\n",(0,i.jsx)(n.li,{children:"Seems to be a variant of solution 6 that flips to marking up the\ntraditional type rather than the new type, focusses on errors rather than\ndata, and breaks introspection for existing clients"}),"\n",(0,i.jsxs)(n.li,{children:["Benjie's critique here: ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/discussions/1700#discussioncomment-12634500",children:"https://github.com/graphql/graphql-wg/discussions/1700#discussioncomment-12634500"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Breaks introspection for existing clients"}),"\n",(0,i.jsx)(n.li,{children:"Requires a major release of libraries"}),"\n",(0,i.jsx)(n.li,{children:"Has a complex migration path"}),"\n",(0,i.jsx)(n.li,{children:"Requires a major release to public APIs"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"server-support",children:"Server support"}),"\n",(0,i.jsxs)(n.p,{children:["Users can manually mark up schemas with ",(0,i.jsx)(n.code,{children:"@semanticNonNull"})," for use by\n",(0,i.jsx)(n.code,{children:"graphql-sock"}),", ",(0,i.jsx)(n.code,{children:"graphql-code-generator"})," and other tools."]}),"\n",(0,i.jsx)(n.p,{children:"Native support for semantic nullability is available in the following GraphQL\nimplementations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"graphql@canary-pr-4192"})," has support for the ",(0,i.jsx)(n.code,{children:"*"})," syntax for semantic\nnullability"]}),"\n",(0,i.jsxs)(n.li,{children:["Grats has support for ",(0,i.jsx)(n.code,{children:"@semanticNonNull"})," in\n",(0,i.jsx)(n.a,{href:"https://grats.capt.dev/docs/guides/strict-semantic-nullability/",children:"v0.0.32"})]}),"\n",(0,i.jsxs)(n.li,{children:["Hot Chocolate has support for ",(0,i.jsx)(n.code,{children:"@semanticNonNull"})," as of\n",(0,i.jsx)(n.a,{href:"https://github.com/ChilliCream/graphql-platform/releases/tag/14.2.0",children:"v14.2.0"})]}),"\n",(0,i.jsxs)(n.li,{children:["Caliban supports ",(0,i.jsx)(n.code,{children:"@semanticNonNull"}),":\n",(0,i.jsx)(n.a,{href:"https://ghostdogpr.github.io/caliban/docs/schema.html#semanticnonnull-support",children:"https://ghostdogpr.github.io/caliban/docs/schema.html#semanticnonnull-support"})]}),"\n",(0,i.jsxs)(n.li,{children:["Strawberry is\n",(0,i.jsx)(n.a,{href:"https://github.com/strawberry-graphql/strawberry/pull/3722",children:"working on support for semantic nullability"})]}),"\n",(0,i.jsxs)(n.li,{children:["async-graphql is\n",(0,i.jsx)(n.a,{href:"https://github.com/async-graphql/async-graphql/issues/1605",children:"working on support for @semanticNonNull"})]}),"\n",(0,i.jsxs)(n.li,{children:["gqlgen is has\n",(0,i.jsx)(n.a,{href:"https://github.com/99designs/gqlgen/issues/3396",children:"an issue tracking this desire"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"client-support",children:"Client support"}),"\n",(0,i.jsxs)(n.p,{children:["Most clients can become error-handling clients by integrating\n",(0,i.jsx)(n.a,{href:"https://github.com/graphile/graphql-toe",children:(0,i.jsx)(n.code,{children:"graphql-toe"})}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Graffle, fetch, and other simple clients have examples in the graphql-toe\n",(0,i.jsx)(n.code,{children:"README"})]}),"\n",(0,i.jsxs)(n.li,{children:["Apollo Client has an example of ",(0,i.jsx)(n.code,{children:"useTOEQuery()"})," (to replace ",(0,i.jsx)(n.code,{children:"useQuery()"}),") in\nthe graphql-toe ",(0,i.jsx)(n.code,{children:"README"})]}),"\n",(0,i.jsxs)(n.li,{children:["URQL has ",(0,i.jsx)(n.code,{children:"@urql/exchange-throw-on-error"})," that integrates ",(0,i.jsx)(n.code,{children:"graphql-toe"})]}),"\n",(0,i.jsxs)(n.li,{children:["Relay users should use ",(0,i.jsx)(n.code,{children:"@throwOnFieldError"})," instead"]}),"\n",(0,i.jsxs)(n.li,{children:["Apollo Kotlin has native support for ",(0,i.jsx)(n.code,{children:"@catch"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Most clients can use ",(0,i.jsx)(n.a,{href:"https://github.com/graphile/graphql-sock",children:(0,i.jsx)(n.code,{children:"graphql-sock"})}),"\nto convert a semantic nullability schema into a nullable\n(",(0,i.jsx)(n.code,{children:"semantic-to-nullable"}),") schema for legacy clients, or a strict\n(",(0,i.jsx)(n.code,{children:"semantic-to-strict"}),") schema for error handling clients, for the purposes of\ncode generation, linting, and other needs."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["GraphQL code generator has support for ",(0,i.jsx)(n.code,{children:"@semanticNonNull"})," (any version) and\nthe ",(0,i.jsx)(n.code,{children:"*"})," syntax (if you're using ",(0,i.jsx)(n.code,{children:"graphql@canary-pr-4192"}),") in the\n",(0,i.jsx)(n.a,{href:"https://github.com/dotansimha/graphql-code-generator/pull/10323",children:"latest alpha"}),"\nvia ",(0,i.jsx)(n.code,{children:"graphql-sock"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Relay has built in support for code generation respecting semantic nullability\non a per-fragment and per-field basis as of Relay v18 via the ",(0,i.jsx)(n.code,{children:"@catch"})," and\n",(0,i.jsx)(n.code,{children:"@throwOnFieldError"})," directives."]}),"\n",(0,i.jsxs)(n.li,{children:["Apollo Kotlin's code generator has native support for ",(0,i.jsx)(n.code,{children:"@semanticNonNull"})," and\n",(0,i.jsx)(n.code,{children:"@catch"})]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>r});var i=s(7294);const l={},t=i.createContext(l);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);