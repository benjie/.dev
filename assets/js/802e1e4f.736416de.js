"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[5858],{7731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var a=t(5893),r=t(1151);const s={identifier:"SchemaFragments",stage:"0",title:"Schema Fragments",events:[{type:"docCreated",date:new Date("2021-09-02T21:33:40.000Z"),href:"https://github.com/graphql/graphql-wg/blob/47d7a8004b1469a9d0480446c820dc9ad01e78b9/rfcs/SchemaFragments.md",actor:"Daniel Starns"}],shortname:"Schema Fragments",image:"/img/rfc_tracker.png"},i=void 0,c={id:"SchemaFragments",title:"Schema Fragments",description:"At a glance",source:"@site/rfcs/SchemaFragments.md",sourceDirName:".",slug:"/SchemaFragments",permalink:"/rfcs/SchemaFragments",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"SchemaFragments",stage:"0",title:"Schema Fragments",events:[{type:"docCreated",date:"2021-09-02T21:33:40.000Z",href:"https://github.com/graphql/graphql-wg/blob/47d7a8004b1469a9d0480446c820dc9ad01e78b9/rfcs/SchemaFragments.md",actor:"Daniel Starns"}],shortname:"Schema Fragments",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Operation Expressions",permalink:"/rfcs/OperationExpressions"},next:{title:"__fulfilled meta field",permalink:"/rfcs/879"}},d={},l=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Implementation",id:"implementation",level:2}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Identifier"}),": SchemaFragments"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Stage"}),": ",(0,a.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Champion"}),": -"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"PR"}),": -"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/47d7a8004b1469a9d0480446c820dc9ad01e78b9/rfcs/SchemaFragments.md",children:"RFC document created"})})," on 2021-09-02 by Daniel Starns"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.h1,{id:"rfc-schema-fragments",children:"RFC: Schema Fragments"}),"\n",(0,a.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,a.jsxs)(n.p,{children:["When writing large schemas, there is no way to reuse similar fields between ",(0,a.jsx)(n.code,{children:"ObjectTypeDefinition"}),"(s) and ",(0,a.jsx)(n.code,{children:"InputValueDefinition"}),"(s). One can use ",(0,a.jsx)(n.a,{href:"https://spec.graphql.org/June2018/#sec-Interfaces",children:"interfaces"})," to enforce that particular fields are implemented, though this doesn't really help, as a schema creator I still have to repeat X fields on X amount of types."]}),"\n",(0,a.jsxs)(n.p,{children:["Below I have ",(0,a.jsx)(n.code,{children:"Users"}),"(s) and ",(0,a.jsx)(n.code,{children:"Post"}),"(s) and where both types have the following properties; ",(0,a.jsx)(n.code,{children:"id"}),", ",(0,a.jsx)(n.code,{children:"createdAt"})," and ",(0,a.jsx)(n.code,{children:"updatedAt"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"type User {\n  id: ID # Repeated\n  createdAt: DateTime # Repeated\n  updatedAt: DateTime # Repeated\n  name: String\n}\n\ntype Post {\n  id: ID # Repeated\n  createdAt: DateTime # Repeated\n  updatedAt: DateTime # Repeated\n  content: String\n}\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Notice how the three properties are repeated."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["As mentioned, you can use interfaces here, so for example a ",(0,a.jsx)(n.code,{children:"BaseInterface"})," that contains the properties, and then this is implemented on each type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"interface BaseInterface {\n  id: ID # Repeated\n  createdAt: DateTime # Repeated\n  updatedAt: DateTime # Repeated\n}\n\ntype User implements BaseInterface {\n  id: ID # Repeated\n  createdAt: DateTime # Repeated\n  updatedAt: DateTime # Repeated\n  name: String\n}\n\ntype Post implements BaseInterface {\n  id: ID # Repeated\n  createdAt: DateTime # Repeated\n  updatedAt: DateTime # Repeated\n  content: String\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"However, this isn't helpful at scale because your still repeating each field."}),"\n",(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsxs)(n.p,{children:["Enable the usage of fragments on ",(0,a.jsx)(n.code,{children:"ObjectTypeDefinition"}),"(s) and ",(0,a.jsx)(n.code,{children:"InputValueDefinition"}),"(s) to reduce the repetition of common fields."]}),"\n",(0,a.jsxs)(n.p,{children:["Below I have ",(0,a.jsx)(n.code,{children:"Users"}),"(s) and ",(0,a.jsx)(n.code,{children:"Post"}),"(s) and where both types have the following properties; ",(0,a.jsx)(n.code,{children:"id"}),", ",(0,a.jsx)(n.code,{children:"createdAt"})," and ",(0,a.jsx)(n.code,{children:"updatedAt"}),". The listed properties are only defined once and I use the fragment spread syntax to apply them to each type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"fragment BaseInterface on ObjectTypeDefinition {\n  id: ID\n  createdAt: DateTime\n  updatedAt: DateTime\n}\n\ntype User {\n  ...BaseInterface\n  name: String\n}\n\ntype Post {\n  ...BaseInterface\n  content: String\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsx)(n.p,{children:"I assume that the GraphQL parser would need to be adapted to allow the usage of fragments on the fields, and then I see it being something that your tool should implement similar to how interfaces are enforced."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var a=t(7294);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);