"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[593],{1824:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>h,toc:()=>c});var n=t(5893),i=t(1151);const l={identifier:"1058",title:"List coercion algorithm",stage:"2",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1058",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/07-Jul/03-wg-primary.md",date:new Date("2025-07-03T00:00:00.000Z"),actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/06-Jun/26-wg-secondary-eu.md",date:new Date("2025-06-26T00:00:00.000Z"),actor:null},{type:"commitsPushed",date:new Date("2025-01-23T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/8eaa45ba7bff01359afc2e3b038a1842a0c110e7",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/8eaa45ba7bff01359afc2e3b038a1842a0c110e7",headline:"Reflect that variable values should already be coerced, and thus appl\u2026",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/a045f1493352f05570d39b8aa372ef0c5723961d",headline:"'Including null' (copied from section 6)",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/01-Jan/09-wg-primary.md",date:new Date("2025-01-09T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2025/2025-01.md",date:"2025-01",actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2024/12-Dec/05-wg-primary.md",date:new Date("2024-12-05T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2024/2024-12.md",date:"2024-12",actor:null},{type:"commitsPushed",date:new Date("2024-11-28T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/fba35d54523692c5b112c8fc3c773f50ef402b43",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/fba35d54523692c5b112c8fc3c773f50ef402b43",headline:"Fix bug in null handling",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/12-Dec/07-wg-primary.md",date:new Date("2023-12-07T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-12.md",date:"2023-12",actor:null},{type:"commitsPushed",date:new Date("2023-11-13T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/6aed5a9653a92ada8849fdf6e289623997977436",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/6aed5a9653a92ada8849fdf6e289623997977436",headline:"Add another example",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"prCreated",date:new Date("2023-11-09T17:40:17.000Z"),href:"https://github.com/graphql/graphql-spec/pull/1058",actor:"benjie"},{type:"commitsPushed",date:new Date("2023-11-09T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/b21bb996796b487d7f369f7e162a0d3096ffaae4",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/b21bb996796b487d7f369f7e162a0d3096ffaae4",headline:"Add note about nullable variables with default values",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/a91cdba0dfedd0c13655f03cc3ac3910da388686",headline:"Add variables to table",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/4ca2023992ed5bb2aef2c58d4f532859fb580acd",headline:"Algorithm for coercing list values",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/ec3d50a664f02a3218c81bb8c3202c91765fa952",headline:"Move note and clarify algorithm",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"1002",shortname:"List coercion algorithm",image:"/img/rfc_tracker.png",nextStage:!1},r=void 0,h={id:"1058",title:"List coercion algorithm",description:"At a glance",source:"@site/rfcs/1058.md",sourceDirName:".",slug:"/1058",permalink:"/rfcs/1058",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"1058",title:"List coercion algorithm",stage:"2",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1058",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/07-Jul/03-wg-primary.md",date:"2025-07-03T00:00:00.000Z",actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/06-Jun/26-wg-secondary-eu.md",date:"2025-06-26T00:00:00.000Z",actor:null},{type:"commitsPushed",date:"2025-01-23T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/8eaa45ba7bff01359afc2e3b038a1842a0c110e7",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/8eaa45ba7bff01359afc2e3b038a1842a0c110e7",headline:"Reflect that variable values should already be coerced, and thus appl\u2026",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/a045f1493352f05570d39b8aa372ef0c5723961d",headline:"'Including null' (copied from section 6)",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/01-Jan/09-wg-primary.md",date:"2025-01-09T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2025/2025-01.md",date:"2025-01",actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2024/12-Dec/05-wg-primary.md",date:"2024-12-05T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2024/2024-12.md",date:"2024-12",actor:null},{type:"commitsPushed",date:"2024-11-28T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/fba35d54523692c5b112c8fc3c773f50ef402b43",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/fba35d54523692c5b112c8fc3c773f50ef402b43",headline:"Fix bug in null handling",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/12-Dec/07-wg-primary.md",date:"2023-12-07T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-12.md",date:"2023-12",actor:null},{type:"commitsPushed",date:"2023-11-13T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/6aed5a9653a92ada8849fdf6e289623997977436",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/6aed5a9653a92ada8849fdf6e289623997977436",headline:"Add another example",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"prCreated",date:"2023-11-09T17:40:17.000Z",href:"https://github.com/graphql/graphql-spec/pull/1058",actor:"benjie"},{type:"commitsPushed",date:"2023-11-09T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/b21bb996796b487d7f369f7e162a0d3096ffaae4",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/b21bb996796b487d7f369f7e162a0d3096ffaae4",headline:"Add note about nullable variables with default values",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/a91cdba0dfedd0c13655f03cc3ac3910da388686",headline:"Add variables to table",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/4ca2023992ed5bb2aef2c58d4f532859fb580acd",headline:"Algorithm for coercing list values",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/ec3d50a664f02a3218c81bb8c3202c91765fa952",headline:"Move note and clarify algorithm",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"1002",shortname:"List coercion algorithm",image:"/img/rfc_tracker.png",nextStage:!1},sidebar:"rfcsSidebar",previous:{title:"Recommend that order of unordered collections is maintained where possible",permalink:"/rfcs/1092"},next:{title:"Fragment arguments/variables (syntax/validation/execution)",permalink:"/rfcs/1081"}},s={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Time to visit list coercion",id:"time-to-visit-list-coercion",level:2}];function o(e){const a={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Identifier"}),": #1058"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Stage"}),": ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-2-draft",children:"RFC2: Draft"})]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Champion"}),": ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"PR"}),": ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/pull/1058",children:"List coercion algorithm"})]}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"timeline",children:"Timeline"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Added to ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/07-Jul/03-wg-primary.md",children:"2025-07-03 WG agenda"})]})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Added to ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/06-Jun/26-wg-secondary-eu.md",children:"2025-06-26 WG agenda"})]})}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"2 commits pushed"})," on 2025-01-23:","\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/8eaa45ba7bff01359afc2e3b038a1842a0c110e7",children:"Reflect that variable values should already be coerced, and thus appl\u2026"})," by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/a045f1493352f05570d39b8aa372ef0c5723961d",children:"'Including null' (copied from section 6)"})," by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Added to ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2025/01-Jan/09-wg-primary.md",children:"2025-01-09 WG agenda"})]})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Mentioned in ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2025/2025-01.md",children:"2025-01 WG notes"})]})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Added to ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2024/12-Dec/05-wg-primary.md",children:"2024-12-05 WG agenda"})]})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Mentioned in ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2024/2024-12.md",children:"2024-12 WG notes"})]})}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Commit pushed"}),": ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/fba35d54523692c5b112c8fc3c773f50ef402b43",children:"Fix bug in null handling"})," on 2024-11-28 by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Added to ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/12-Dec/07-wg-primary.md",children:"2023-12-07 WG agenda"})]})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsxs)(a.strong,{children:["Mentioned in ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-12.md",children:"2023-12 WG notes"})]})}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Commit pushed"}),": ",(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/6aed5a9653a92ada8849fdf6e289623997977436",children:"Add another example"})," on 2023-11-13 by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsxs)(a.strong,{children:[(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/pull/1058",children:"Spec PR"})," created"]})," on 2023-11-09 by benjie"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"4 commits pushed"})," on 2023-11-09:","\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/b21bb996796b487d7f369f7e162a0d3096ffaae4",children:"Add note about nullable variables with default values"})," by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/a91cdba0dfedd0c13655f03cc3ac3910da388686",children:"Add variables to table"})," by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/4ca2023992ed5bb2aef2c58d4f532859fb580acd",children:"Algorithm for coercing list values"})," by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/ec3d50a664f02a3218c81bb8c3202c91765fa952",children:"Move note and clarify algorithm"})," by ",(0,n.jsx)(a.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsxs)(a.blockquote,{children:["\n",(0,n.jsx)(a.p,{children:"Fixes #1002."}),"\n",(0,n.jsx)(a.p,{children:"Previously, list coercion does not detail what to do with variables at all, and that could lead to either a null pointer exception, or to double-coercion of the variable value if you're only following the spec."}),"\n",(0,n.jsx)(a.p,{children:"Consider the following valid schema:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-graphql",children:"type Query {\n  sum(numbers:[Int!]!): Int\n}\n"})}),"\n",(0,n.jsx)(a.p,{children:"and the query that is valid against this schema:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-graphql",children:"query Q ($number: Int = 3) {\n  sum(numbers: [1, $number, 3])\n}\n"})}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.strong,{children:"NOTE"}),": We're using the variable in a list item position!"]}),"\n",(0,n.jsxs)(a.p,{children:["If you issue this to the GraphQL server with variables ",(0,n.jsx)(a.code,{children:'{"number": null}'})," then ",(0,n.jsx)(a.code,{children:"CoerceVariableValues"})," will give you ",(0,n.jsx)(a.code,{children:'{"number": null}'})," and when you fast-forward to ",(0,n.jsx)(a.code,{children:"CoerceArgumentValues"})," you'll go in to 5.j.iii.1:"]}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.a,{href:"https://spec.graphql.org/draft/#sel-NANTHHCJFTDFBBCAACGB0yS",children:"https://spec.graphql.org/draft/#sel-NANTHHCJFTDFBBCAACGB0yS"})}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["Let {coercedValues} be an empty unordered Map. ",(0,n.jsx)(a.code,{children:"coercedValues = {}"})]}),"\n",(0,n.jsxs)(a.li,{children:["Let {argumentValues} be the argument values provided in {field}. ",(0,n.jsx)(a.code,{children:"argumentValues = { numbers: [1, $number, 3] }"})]}),"\n",(0,n.jsxs)(a.li,{children:["Let {fieldName} be the name of {field}. ",(0,n.jsx)(a.code,{children:"fieldName = 'sum'"})]}),"\n",(0,n.jsxs)(a.li,{children:["Let {argumentDefinitions} be the arguments defined by {objectType} for the\nfield named {fieldName}. ",(0,n.jsx)(a.code,{children:"argumentDefinitions = { numbers: ... }"})]}),"\n",(0,n.jsxs)(a.li,{children:["For each {argumentDefinition} in {argumentDefinitions}:","\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["Let {argumentName} be the name of {argumentDefinition}. ",(0,n.jsx)(a.code,{children:"argumentName = 'numbers'"})]}),"\n",(0,n.jsxs)(a.li,{children:["Let {argumentType} be the expected type of {argumentDefinition}. ",(0,n.jsx)(a.code,{children:"argumentType = [Int!]!"})]}),"\n",(0,n.jsxs)(a.li,{children:["Let {defaultValue} be the default value for {argumentDefinition}. ",(0,n.jsx)(a.code,{children:"defaultValue = undefined"})]}),"\n",(0,n.jsxs)(a.li,{children:["Let {hasValue} be {true} if {argumentValues} provides a value for the name\n{argumentName}. ",(0,n.jsx)(a.code,{children:"hasValue = true"})]}),"\n",(0,n.jsxs)(a.li,{children:["Let {argumentValue} be the value provided in {argumentValues} for the name\n{argumentName}. ",(0,n.jsx)(a.code,{children:"argumentValue = [1, $number, 3]"})]}),"\n",(0,n.jsxs)(a.li,{children:["If {argumentValue} is a {Variable}: ",(0,n.jsx)(a.code,{children:"NOPE"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Let {variableName} be the name of {argumentValue}."}),"\n",(0,n.jsx)(a.li,{children:"Let {hasValue} be {true} if {variableValues} provides a value for the name\n{variableName}."}),"\n",(0,n.jsx)(a.li,{children:"Let {value} be the value provided in {variableValues} for the name\n{variableName}."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(a.li,{children:["Otherwise, let\u200b {value} be {argumentValue}. ",(0,n.jsx)(a.code,{children:"value = [1, $number, 3]"})]}),"\n",(0,n.jsxs)(a.li,{children:["If {hasValue} is not {true} and {defaultValue} exists (including {null}):  ",(0,n.jsx)(a.code,{children:"NOT TRIGGERED"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Add an entry to {coercedValues} named {argumentName} with the value\n{defaultValue}."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(a.li,{children:["Otherwise if {argumentType} is a Non-Nullable type, and either {hasValue} is\nnot {true} or {value} is {null}, raise a ",(0,n.jsx)(a.em,{children:"field error"}),".  ",(0,n.jsx)(a.code,{children:"NOT TRIGGERED"})]}),"\n",(0,n.jsxs)(a.li,{children:["Otherwise if {hasValue} is true: ",(0,n.jsx)(a.code,{children:"Yes, it is"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["If {value} is {null}: ",(0,n.jsx)(a.code,{children:"It is not, it is a list"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Add an entry to {coercedValues} named {argumentName} with the value\n{null}."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(a.li,{children:["Otherwise, if {argumentValue} is a {Variable}: ",(0,n.jsx)(a.code,{children:"It is not, it is a list"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Add an entry to {coercedValues} named {argumentName} with the value\n{value}."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(a.li,{children:["Otherwise: ",(0,n.jsx)(a.code,{children:"YES"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["If {value} cannot be coerced according to the input coercion rules of\n{argumentType}, raise a ",(0,n.jsx)(a.em,{children:"field error"}),". ",(0,n.jsx)(a.strong,{children:"TIME TO VISIT LIST COERCION"})]}),"\n",(0,n.jsx)(a.li,{children:"Let {coercedValue} be the result of coercing {value} according to the\ninput coercion rules of {argumentType}."}),"\n",(0,n.jsx)(a.li,{children:"Add an entry to {coercedValues} named {argumentName} with the value\n{coercedValue}."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(a.li,{children:"Return {coercedValues}."}),"\n"]}),"\n",(0,n.jsxs)(a.h2,{id:"time-to-visit-list-coercion",children:["Time to visit ",(0,n.jsx)(a.a,{href:"https://spec.graphql.org/draft/#sec-List",children:"list coercion"})]}),"\n",(0,n.jsxs)(a.p,{children:["We need to coerce the value ",(0,n.jsx)(a.code,{children:"[1, $number, 3]"})," to the non-nullable type ",(0,n.jsx)(a.code,{children:"[Int!]!"}),"."]}),"\n",(0,n.jsx)(a.p,{children:"Step 1: handle the non-null. It's not null. Great!"}),"\n",(0,n.jsxs)(a.p,{children:["Now we need to coerce the value ",(0,n.jsx)(a.code,{children:"[1, $number, 3]"})," to the list type ",(0,n.jsx)(a.code,{children:"[Int!]"}),"."]}),"\n",(0,n.jsx)(a.p,{children:"Here's what the spec says about input coercion for lists:"}),"\n",(0,n.jsxs)(a.blockquote,{children:["\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.strong,{children:"When expected as an input, list values are accepted only when each item in the list can be accepted by the list\u2019s item type."})}),"\n",(0,n.jsx)(a.p,{children:"If the value passed as an input to a list type is not a list and not the null value, then the result of input coercion is a list of size one, where the single item value is the result of input coercion for the list\u2019s item type on the provided value (note this may apply recursively for nested lists)."}),"\n",(0,n.jsx)(a.p,{children:"This allows inputs which accept one or many arguments (sometimes referred to as \u201cvar\u200b args\u201d) to declare their input type as a list while for the common case of a single value, a client can just pass that value directly rather than constructing the list."}),"\n"]}),"\n",(0,n.jsx)(a.p,{children:"We have a list, so we only care about the bold line."}),"\n",(0,n.jsx)(a.p,{children:"This line seems to miss a bunch of situations."}),"\n",(0,n.jsxs)(a.p,{children:["For example: if we were coercing to ",(0,n.jsx)(a.code,{children:"[Int]"})," the value ",(0,n.jsx)(a.code,{children:"[1, $number, 3]"})," with variables ",(0,n.jsx)(a.code,{children:"{}"})," then ",(0,n.jsx)(a.em,{children:"is"})," $number (which is undefined, since it wasn't provided in the variables) \"accepted by the list's item type\"? Really we must coerce this to ",(0,n.jsx)(a.code,{children:"null"}),", but that doesn't seem to be detailed. In fact this entire section doesn't mention variables at all."]}),"\n",(0,n.jsxs)(a.p,{children:["We're actually coercing to ",(0,n.jsx)(a.code,{children:"[Int!]"}),", so the question is: is ",(0,n.jsx)(a.code,{children:"$number"})," accepted by the list's item type? ",(0,n.jsx)(a.code,{children:"$number"})," itself is a variable, so..."]}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.p,{children:"I've attempted to solve this problem by being much more explicit about the input coercion for lists, inspired by the input coercion for input objects. I've also added a non-normative note highlighting the risk of a null variable being fed through into a non-nullable position, why that can occur (validation) and what we do about it (field error). I've also expanded the table with both variables and many more examples to cover many more edge cases."}),"\n"]})]})}function d(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},1151:(e,a,t)=>{t.d(a,{Z:()=>h,a:()=>r});var n=t(7294);const i={},l=n.createContext(i);function r(e){const a=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function h(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(l.Provider,{value:a},e.children)}}}]);