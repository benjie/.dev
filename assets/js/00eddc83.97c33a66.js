"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[4096],{254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>h});var r=n(5893),o=n(1151);const i={identifier:"1015",title:'"Root" Types clarity \u2192 "Operation Type"',stage:"0",champion:"leebyron",prUrl:"https://github.com/graphql/graphql-spec/pull/1015",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/03-Mar/02-wg-primary.md",date:new Date("2023-03-02T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-03.md",date:"2023-03",actor:null},{type:"prCreated",date:new Date("2023-02-09T20:09:33.000Z"),href:"https://github.com/graphql/graphql-spec/pull/1015",actor:"leebyron"},{type:"commitsPushed",date:new Date("2023-02-09T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/4f792d2b6135b0c1e605cf74ec17bc57392ab5ca",actor:"leebyron",commits:[{href:"https://github.com/graphql/graphql-spec/commit/4f792d2b6135b0c1e605cf74ec17bc57392ab5ca",headline:'RFC: "Root" Types clarity \u2192 "Operation Type"',ghUser:"leebyron",authorName:"Lee Byron"},{href:"https://github.com/graphql/graphql-spec/commit/e546c74eb87b836248be8ce2235d1e0a903135d8",headline:"- Moves `OperationTypeDefinition` grammar rule within the subsection \u2026",ghUser:"leebyron",authorName:"Lee Byron"}]}],shortname:'"Root" Types clarity \u2192 "Operation Type"',image:"/img/rfc_tracker.png"},a=void 0,s={id:"1015",title:'"Root" Types clarity \u2192 "Operation Type"',description:"At a glance",source:"@site/rfcs/1015.md",sourceDirName:".",slug:"/1015",permalink:"/rfcs/1015",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"1015",title:'"Root" Types clarity \u2192 "Operation Type"',stage:"0",champion:"leebyron",prUrl:"https://github.com/graphql/graphql-spec/pull/1015",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/03-Mar/02-wg-primary.md",date:"2023-03-02T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-03.md",date:"2023-03",actor:null},{type:"prCreated",date:"2023-02-09T20:09:33.000Z",href:"https://github.com/graphql/graphql-spec/pull/1015",actor:"leebyron"},{type:"commitsPushed",date:"2023-02-09T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/4f792d2b6135b0c1e605cf74ec17bc57392ab5ca",actor:"leebyron",commits:[{href:"https://github.com/graphql/graphql-spec/commit/4f792d2b6135b0c1e605cf74ec17bc57392ab5ca",headline:'RFC: "Root" Types clarity \u2192 "Operation Type"',ghUser:"leebyron",authorName:"Lee Byron"},{href:"https://github.com/graphql/graphql-spec/commit/e546c74eb87b836248be8ce2235d1e0a903135d8",headline:"- Moves `OperationTypeDefinition` grammar rule within the subsection \u2026",ghUser:"leebyron",authorName:"Lee Byron"}]}],shortname:'"Root" Types clarity \u2192 "Operation Type"',image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Full Schemas",permalink:"/rfcs/FullSchemas"},next:{title:"Fragment Arguments",permalink:"/rfcs/FragmentArguments"}},l={},h=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Identifier"}),": #1015"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Stage"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Champion"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"PR"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/1015",children:'"Root" Types clarity \u2192 "Operation Type"'})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Added to ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/03-Mar/02-wg-primary.md",children:"2023-03-02 WG agenda"})]})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Mentioned in ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-03.md",children:"2023-03 WG notes"})]})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/1015",children:"Spec PR"})," created"]})," on 2023-02-09 by leebyron"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"2 commits pushed"})," on 2023-02-09:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/4f792d2b6135b0c1e605cf74ec17bc57392ab5ca",children:'RFC: "Root" Types clarity \u2192 "Operation Type"'})," by ",(0,r.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/e546c74eb87b836248be8ce2235d1e0a903135d8",children:"- Moves `OperationTypeDefinition` grammar rule within the subsection \u2026"})," by ",(0,r.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"This attempts to clarify some naming conventions in the spec and makes one meaningful syntax change."}),"\n",(0,r.jsxs)(t.p,{children:["This changes ",(0,r.jsx)(t.code,{children:"SchemaDefinition"})," to have a zero-or-more list of ",(0,r.jsx)(t.code,{children:"OperationTypeDefinition"}),' rather than one-or-more. It removes some language that refers to this "at least one" requirement as well.']}),"\n",(0,r.jsxs)(t.p,{children:["Why? Because schema can be extended with ",(0,r.jsx)(t.code,{children:"SchemaExtension"}),". This brings this into consistency with other elements of the type definition language where definitions allow providing zero items for aspects that require\u200b one at the point of schema validation. This was overlooked\nbefore since most people use the default names, but it is not required to do so, and sometimes you need to supply the schema definition for explicitness, but are within the context of a single file that is a subset of a full schema where other operation types are defined elsewhere."]}),"\n",(0,r.jsx)(t.p,{children:"Specifically, this example used to not parse, and now should:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-graphql",children:"schema {}\n"})}),"\n",(0,r.jsx)(t.p,{children:"What has not changed is that schema are required to provide a query root type. A schema without this operation type will not pass validation, and would later need something like this to become valid:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-graphql",children:"extend schema { query: MyQueryType }\n"})}),"\n",(0,r.jsx)(t.p,{children:"The bulk of this change edits naming of some concepts in an attempt to improve clarity:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Renames ",(0,r.jsx)(t.code,{children:"OperationType"})," to ",(0,r.jsx)(t.code,{children:"OperationKind"}),'. This was already inconsistently used throughout the spec doc, but now is consistently using "kind". This avoids overloading the term "type".']}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Renames ",(0,r.jsx)(t.code,{children:"RootOperationTypeDefinition"})," to ",(0,r.jsx)(t.code,{children:"OperationTypeDefinition"}),'. We use "root" in an overloaded way and this was redundant. This improves the text to be a well defined provider of the type for a root selection set of an operation, so this shorter name is less redundant and easier to read. This also renames "default root type name" to "default operation type name" for consistency.']}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:'Replaces "root field" with "root selection set". A root field is a holdover concept from a 10yr old version of GraphQL. More accurately today these are "fields on the root selection set". This makes the latter well defined. I searched for "root" to make sure it refers only to a well defined "root selection set". This our last and only remaining use of the term "root".'}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Minor editorial change where we only use a the form ",(0,r.jsx)(t.code,{children:"{`query`}"})," when referring to the actual keyword rather than the concept"]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>a});var r=n(7294);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);