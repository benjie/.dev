"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[7987],{1825:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(5893),i=r(1151);const o={identifier:"319",title:"Add '@ignoreIfUnknown' to allow forward compatibility for clients",stage:"X",champion:"IvanGoncharov",prUrl:"https://github.com/graphql/graphql-spec/pull/319",events:[{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2020/2020-02-06.md",date:new Date("2020-02-06T00:00:00.000Z"),actor:null},{type:"prCreated",date:new Date("2017-06-13T17:26:53.000Z"),href:"https://github.com/graphql/graphql-spec/pull/319",actor:"IvanGoncharov"},{type:"commitsPushed",date:new Date("2017-06-13T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/125049d58eb60f6aadb6be7d9d14217611b1b306",actor:"IvanGoncharov",commits:[{href:"https://github.com/graphql/graphql-spec/commit/125049d58eb60f6aadb6be7d9d14217611b1b306",headline:"Add '@ignoreIfUnknown' to allow forward compatibility for clients",ghUser:"IvanGoncharov",authorName:"Ivan Goncharov"}]}],shortname:"Add '@ignoreIfUnknown' to allow forward compatibility for clients",image:"/img/rfc_tracker.png",closedAt:new Date("2018-10-02T03:54:29.000Z")},a=void 0,s={id:"319",title:"Add '@ignoreIfUnknown' to allow forward compatibility for clients",description:"At a glance",source:"@site/rfcs/319.md",sourceDirName:".",slug:"/319",permalink:"/rfcs/319",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"319",title:"Add '@ignoreIfUnknown' to allow forward compatibility for clients",stage:"X",champion:"IvanGoncharov",prUrl:"https://github.com/graphql/graphql-spec/pull/319",events:[{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2020/2020-02-06.md",date:"2020-02-06T00:00:00.000Z",actor:null},{type:"prCreated",date:"2017-06-13T17:26:53.000Z",href:"https://github.com/graphql/graphql-spec/pull/319",actor:"IvanGoncharov"},{type:"commitsPushed",date:"2017-06-13T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/125049d58eb60f6aadb6be7d9d14217611b1b306",actor:"IvanGoncharov",commits:[{href:"https://github.com/graphql/graphql-spec/commit/125049d58eb60f6aadb6be7d9d14217611b1b306",headline:"Add '@ignoreIfUnknown' to allow forward compatibility for clients",ghUser:"IvanGoncharov",authorName:"Ivan Goncharov"}]}],shortname:"Add '@ignoreIfUnknown' to allow forward compatibility for clients",image:"/img/rfc_tracker.png",closedAt:"2018-10-02T03:54:29.000Z"},sidebar:"rfcsSidebar",previous:{title:"Scalar serialize as built-in scalar type",permalink:"/rfcs/326"},next:{title:"Support empty composite types",permalink:"/rfcs/606"}},l={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Identifier"}),": #319"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Stage"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-x-rejected",children:"RFCX: Closed"})," 2018-10-02T03:54:29Z"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Champion"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/IvanGoncharov",children:"@IvanGoncharov"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"PR"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/319",children:"Add '@ignoreIfUnknown' to allow forward compatibility for clients"})]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsxs)(t.strong,{children:["Mentioned in ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2020/2020-02-06.md",children:"2020-02-06 WG notes"})]})}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/319",children:"Spec PR"})," created"]})," on 2017-06-13 by IvanGoncharov"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Commit pushed"}),": ",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/125049d58eb60f6aadb6be7d9d14217611b1b306",children:"Add '@ignoreIfUnknown' to allow forward compatibility for clients"})," on 2017-06-13 by ",(0,n.jsx)(t.a,{href:"https://github.com/IvanGoncharov",children:"@IvanGoncharov"})]}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"GraphQL is an excellent technology for backward compatibility of APIs. However, sometimes you need to provide forward compatibility for the clients."}),"\n",(0,n.jsx)(t.p,{children:"The big example is introspection mechanism of GraphQL itself. Up to this moment, there were two changes in it:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"onOperation"}),", ",(0,n.jsx)(t.code,{children:"onFragment"})," and ",(0,n.jsx)(t.code,{children:"onField"})," fields were deprecated in favor of ",(0,n.jsx)(t.code,{children:"locations"})]}),"\n",(0,n.jsxs)(t.li,{children:["new ",(0,n.jsx)(t.code,{children:"subscriptionType"})," field was added"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["In both cases, backward compatibility was preserved, so old clients can still work with newer GraphQL APIs. However, forward compatibility is broken since you can't use the same introspection query for both old and new servers. For example, GraphiQL solves this by having fallback query without ",(0,n.jsx)(t.code,{children:"subscriptionType"})," field:\n",(0,n.jsx)(t.a,{href:"https://github.com/graphql/graphiql/blob/master/src/utility/introspectionQueries.js#L11-L13",children:"https://github.com/graphql/graphiql/blob/master/src/utility/introspectionQueries.js#L11-L13"})]}),"\n",(0,n.jsxs)(t.p,{children:["This problem is even trickier since GraphQL libraries for many languages (including ",(0,n.jsx)(t.code,{children:"graphql-js"}),') expose standard introspection query. Should this "standard" query incorporate features from the last standard or should it stick to the query supported by the first public release of GraphQL?']}),"\n",(0,n.jsxs)(t.p,{children:["To address forward compatibility I propose to add ",(0,n.jsx)(t.code,{children:"@ignoreIfUnknown"})," directive that will silently ignore fields that weren't defined inside appropriate type. Comparing to ",(0,n.jsx)(t.code,{children:"skip"}),"/",(0,n.jsx)(t.code,{children:"include"})," it will not only omit value from response but also prevent the query failing during validation."]}),"\n",(0,n.jsx)(t.p,{children:"This issue is not only limited to introspection. I think this feature can solve similar problems for IoT (different firmware versions), distributed systems, etc."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>s,a:()=>a});var n=r(7294);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);