"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[4041],{4464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>h});var r=n(5893),i=n(1151);const l={identifier:"1057",title:"Fix coercion table for list",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1057",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2024/10-Oct/03-wg-primary.md",date:new Date("2024-10-03T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2024/2024-10.md",date:"2024-10",actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/12-Dec/07-wg-primary.md",date:new Date("2023-12-07T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-12.md",date:"2023-12",actor:null},{type:"prCreated",date:new Date("2023-11-09T15:38:50.000Z"),href:"https://github.com/graphql/graphql-spec/pull/1057",actor:"benjie"},{type:"commitsPushed",date:new Date("2023-11-09T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/7e13d5c2cb8a38229d602a7a7e37d81fbbb84c00",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/7e13d5c2cb8a38229d602a7a7e37d81fbbb84c00",headline:"Fix coercion table for list",ghUser:"benjie",authorName:"Benjie Gillam"}]}],shortname:"Fix coercion table for list",image:"/img/rfc_tracker.png"},s=void 0,a={id:"1057",title:"Fix coercion table for list",description:"At a glance",source:"@site/rfcs/1057.md",sourceDirName:".",slug:"/1057",permalink:"/rfcs/1057",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"1057",title:"Fix coercion table for list",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1057",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2024/10-Oct/03-wg-primary.md",date:"2024-10-03T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2024/2024-10.md",date:"2024-10",actor:null},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/12-Dec/07-wg-primary.md",date:"2023-12-07T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-12.md",date:"2023-12",actor:null},{type:"prCreated",date:"2023-11-09T15:38:50.000Z",href:"https://github.com/graphql/graphql-spec/pull/1057",actor:"benjie"},{type:"commitsPushed",date:"2023-11-09T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/7e13d5c2cb8a38229d602a7a7e37d81fbbb84c00",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/7e13d5c2cb8a38229d602a7a7e37d81fbbb84c00",headline:"Fix coercion table for list",ghUser:"benjie",authorName:"Benjie Gillam"}]}],shortname:"Fix coercion table for list",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Allow singular variables in list locations",permalink:"/rfcs/509"},next:{title:"GraphQL Defer and Stream Directives",permalink:"/rfcs/DeferStream"}},c={},h=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function o(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Identifier"}),": #1057"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Stage"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Champion"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"PR"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/1057",children:"Fix coercion table for list"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Added to ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2024/10-Oct/03-wg-primary.md",children:"2024-10-03 WG agenda"})]})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Mentioned in ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2024/2024-10.md",children:"2024-10 WG notes"})]})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Added to ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2023/12-Dec/07-wg-primary.md",children:"2023-12-07 WG agenda"})]})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.strong,{children:["Mentioned in ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2023/2023-12.md",children:"2023-12 WG notes"})]})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/pull/1057",children:"Spec PR"})," created"]})," on 2023-11-09 by benjie"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Commit pushed"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/commit/7e13d5c2cb8a38229d602a7a7e37d81fbbb84c00",children:"Fix coercion table for list"})," on 2023-11-09 by ",(0,r.jsx)(t.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"The spec claims:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Expected Type"}),(0,r.jsx)(t.th,{children:"Provided Value"}),(0,r.jsx)(t.th,{children:"Coerced Value"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[Int]"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[1, 2, 3]"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[1, 2, 3]"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[Int]"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"1"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[1]"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[[Int]]"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[1, 2, 3]"})}),(0,r.jsx)(t.td,{children:"Error: Incorrect item value"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"but this isn't correct. This final line should actually be:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Expected Type"}),(0,r.jsx)(t.th,{children:"Provided Value"}),(0,r.jsx)(t.th,{children:"Coerced Value"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[[Int]]"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[1, 2, 3]"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"[[1], [2], [3]]"})})]})})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"This is the behavior GraphQL.js has already."}),(0,r.jsx)(t.p,{children:"Reproduction:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'import { GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLSchema, GraphQLString, graphqlSync, printSchema, validateSchema } from "graphql";\n\nconst Query = new GraphQLObjectType({\n  name: "Query",\n  fields: {\n    field: {\n      args: {\n        arg: {\n          type: new GraphQLList(new GraphQLList(GraphQLInt)),\n        },\n      },\n      type: new GraphQLNonNull(GraphQLString),\n      resolve(_, { arg }) {\n        return JSON.stringify(arg);\n      },\n    },\n  },\n});\nconst schema = new GraphQLSchema({\n  query: Query,\n});\n\nconst result = graphqlSync({\n  schema,\n  source: /* GraphQL */ `\n    query {\n      field(arg: [1, 2, 3])\n    }\n  `,\n  variables: {},\n});\nconst errors = validateSchema(schema);\nif (errors.length) {\n  console.dir(errors);\n  process.exit(1);\n}\nconsole.log(printSchema(schema));\nconsole.log(JSON.stringify(result, null, 2));\n'})})]}),"\n",(0,r.jsx)(t.p,{children:"And it follows from the spec text:"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"When expected as an input, list values are accepted only when each item in the list can be accepted by the list\u2019s item type."}),"\n",(0,r.jsxs)(t.p,{children:["If the value passed as an input to a list type is not a list and not the null value, then the result of input coercion is a list of size one, where the single item value is the result of input coercion for the list\u2019s item type on the provided value ",(0,r.jsx)(t.strong,{children:"(note this may apply recursively for nested lists)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"I've fixed this, and added another couple of examples."}),"\n",(0,r.jsx)(t.p,{children:"I will be following up with a separate PR that fixes another issue in list type coercion; but this should be an easy merge."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var r=n(7294);const i={},l=r.createContext(i);function s(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);