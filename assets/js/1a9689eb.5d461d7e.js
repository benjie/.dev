"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[2716],{5558:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=t(5893),l=t(1151);const a={identifier:"ClientControlledNullability",stage:"0",title:"NOTE: this document is not being worked on at the moment, instead the Nullability WG are currently exploring an alternative solution that addresses many of the same underlying issues in a different way: [Semantic Nullability RFC](SemanticNullability.md).",events:[{type:"docUpdated",date:new Date("2025-02-24T17:01:28.000Z"),href:"https://github.com/graphql/graphql-wg/blob/bc70c2c1aa125456449473a0b6d377462141fe2b/rfcs/ClientControlledNullability.md",actor:"Martin Bonnin"},{type:"docUpdated",date:new Date("2023-11-28T18:43:39.000Z"),href:"https://github.com/graphql/graphql-wg/blob/ca0fc775c66ae0e31c4ed605503a2679d9390705/rfcs/ClientControlledNullability.md",actor:"Benjie Gillam"},{type:"docUpdated",date:new Date("2023-08-03T07:39:21.000Z"),href:"https://github.com/graphql/graphql-wg/blob/64c7f2e88b018de61763c780294d887b3c593b1e/rfcs/ClientControlledNullability.md",actor:"Calvin Cestari"},{type:"docUpdated",date:new Date("2022-05-16T08:51:55.000Z"),href:"https://github.com/graphql/graphql-wg/blob/e975ecc5c67a07e6074550f21b60751d32be7d27/rfcs/ClientControlledNullability.md",actor:"Alex Reilly"},{type:"docCreated",date:new Date("2021-11-04T17:16:37.000Z"),href:"https://github.com/graphql/graphql-wg/blob/c24d2a3474418d159cb17f147e9a53bef37e0bc6/rfcs/ClientControlledNullability.md",actor:"Alex Reilly"}],related:"867, 895, FragmentModularity, wg1394, wg864",shortname:"Client Controlled Nullability",image:"/img/rfc_tracker.png"},s=void 0,r={id:"ClientControlledNullability",title:"NOTE: this document is not being worked on at the moment, instead the Nullability WG are currently exploring an alternative solution that addresses many of the same underlying issues in a different way: [Semantic Nullability RFC](SemanticNullability.md).",description:"At a glance",source:"@site/rfcs/ClientControlledNullability.md",sourceDirName:".",slug:"/ClientControlledNullability",permalink:"/rfcs/ClientControlledNullability",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"ClientControlledNullability",stage:"0",title:"NOTE: this document is not being worked on at the moment, instead the Nullability WG are currently exploring an alternative solution that addresses many of the same underlying issues in a different way: [Semantic Nullability RFC](SemanticNullability.md).",events:[{type:"docUpdated",date:"2025-02-24T17:01:28.000Z",href:"https://github.com/graphql/graphql-wg/blob/bc70c2c1aa125456449473a0b6d377462141fe2b/rfcs/ClientControlledNullability.md",actor:"Martin Bonnin"},{type:"docUpdated",date:"2023-11-28T18:43:39.000Z",href:"https://github.com/graphql/graphql-wg/blob/ca0fc775c66ae0e31c4ed605503a2679d9390705/rfcs/ClientControlledNullability.md",actor:"Benjie Gillam"},{type:"docUpdated",date:"2023-08-03T07:39:21.000Z",href:"https://github.com/graphql/graphql-wg/blob/64c7f2e88b018de61763c780294d887b3c593b1e/rfcs/ClientControlledNullability.md",actor:"Calvin Cestari"},{type:"docUpdated",date:"2022-05-16T08:51:55.000Z",href:"https://github.com/graphql/graphql-wg/blob/e975ecc5c67a07e6074550f21b60751d32be7d27/rfcs/ClientControlledNullability.md",actor:"Alex Reilly"},{type:"docCreated",date:"2021-11-04T17:16:37.000Z",href:"https://github.com/graphql/graphql-wg/blob/c24d2a3474418d159cb17f147e9a53bef37e0bc6/rfcs/ClientControlledNullability.md",actor:"Alex Reilly"}],related:"867, 895, FragmentModularity, wg1394, wg864",shortname:"Client Controlled Nullability",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Allow singular variables in list locations",permalink:"/rfcs/509"},next:{title:"Semantic Nullability",permalink:"/rfcs/SemanticNullability"}},o={},d=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Definitions",id:"definitions",level:2},{value:"\ud83d\udcdc Problem Statement",id:"-problem-statement",level:2},{value:"\ud83e\uddd1\u200d\ud83d\udcbb Proposed Solution",id:"-proposed-solution",level:2},{value:"\ud83c\udfac Behavior",id:"-behavior",level:2},{value:"<code>!</code>",id:"",level:3},{value:"\u2705 Validation",id:"-validation",level:2},{value:"\u270f\ufe0f Proposed syntax",id:"\ufe0f-proposed-syntax",level:2},{value:"<code>!</code>",id:"-1",level:3},{value:"Use cases",id:"use-cases",level:2},{value:"Improve the developer experience using GraphQL client code generators",id:"improve-the-developer-experience-using-graphql-client-code-generators",level:3},{value:"3rd-party GraphQL APIs",id:"3rd-party-graphql-apis",level:3},{value:"\u2705 RFC Goals",id:"-rfc-goals",level:2},{value:"\ud83d\udeab RFC Non-goals",id:"-rfc-non-goals",level:2},{value:"\ud83d\uddf3\ufe0f Alternatives considered",id:"\ufe0f-alternatives-considered",level:2},{value:"A <code>@nonNull</code> official directive",id:"a-nonnull-official-directive",level:3},{value:"A <code>@nonNull</code> custom directive",id:"a-nonnull-custom-directive",level:3},{value:"Make Schema Fields Non-Nullable",id:"make-schema-fields-non-nullable",level:3},{value:"Write wrapper types that null-check fields",id:"write-wrapper-types-that-null-check-fields",level:3},{value:"Alternatives to <code>!</code>",id:"alternatives-to-",level:3},{value:"<code>!!</code>",id:"-2",level:4},{value:"Decision Log",id:"decision-log",level:2},{value:"<code>!</code> as the only designator in the RFC (July 2023)",id:"-as-the-only-designator-in-the-rfc-july-2023",level:3},{value:"Prior to July 2023",id:"prior-to-july-2023",level:3},{value:"<code>?</code> as a counterpart to <code>!</code>",id:"-as-a-counterpart-to-",level:4},{value:"List syntax",id:"list-syntax",level:4},{value:"<code>!</code> propagates <code>null</code> to nearest <code>?</code> rather than nearest nullable field",id:"-propagates-null-to-nearest--rather-than-nearest-nullable-field",level:4}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identifier"}),": ClientControlledNullability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stage"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": -"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PR"}),": -"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Related"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/895",title:"Client Controlled Nullability / RFCX",children:"#895"})," (Client Controlled Nullability)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/FragmentModularity",title:"Fragment Modularity / RFC0",children:"FragmentModularity"})," (Fragment Modularity)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/wg1394",title:"True Nullability Schema / RFC0",children:"wg#1394"})," (True Nullability Schema)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/bc70c2c1aa125456449473a0b6d377462141fe2b/rfcs/ClientControlledNullability.md",children:"RFC document updated"})})," on 2025-02-24 by Martin Bonnin"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/ca0fc775c66ae0e31c4ed605503a2679d9390705/rfcs/ClientControlledNullability.md",children:"RFC document updated"})})," on 2023-11-28 by Benjie Gillam"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/64c7f2e88b018de61763c780294d887b3c593b1e/rfcs/ClientControlledNullability.md",children:"RFC document updated"})})," on 2023-08-03 by Calvin Cestari"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/e975ecc5c67a07e6074550f21b60751d32be7d27/rfcs/ClientControlledNullability.md",children:"RFC document updated"})})," on 2022-05-16 by Alex Reilly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/c24d2a3474418d159cb17f147e9a53bef37e0bc6/rfcs/ClientControlledNullability.md",children:"RFC document created"})})," on 2021-11-04 by Alex Reilly"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["NOTE: this document is not being worked on at the moment, instead the Nullability WG are currently exploring an alternative solution that addresses many of the same underlying issues in a different way: ",(0,i.jsx)(n.a,{href:"/rfcs/SemanticNullability",children:"Semantic Nullability RFC"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"rfc-client-controlled-nullability",children:"RFC: Client Controlled Nullability"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Proposed by:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/twof",children:"Alex Reilly"})," - Yelp iOS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/lizjakubowski",children:"Liz Jakubowski"})," - Yelp iOS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/magicmark",children:"Mark Larah"})," - Yelp Web"]}),"\n",(0,i.jsx)(n.li,{children:"Sanae Rosen - Yelp Android"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/fotoetienne",children:"Stephen Spalding"})," - Netflix GraphQL Server Infrastructure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/xuewei8910",children:"Wei Xue"})," - Yelp iOS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/aprilrd",children:"Young Min Kim"})," - Netflix UI"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This RFC proposes syntax that would allow developers to override schema-defined\nnullability of fields for individual operations."}),"\n",(0,i.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Required field"})," - A field which is marked with ",(0,i.jsx)(n.code,{children:"!"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-problem-statement",children:"\ud83d\udcdc Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["In our experience, client developers have been frustrated that the vast majority of fields are\nnullable. We\u2019ve done this in accordance with official best practice, and we largely agree that this\nis good practice. From the\n",(0,i.jsx)(n.a,{href:"https://graphql.org/learn/best-practices/#nullability",children:"official GraphQL best practice"}),":"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"This is because there are many things that can go awry in a networked service backed by databases\nand other\nservices. A database could go down, an asynchronous action could fail, an exception could be\nthrown. Beyond\nsimply system failures, authorization can often be granular, where individual fields within\na request can\nhave different authorization rules."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The problem with the SDL Non-Nullable (",(0,i.jsx)(n.code,{children:"!"}),") is that it eliminates the possibility of partial failure\non a given type. This forces schema authors to decide for which fields partial failure is\nacceptable. A GraphQL schema author may not be in the best position to predict whether partial failure\nwill be acceptable or unacceptable for every canvas that makes use of a field."]}),"\n",(0,i.jsxs)(n.p,{children:["While the schema can have nullable fields for valid reasons (such as federation), in some cases the\nclient wants to decide if it accepts a ",(0,i.jsx)(n.code,{children:"null"})," value for the result to simplify the client-side\nlogic."]}),"\n",(0,i.jsx)(n.h2,{id:"-proposed-solution",children:"\ud83e\uddd1\u200d\ud83d\udcbb Proposed Solution"}),"\n",(0,i.jsx)(n.p,{children:"A client-controlled Non-Nullable designator."}),"\n",(0,i.jsx)(n.h2,{id:"-behavior",children:"\ud83c\udfac Behavior"}),"\n",(0,i.jsx)(n.p,{children:"Each client-controlled nullability designator overrides the schema-defined nullability of the field\nit's attached to for the duration of the operation."}),"\n",(0,i.jsx)(n.h3,{id:"",children:(0,i.jsx)(n.code,{children:"!"})}),"\n",(0,i.jsxs)(n.p,{children:["The proposed client-controlled required designator would have identical semantics to the current\nschema-defined ",(0,i.jsx)(n.a,{href:"https://spec.graphql.org/draft/#sec-Executing-Selection-Sets.Errors-and-Non-Null-Fields",children:"Non-Null"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"-validation",children:"\u2705 Validation"}),"\n",(0,i.jsxs)(n.p,{children:["If a developer executed an operation with two fields name ",(0,i.jsx)(n.code,{children:"foo"}),", one a ",(0,i.jsx)(n.code,{children:"String"})," and the other an\n",(0,i.jsx)(n.code,{children:"Int"}),", the operation would be declared invalid by the server. The same is true if one of the fields\nis designated required but both are otherwise the same type. In this example, ",(0,i.jsx)(n.code,{children:"nickname"})," could be\neither a ",(0,i.jsx)(n.code,{children:"String"})," or a ",(0,i.jsx)(n.code,{children:"String!"})," which are two different types and therefor can not be merged:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"fragment conflictingDifferingResponses on Pet {\n  ... on Dog {\n    nickname\n  }\n  ... on Cat {\n    nickname!\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-proposed-syntax",children:"\u270f\ufe0f Proposed syntax"}),"\n",(0,i.jsxs)(n.p,{children:["The client can express that a schema field is required by using the ",(0,i.jsx)(n.code,{children:"!"})," syntax in the operation\ndefinition:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"query GetBusinessName($id: String!) {\n  business(id: $id)? {\n    name!\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-1",children:(0,i.jsx)(n.code,{children:"!"})}),"\n",(0,i.jsxs)(n.p,{children:["We have chosen ",(0,i.jsx)(n.code,{children:"!"})," because ",(0,i.jsx)(n.code,{children:"!"})," is already being used in the GraphQL spec to indicate that a field in\nthe schema is Non-Nullable, so it will feel familiar to GraphQL developers."]}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,i.jsx)(n.h3,{id:"improve-the-developer-experience-using-graphql-client-code-generators",children:"Improve the developer experience using GraphQL client code generators"}),"\n",(0,i.jsx)(n.p,{children:"Handling nullable values on the client is a major source of frustration for developers, especially\nwhen using types generated by client code generators in strongly-typed languages. The proposed\nrequired designator would allow GraphQL clients to generate types with more precise nullability\nrequirements for a particular feature. For example, using a GraphQL client like Apollo GraphQL on\nmobile, the following query"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"query GetBusinessName($id: String!) {\n  business(id: $id)? {\n    name!\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"would be translated to the following type in Swift."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"struct GetBusinessNameQuery {\n  let id: String\n  struct Data {\n    let business: Business?\n    struct Business {\n      /// Lack of `?` indicates that `name` will never be `null`\n      let name: String\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If a null business name is not acceptable for the feature executing this query, this generated type\nis more ergonomic to use since the developer does not need to unwrap the value each time it\u2019s\naccessed."}),"\n",(0,i.jsx)(n.h3,{id:"3rd-party-graphql-apis",children:"3rd-party GraphQL APIs"}),"\n",(0,i.jsxs)(n.p,{children:["Marking a field Non-Nullable in schema is not possible in every use case. For example, when a\ndeveloper is using a 3rd-party API such as\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/graphql",children:"Github's GraphQL API"})," they won't be able to alter Github's\nschema, but they may still want to have certain fields be required in their application. Even within\nan organization, ownership rules may dictate that an developer is not allowed to alter a schema they\nutilize."]}),"\n",(0,i.jsx)(n.h2,{id:"-rfc-goals",children:"\u2705 RFC Goals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Non-nullable syntax that is based off of syntax that developers will already be familiar with"}),"\n",(0,i.jsx)(n.li,{children:"Enable GraphQL client code generation tools to generate more ergonomic types"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-rfc-non-goals",children:"\ud83d\udeab RFC Non-goals"}),"\n",(0,i.jsx)(n.p,{children:"This syntax consciously does not cover the following use cases:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Default Values"}),"\nThe syntax being used in this proposal causes queries to propagate an error in the case that\na ",(0,i.jsx)(n.code,{children:"null"})," is found for a required field. As an alternative, some languages provide syntax (eg ",(0,i.jsx)(n.code,{children:"??"}),'\nfor Swift) that says "if a field would be ',(0,i.jsx)(n.code,{children:"null"}),' return some other value instead". We have not\ncovered that behavior in this proposal, but leave it open to be covered by future proposals.']}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-alternatives-considered",children:"\ud83d\uddf3\ufe0f Alternatives considered"}),"\n",(0,i.jsxs)(n.h3,{id:"a-nonnull-official-directive",children:["A ",(0,i.jsx)(n.code,{children:"@nonNull"})," official directive"]}),"\n",(0,i.jsxs)(n.p,{children:["This solution offers the same benefits as the proposed solution. Additionally, this solution has\ngood upgrade paths if we later want to provide more behavior options to developers.\n",(0,i.jsxs)(n.a,{href:"https://mrtnzlml.com/docs/relay/directives#required",children:["Relay's ",(0,i.jsx)(n.code,{children:"@required"})," directive"]}),", for example,\nallows developers to decide how they want their clients to respond in the event that ",(0,i.jsx)(n.code,{children:"null"})," is\nreceived for a ",(0,i.jsx)(n.code,{children:"@required"})," field."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"fragment Foo on User {\n  address @required(action: THROW) {\n    city @required(action: LOG)\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"With our current proposal, we don't have a great way to offer this kind of flexibility that would\nmesh nicely with existing GraphQL syntax."}),"\n",(0,i.jsx)(n.p,{children:"However we think the described behavior acts as a nice, concise default, and is worth the tradeoff."}),"\n",(0,i.jsxs)(n.h3,{id:"a-nonnull-custom-directive",children:["A ",(0,i.jsx)(n.code,{children:"@nonNull"})," custom directive"]}),"\n",(0,i.jsx)(n.p,{children:"This is an alternative being used at some of the companies represented in this proposal."}),"\n",(0,i.jsx)(n.p,{children:"While this solution simplifies some client-side logic, it does not meaningfully improve the\ndeveloper experience for clients."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['The cache implementations of "smart" GraphQL clients also need to understand the custom directive\nto behave correctly. Currently, when a client library caches a ',(0,i.jsx)(n.code,{children:"null"})," field based on an operation\nwithout a directive, it will return the ",(0,i.jsx)(n.code,{children:"null"})," field for another operation with this directive."]}),"\n",(0,i.jsxs)(n.li,{children:["For clients that rely on client code generation, generated types typically cannot be customized\nbased on a custom directive. See\n",(0,i.jsx)(n.a,{href:"https://github.com/dotansimha/graphql-code-generator/discussions/5676",children:"https://github.com/dotansimha/graphql-code-generator/discussions/5676"})," for an example. As a result,\nthe optional generated properties still need to be unwrapped in the code."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This feels like a common enough need to call for a language feature. A single language feature would\nenable more unified public tooling around GraphQL."}),"\n",(0,i.jsx)(n.h3,{id:"make-schema-fields-non-nullable",children:"Make Schema Fields Non-Nullable"}),"\n",(0,i.jsxs)(n.p,{children:["It is intuitive that one should simply mark fields that are not intended to be ",(0,i.jsx)(n.code,{children:"null"})," Non-Nullable\nin the schema. For example, in the following GraphQL schema:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Business {\n  name: String\n  isStarred: Boolean\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If we intend to always have a ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"isStarred"})," for a ",(0,i.jsx)(n.code,{children:"Business"}),", it may be tempting to mark\nthese fields Non-Nullable:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Business {\n  name: String!\n  isStarred: Boolean!\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Marking schema fields Non-Nullable may introduce problems in a distributed environment where partial\nfailure is a possibility regardless of whether the field is intended to have ",(0,i.jsx)(n.code,{children:"null"})," as a valid\nstate."]}),"\n",(0,i.jsxs)(n.p,{children:["When a Non-Nullable field results in ",(0,i.jsx)(n.code,{children:"null"}),", the GraphQL server will recursively step through the\nfield\u2019s ancestors to find the next nullable field. In the following GraphQL response:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "business": {\n      "name": "The French Laundry",\n      "isStarred": false\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"isStarred"})," is Non-Nullable but resolves to ",(0,i.jsx)(n.code,{children:"null"})," and business is nullable, the result will be:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "business": null\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Even if ",(0,i.jsx)(n.code,{children:"isStarred"})," resolves to a valid result, the response would no longer provide this data. If business is\nNon-Nullable, the response will be:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": null\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the case that the service storing business stars is unavailable, the UI may want to go ahead and\nrender the component without a star (effectively defaulting ",(0,i.jsx)(n.code,{children:"isStarred"})," to ",(0,i.jsx)(n.code,{children:"false"}),"). A Non-Nullable\nfield in the schema makes it impossible for the client to receive partial results from the server,\nand thus potentially forces the entire component to fail to render."]}),"\n",(0,i.jsxs)(n.p,{children:["More discussion on ",(0,i.jsx)(n.a,{href:"https://medium.com/@calebmer/when-to-use-graphql-non-null-fields-4059337f6fc8",children:"when to use Non-Nullable can be found here"})]}),"\n",(0,i.jsxs)(n.p,{children:["Also see ",(0,i.jsx)(n.a,{href:"#3rd-party-GraphQL-APIs",children:"3rd-party GraphQL APIs"})," for an instance where it wouldn't be\npossible for a developer to alter the schema for a service they're using."]}),"\n",(0,i.jsx)(n.h3,{id:"write-wrapper-types-that-null-check-fields",children:"Write wrapper types that null-check fields"}),"\n",(0,i.jsx)(n.p,{children:"This is the alternative being used at some of the companies represented in this proposal for the\ntime being. It's labor intensive and rote work. It more or less undermines any gains from code\ngeneration."}),"\n",(0,i.jsxs)(n.h3,{id:"alternatives-to-",children:["Alternatives to ",(0,i.jsx)(n.code,{children:"!"})]}),"\n",(0,i.jsx)(n.h4,{id:"-2",children:(0,i.jsx)(n.code,{children:"!!"})}),"\n",(0,i.jsx)(n.p,{children:"This would follow the precedent set by Kotlin. It's more verbose and diverges from GraphQL's SDL\nprecedent."}),"\n",(0,i.jsx)(n.h2,{id:"decision-log",children:"Decision Log"}),"\n",(0,i.jsxs)(n.h3,{id:"-as-the-only-designator-in-the-rfc-july-2023",children:[(0,i.jsx)(n.code,{children:"!"})," as the only designator in the RFC (July 2023)"]}),"\n",(0,i.jsxs)(n.p,{children:['At the July 26th meeting of the CCN sub-WG it was decided to simplify the RFC for the sake of progress. This\nreverses the "',(0,i.jsx)(n.code,{children:"?"})," as a counterpart to the ",(0,i.jsx)(n.code,{children:"!"}),'" designator.']}),"\n",(0,i.jsxs)(n.p,{children:["The increased scope of the RFC with the nullability designator ",(0,i.jsx)(n.code,{children:"?"})," has stalled the RFC for more than two\nyears (",(0,i.jsx)(n.a,{href:"https://github.com/twof/graphql-spec/pull/1/files",children:"the initial RFC from April 2021"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["One of the contentious discussions we encountered was around the proposed behaviors of the nullability designator\n",(0,i.jsx)(n.code,{children:"?"}),". Regardless of the chosen path, it had unintuitive semantics (see graphql/client-controlled-nullability-wg#2),\nwhich require\u200b other RFCs, such as ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/FragmentModularity.md",children:"fragment boundaries"}),", or new ideas like inline errors."]}),"\n",(0,i.jsxs)(n.p,{children:["Even though we recognize the value of having a counterpart to ",(0,i.jsx)(n.code,{children:"!"}),", we made a tradeoff decision to provide value\nto the community sooner than later."]}),"\n",(0,i.jsx)(n.h3,{id:"prior-to-july-2023",children:"Prior to July 2023"}),"\n",(0,i.jsxs)(n.p,{children:['This proposal started out with a very simple premise and implementation, and has gotten more complex as\nthe community has explored edge cases and facets about how GraphQL is actually used in practice. For\nexample this proposal starts out by talking about accommodating the "best practices" that are recommended\nby the GraphQL documentation and the community, but we discovered pretty early on that there are\nlegitimate use cases where the "best practices" are rightfully ignored. Some of those use cases are\ncovered in "',(0,i.jsx)(n.code,{children:"?"})," as a counterpart to ",(0,i.jsx)(n.code,{children:"!"}),'".']}),"\n",(0,i.jsx)(n.p,{children:"In order to cover instances like that, we've needed to justify additional complexity which can be\ndifficult to understand for newcomers without (at this point a full year) of context. This decision\nlog was written with newcomers in mind to avoid rediscussing issues that have already been hashed out,\nand to make it easier to understand why certain decisions have been made. At the time of writing,\nthe decisions here aren't set in stone, so any future discussions can use this log as a starting point."}),"\n",(0,i.jsxs)(n.h4,{id:"-as-a-counterpart-to-",children:[(0,i.jsx)(n.code,{children:"?"})," as a counterpart to ",(0,i.jsx)(n.code,{children:"!"})]}),"\n",(0,i.jsxs)(n.p,{children:["Lee was the first person ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/issues/867#issuecomment-840807186",children:"to suggest"}),"\nthat the inverse of ",(0,i.jsx)(n.code,{children:"!"})," should exist and that it should be represented by ",(0,i.jsx)(n.code,{children:"?"}),". The\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/issues/867#issuecomment-841372320",children:"reasoning"}),' was that it "completes\nthe story of control" and provides a guaranteed stopping point for ',(0,i.jsx)(n.code,{children:"null"})," propagation if we're using the existing\n",(0,i.jsx)(n.code,{children:"null"}),' propagation rules. The feeling was that "introducing ! without ? is like introducing ',(0,i.jsx)(n.code,{children:"throw"})," without ",(0,i.jsx)(n.code,{children:"catch"}),'".']}),"\n",(0,i.jsxs)(n.p,{children:["Lee also surfaced that there are some use cases like his own at Robinhood where they're trying to balance\ndeveloper experience and data preservation, and have opted to mark quite a few fields ",(0,i.jsx)(n.code,{children:"Non-Null"}),". Data\npreservation is very important because Robinhood is working with financial data, so they have the opposite\nproblem where they sometimes want to be able to halt ",(0,i.jsx)(n.code,{children:"null"})," propagation, rather than the inverse use case which\nthis proposal originally supported."]}),"\n",(0,i.jsxs)(n.p,{children:["Developers from Apollo indicated that many of their customers face problems around schema breaking where the\nsolution to developer experience gripes is to make a breaking change and swap a field from nullable to ",(0,i.jsx)(n.code,{children:"Non-Nullable"}),"\nor vice versa, which can be a labor intensive process."]}),"\n",(0,i.jsxs)(n.p,{children:["Since there seemed to be general consensus that ",(0,i.jsx)(n.code,{children:"?"})," was a good addition to the proposal, it was adopted without a vote."]}),"\n",(0,i.jsxs)(n.p,{children:["Subsequently there was discussion around whether ",(0,i.jsx)(n.code,{children:"?"})," could be introduced in a later proposal, and there was general\nagreement that the usability of ",(0,i.jsx)(n.code,{children:"!"})," is limited without ",(0,i.jsx)(n.code,{children:"?"}),", and the selected ",(0,i.jsx)(n.code,{children:"null"})," propagation behavior described\nbelow solidifies the decision to introduce both additions in a single proposal."]}),"\n",(0,i.jsx)(n.h4,{id:"list-syntax",children:"List syntax"}),"\n",(0,i.jsxs)(n.p,{children:["Developers from Apollo ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/895#issuecomment-961442966",children:"suggested"})," early\non that users would want to apply CCN syntax to list elements. The possibility had been suggested earlier than\nthat as well, but it was put off because neither Netflix nor Relay's CCN counterparts had the feature, and it\nhadn't been a problem yet. However there was enough interest during community feedback sessions to adopt it\ninto the proposal. ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/discussions/864",children:"Discussions"})," around which specific\nsyntax to adopt happened over the following months."]}),"\n",(0,i.jsx)(n.p,{children:"Options other than the one that was landed on included the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"twoDimensionalList!!?\n"})}),"\n",(0,i.jsx)(n.p,{children:"The folks that voted against this option felt that it was unclear how it should be interpreted, whether operators\nshould be applied from the outside-in, or inside-out."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"twoDimensionalList as [[Int!]!]\ntwoDimensionalList <= [[Int!]!]\n"})}),"\n",(0,i.jsx)(n.p,{children:"The folks that voted against this option felt that this option read like a type-cast, and that the inclusion\nof a type placed an undue burden on client developers. Validation would fail if the type was incorrect, and\ndidn't provide much additional value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"twoDimensionalList[[!]!]?\n"})}),"\n",(0,i.jsxs)(n.p,{children:['This syntax, called "the bracket syntax" during discussions was selected for adoption by majority vote at the\n',(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-03-03.md",children:"March 3rd, 2022 GraphQL Working Group Meeting"}),".\n9 out of 10 participants voted for this option with the final vote going to the ",(0,i.jsx)(n.code,{children:"<= [[Int!]!]"})," option."]}),"\n",(0,i.jsx)(n.p,{children:"Initially there was a restriction on the bracket syntax where the depth of the syntax needed to match depth of\nthe field's list type, but participants at the same meeting felt that restriction should be loosened so\nthat developers could opt to apply the syntax to only the field itself and ignore the elements of the\nlist. Under that new rule the following would also be valid, and the two examples would be equivalent."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"twoDimensionalList!\ntwoDimensionalList[[]]!\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There are however some open concerns that the first of the two examples could be ambiguous as to whether\nthe ",(0,i.jsx)(n.code,{children:"!"})," applies to the field as a whole or to the list elements."]}),"\n",(0,i.jsxs)(n.h4,{id:"-propagates-null-to-nearest--rather-than-nearest-nullable-field",children:[(0,i.jsx)(n.code,{children:"!"})," propagates ",(0,i.jsx)(n.code,{children:"null"})," to nearest ",(0,i.jsx)(n.code,{children:"?"})," rather than nearest nullable field"]}),"\n",(0,i.jsxs)(n.p,{children:["The selected mechanics were most requested by the folks at Meta working on ",(0,i.jsx)(n.a,{href:"https://relay.dev/",children:"Relay"}),".\nRelay wanted this behavior for a few reasons"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Relay presents a facade of fragment isolation for its own\n",(0,i.jsxs)(n.a,{href:"https://relay.dev/docs/next/guides/required-directive/",children:[(0,i.jsx)(n.code,{children:"@required"})," directive"]}),". If a field is ",(0,i.jsx)(n.code,{children:"null"}),",\nrather than merging fragments and propagating ",(0,i.jsx)(n.code,{children:"null"})," to all sibling fields on selection sets that use\nthat fragment, the most popular option as chosen by ~90% of developers is to have the request throw\nand utilize React's error boundaries. It also has the option to do ",(0,i.jsx)(n.code,{children:"null"})," propagation, but that too\nis bound to a single fragment. Because of this, it likely won't be able to use CCN at first, but\ndevelopers would like to be able to use it in the future once\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/FragmentModularity.md",children:"Fragment Modularity"}),"\nmakes it into the spec. The selected option preserves the possibility of Relay and other clients that utilize\nfragments heavily using CCN in the future."]}),"\n",(0,i.jsxs)(n.li,{children:["The throwing option that Relay provides on their ",(0,i.jsx)(n.code,{children:"@required"}),' directive effectively allows developers\nto indicate "If some required field is missing, throw out everything from this field to the fragment boundary"\nwhich is tighter client control than was offered by the initial iteration of this proposal where ',(0,i.jsx)(n.code,{children:"!"})," only\ntransformed a field into a ",(0,i.jsx)(n.code,{children:"Non-Null"}),". In that case, the server still had control over where ",(0,i.jsx)(n.code,{children:"null"}),"\npropagation halted with which fields the schema said were nullable. The selected ",(0,i.jsx)(n.code,{children:"null"})," propagation option\nis slightly closer to the most popular ",(0,i.jsx)(n.code,{children:"@required"})," option in that way."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["With the initial iteration of this proposal if users wanted to guarantee that all fields through multiple\nparents should be lost in the event that a child is ",(0,i.jsx)(n.code,{children:"null"}),", they would need to mark each level with a ",(0,i.jsx)(n.code,{children:"!"}),",\nbut the selected option avoids that."]}),"\n",(0,i.jsxs)(n.p,{children:["With the selected option, forgetting to include a ",(0,i.jsx)(n.code,{children:"?"})," is potentially dangerous because it would result\nin more fields being lost than intended, all the way up to the ",(0,i.jsx)(n.code,{children:"data"}),' field in the worst case scenario.\nThere were concerns that that was a blocker, but arguments were made that because most queries are relatively\nsmall, it wasn\'t actually that dangerous. Clients have also often been treating the existence of any errors\nas a failed request and thrown out entire responses, so in effect, clients been choosing the "worst case\nscenario" when given the option.']}),"\n",(0,i.jsxs)(n.p,{children:["The behavior where ",(0,i.jsx)(n.code,{children:"!"})," propagates ",(0,i.jsx)(n.code,{children:"null"})," to nearest ",(0,i.jsx)(n.code,{children:"?"})," was selected for adoption by majority vote at the\n",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-03-03.md",children:"March 3rd, 2022 GraphQL Working Group Meeting"}),".\n7 out of 8 participants voted for this option with the final vote going to behavior where the ",(0,i.jsx)(n.code,{children:"!"})," would be non-destructive."]}),"\n",(0,i.jsx)(n.p,{children:"The non-destructive option was turned down because having different behavior per-client wasn't desirable, and\nit provided no benefits to naive clients (like a bash script) because extra processing would be required\nfor it to be a value-add."}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var i=t(7294);const l={},a=i.createContext(l);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);