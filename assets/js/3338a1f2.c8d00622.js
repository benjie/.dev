"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[7754],{4269:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=n(5893),l=n(1151);const s={identifier:"wg1410",title:"Strict Semantic Nullability",stage:"0",champion:"leebyron",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1410",events:[{type:"wgDiscussionCreated",date:new Date("2023-10-05T22:34:49.000Z"),href:"https://github.com/graphql/graphql-wg/discussions/1410",actor:"leebyron"}],related:"1048, 1065, 1073",shortname:"Strict Semantic Nullability",image:"/img/rfc_tracker.png"},r=void 0,a={id:"wg1410",title:"Strict Semantic Nullability",description:"At a glance",source:"@site/rfcs/wg1410.md",sourceDirName:".",slug:"/wg1410",permalink:"/rfcs/wg1410",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"wg1410",title:"Strict Semantic Nullability",stage:"0",champion:"leebyron",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1410",events:[{type:"wgDiscussionCreated",date:"2023-10-05T22:34:49.000Z",href:"https://github.com/graphql/graphql-wg/discussions/1410",actor:"leebyron"}],related:"1048, 1065, 1073",shortname:"Strict Semantic Nullability",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Introduce SourceSchemaDocument and FullSchemaDocument",permalink:"/rfcs/1049"},next:{title:"Directive proposal for opting out of null bubbling",permalink:"/rfcs/1050"}},o={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"GraphQL nullability historical rationale",id:"graphql-nullability-historical-rationale",level:2},{value:"Annotate semantic nullability: <code>?</code>",id:"annotate-semantic-nullability-",level:2},{value:"A strict nullability schema",id:"a-strict-nullability-schema",level:2},{value:"How to adopt this incrementally?",id:"how-to-adopt-this-incrementally",level:2},{value:"Let\u2019s look at the effects. Does this break things?",id:"lets-look-at-the-effects-does-this-break-things",level:2},{value:"What about forward compatibility?",id:"what-about-forward-compatibility",level:2},{value:"FAQ: Should we then continue to suggest use of NonNull (<code>!</code>)?",id:"faq-should-we-then-continue-to-suggest-use-of-nonnull-",level:2},{value:"<del>FAQ: How is it okay for a <code>@strictNullability</code> field to return <code>null</code> without a matching error in the <code>&quot;errors&quot;</code> array?</del>",id:"faq-how-is-it-okay-for-a-strictnullability-field-to-return-null-without-a-matching-error-in-the-errors-array",level:2}];function h(e){const i={a:"a",blockquote:"blockquote",code:"code",del:"del",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Identifier"}),": wg#1410"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Stage"}),": ",(0,t.jsx)(i.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Champion"}),": ",(0,t.jsx)(i.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"PR"}),": -"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Related"}),":","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/rfcs/1048",title:"Null-Only-On-Error / Semantically-Non-Null type (asterisk) / RFCX",children:"#1048"})," (Null-Only-On-Error / Semantically-Non-Null type (asterisk))"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/rfcs/1065",title:"SemanticNonNull type (null only on error) / RFC0",children:"#1065"})," (SemanticNonNull type (null only on error))"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/rfcs/1073",title:"Be strict about error paths format / RFC3",children:"#1073"})," (Be strict about error paths format)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"timeline",children:"Timeline"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsxs)(i.strong,{children:[(0,t.jsx)(i.a,{href:"https://github.com/graphql/graphql-wg/discussions/1410",children:"WG discussion"})," created"]})," on 2023-10-05 by leebyron"]}),"\n"]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsx)(i.p,{children:"This is a follow up to #1394 based on a discussion in the Oct 2023 WG meeting."}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h1,{id:"future-of-nullability-in-graphql-is-strict-semantic-nullability",children:"Future of nullability in GraphQL is strict semantic nullability."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"High level overview:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:['We introduce the concept of a "Semantically Nullable" type modifier ',(0,t.jsx)(i.code,{children:"?"})," which describes a type as strictly allowing return of semantic null values."]}),"\n",(0,t.jsxs)(i.li,{children:["We introduce a schema directive ",(0,t.jsx)(i.code,{children:"@strictNullability"})," to resolve how to interpret ",(0,t.jsx)(i.code,{children:"null"})," values."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"graphql-nullability-historical-rationale",children:"GraphQL nullability historical rationale"}),"\n",(0,t.jsxs)(i.p,{children:["GraphQL field types default to being nullable with a modifier ",(0,t.jsx)(i.code,{children:"!"})," to indicate non-nullability. Why?"]}),"\n",(0,t.jsx)(i.p,{children:"First, we want to preserve future evolution of schema. It\u2019s often the case that when first designing schemas that nullability and changes to it over time aren\u2019t deeply considered. It turns out that it\u2019s safe to convert a nullable field to a non-nullable one, but not the other way around. Thus the default is nullable. Defaults matter, and GraphQL\u2019s default prioritizes allowing for future change."}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Callout on safe field type changes"})}),"\n",(0,t.jsxs)(i.p,{children:['A field type change is "safe" when the new type describes a "subset" of the previous type. Changing ',(0,t.jsx)(i.code,{children:"Dog"})," to ",(0,t.jsx)(i.code,{children:"Pet"})," is not safe because a historical client made assumptions about ",(0,t.jsx)(i.code,{children:"Dog"})," values, and won't know what to do with a ",(0,t.jsx)(i.code,{children:"Bird"}),". Changing from ",(0,t.jsx)(i.code,{children:"Pet"})," to ",(0,t.jsx)(i.code,{children:"Dog"})," is safe because historical clients are ready to handle any ",(0,t.jsx)(i.code,{children:"Pet"}),", and won't be surprised by exclusively receiving ",(0,t.jsx)(i.code,{children:"Dog"})," values. Similarly changing ",(0,t.jsx)(i.code,{children:"String!"})," to ",(0,t.jsx)(i.code,{children:"String"})," is not safe because a historical client is not ready to accept ",(0,t.jsx)(i.code,{children:"null"})," and might ",(0,t.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Null_pointer#:~:text=Because%20a%20null%20pointer%20does,is%20the%20null%20pointer%20error.",children:"NPE"}),". Changing ",(0,t.jsx)(i.code,{children:"String"})," to ",(0,t.jsx)(i.code,{children:"String!"})," is safe because the historical client was ready to accept ",(0,t.jsx)(i.code,{children:"null"})," and just will happen to no longer ever receive one."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Second, we want to assume that anything can fail anywhere, and minimize disruption. A GraphQL field may be resolved by connecting to a service, and if that fails, a null is returned in the result (and also the error is included alongside the data in the response as well). Using the non-null modifier demands that field never returns null such that if an error occurs during resolution that it \u201cbubbles\u201d to instead have the parent field return null. This is nice in that it provides a strict guarantee of non-nullability, but not nice in that it\u2019s destructive and that sibling fields which may have resolved normally are disposed as a result. As a result we provide guidance to use non-null ",(0,t.jsx)(i.code,{children:"!"})," types sparingly."]}),"\n",(0,t.jsx)(i.p,{children:"A very specific example covering both of these two reasons is considering what happens as a system evolves. Perhaps at first you have a simple application monolith with a single DB. A table column is non nullable so you imagine the resulting GraphQL field isn\u2019t nullable either. However in the future you build a dedicated service for a subset of that table, and now resolving that field could fail to reach the service and result in null. A future change to architecture created the possibility for error, and thus null."}),"\n",(0,t.jsxs)(i.p,{children:["Implicit in this understanding of nullability is that a field type does not make it possible to differentiate between interpreting a null value as \u201cthis field is actually the value ",(0,t.jsx)(i.code,{children:"null"}),"\u201d or \u201cthis field encountered an error and we have no data to return\u201d. Ideally we can differentiate this both in the Schema, to describe which of these two interpretations are possible, and in the response, to describe which of the two interpretations has occurred for that specific resolution."]}),"\n",(0,t.jsxs)(i.p,{children:['Or put more candidly: a GraphQL field is not actually "nullable", it is ',(0,t.jsx)(i.em,{children:'"ambiguously nullable"'}),". Ambiguity hurts!"]}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Callout on terminology for null in GraphQL"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:"Semantic null:"})," A ",(0,t.jsx)(i.code,{children:"null"})," value returned which describes the actual value of the field."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:"Error null:"})," A ",(0,t.jsx)(i.code,{children:"null"})," value returned which describes an error state."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:"Ambiguous null:"})," A ",(0,t.jsx)(i.code,{children:"null"})," value returned which describes one of the above two states without a way to differentiate which is the case."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The specific way this hurts is that clients must be able to differentiate between these two cases. First (schema) to generate useful type definitions, where the ambiguity requires us to generate nullable types everywhere, which is awful ergonomics. Then (result) to know whether to interpret a null value as a semantic null or handle it as an error null. Today clients must look in the ",(0,t.jsx)(i.code,{children:'"errors"'})," part of the result to see if an error exists at that field, but how to interpret the ",(0,t.jsx)(i.em,{children:"absence"})," of an error isn\u2019t clear if it isn\u2019t known if semantic null type was allowed in the first place."]}),"\n",(0,t.jsx)(i.p,{children:"So where do we go from here? How do we resolve this ambiguity?"}),"\n",(0,t.jsxs)(i.h2,{id:"annotate-semantic-nullability-",children:["Annotate semantic nullability: ",(0,t.jsx)(i.code,{children:"?"})]}),"\n",(0,t.jsxs)(i.p,{children:["Today we can describe a field\u2019s type normally ",(0,t.jsx)(i.code,{children:"field: String"})," or use a non-nullable type modifier, ",(0,t.jsx)(i.code,{children:"field: String!"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:['I propose introducing a "semantically nullable" modifier: ',(0,t.jsx)(i.code,{children:"field: String?"}),' (referring to this now as "nullable" to be terse).']}),"\n",(0,t.jsxs)(i.p,{children:["If a field type is nullable (",(0,t.jsx)(i.code,{children:"String?"}),"), that means that null values are in fact semantically allowed. For a client to know the difference between semantic null vs an error, they can now confidently look to the errors result. If an error exists in the array for this field then the null was the result of an error, and if not then it is in fact a semantic null."]}),"\n",(0,t.jsxs)(i.p,{children:["This leaves an unmodified type (",(0,t.jsx)(i.code,{children:"String"}),") remaining as \u201cambiguously null\u201d."]}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Callout on exact type definitions"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Type! \u2192 Type"})," (no null values allowed)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Type? \u2192 Type | SemanticNull | ErrorNull"})," (differentiation must be possible)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Type \u2192 Type | AmbiguousNull"})," (differentiation isn't always possible)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Now we have a way to describe some fields as specifically allowing semantic null and we have a mechanism (errors result) to differentiate that from an error null."}),"\n",(0,t.jsxs)(i.p,{children:["Now that a nullable modifier exists, to make this truly useful, we would next want to interpret unmodified ",(0,t.jsx)(i.code,{children:"field: Type"})," as \u201cnull only on error\u201d (",(0,t.jsx)(i.a,{href:"https://github.com/graphql/graphql-spec/pull/1048/files",children:"related RFC"}),") and resolve the ambiguity. How can we do this this safely, in a backwards compatible way?"]}),"\n",(0,t.jsx)(i.h2,{id:"a-strict-nullability-schema",children:"A strict nullability schema"}),"\n",(0,t.jsxs)(i.p,{children:["The schema can next include a directive (exposed as a new boolean in introspection) called ",(0,t.jsx)(i.code,{children:"@strictNullability"}),". This directive tells clients that they should interpret unmodified field types (",(0,t.jsx)(i.code,{children:"field: String"}),") as semantic null not being a valid value and that any null value in a the data result should be interpreted as a field error, regardless of whether the error portion of the result includes an entry for that field."]}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsx)(i.p,{children:(0,t.jsxs)(i.strong,{children:["Callout on exact type definition when ",(0,t.jsx)(i.code,{children:"@strictNullability"})," is set"]})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Type! \u2192 Type"})," (no null values allowed)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Type? \u2192 Type | SemanticNull | ErrorNull"})," (differentiation must be possible)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Type \u2192 Type | ErrorNull"})," (differentiation unnecessary)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"With both changes in effect, a schema has removed ambiguous null as a potential result from the service overall. Clients know the types possible in the schema and can interpret and differentiate the result accordingly."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.em,{children:"Edit: added after @benjie's feedback below"})})}),"\n",(0,t.jsxs)(i.p,{children:["Additionally, the introduction of ",(0,t.jsx)(i.code,{children:"@strictNullability"})," now ",(0,t.jsx)(i.em,{children:"requires"})," that an error is included in the error list if an unmodified ",(0,t.jsx)(i.code,{children:"field: Type"})," returns null. It will do this by changing the execution behavior through the same mechanism as NonNull types in ",(0,t.jsx)(i.a,{href:"http://spec.graphql.org/draft/#sec-Value-Completion",children:"Value Completion"}),". Importantly, these errors would not bubble."]}),"\n",(0,t.jsxs)(i.p,{children:["Execution behavior (value completion) does not change for nullable types (",(0,t.jsx)(i.code,{children:"Type?"}),") since null continues to be allowed."]}),"\n",(0,t.jsxs)(i.p,{children:["This means that execution behavior could change in a subtle manner. The result of the ",(0,t.jsx)(i.code,{children:'"data"'})," field will remain unchanged (what was a null, remains a null), however the ",(0,t.jsx)(i.code,{children:'"errors"'})," list could appear in some responses it previously did not. This could potentially be breaking when sending responses to a client which discards responses that include any error (unfortunately common for older clients)."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.em,{children:"Here is the specific case of this scenario explained via an example:"})}),"\n",(0,t.jsx)(i.p,{children:"A field returns a value which is not meant to be semantically nullable, however the resolver is known to fail often. This service knows it has a client which throws out responses that include field errors, so it does not raise a field error from the resolver even though that would have been the semantically correct thing to do. Because the field is known fails often and the service decides that failure is not a big deal and they would like the client to use the rest of the data, they simply return null to indicate failure instead. While this is semantically incorrect, it produced the outcome they were looking for."}),"\n",(0,t.jsxs)(i.p,{children:["When migrating an existing service to ",(0,t.jsx)(i.code,{children:"@strictNullability"})," that also needs to preserve backwards compatibility for clients which discard full responses if there are any errors, fields that return ",(0,t.jsx)(i.code,{children:"null"})," to indicate an error should be typed as ",(0,t.jsx)(i.code,{children:"Type?"})," instead of ",(0,t.jsx)(i.code,{children:"Type"})," - they should be declared nullable, since that is an accurate typing of the schema design choice that was made."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.em,{children:"End Edit"})})}),"\n",(0,t.jsx)(i.h2,{id:"how-to-adopt-this-incrementally",children:"How to adopt this incrementally?"}),"\n",(0,t.jsxs)(i.p,{children:['For existing schemas adopting this feature, they will be in an incremental state where "semantically nullable" modifiers (',(0,t.jsx)(i.code,{children:"?"}),") are incrementally added to resolve some ambiguity, and in this state the schema does not yet apply ",(0,t.jsx)(i.code,{children:"@strictNullability"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Once this migration is complete and a service has added all true semantically nullable modifiers to field types, then the ",(0,t.jsx)(i.code,{children:"@strictNullability"})," directive is added."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.em,{children:"Alternative incremental migration strategy"})}),"\n",(0,t.jsxs)(i.p,{children:["First, convert ",(0,t.jsx)(i.em,{children:"all field types"})," to Nullable and apply ",(0,t.jsx)(i.code,{children:"@strictNullability"})," at the same time, then incrementally remove the Nullable types from fields which are known to never be nullable."]}),"\n",(0,t.jsx)(i.p,{children:"While uglier, this would be safer for avoiding breaking changes if a service is unsure what values are possibly returned and concerned about the impact of introducing new field errors."}),"\n",(0,t.jsxs)(i.p,{children:["In the duration between a client beginning to use nullable type modifiers but before applying ",(0,t.jsx)(i.code,{children:"@strictNullability"}),", clients can decide how to use code generation and result interpretation. Either:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"A. Ignore the nullable type modifiers and see no change."}),"\n",(0,t.jsx)(i.li,{children:'B. Unsafely assume "strictNullability" is enabled and accept the risk of being wrong.'}),"\n",(0,t.jsx)(i.li,{children:"C. Assume strict nullability in a locally incremental way by annotating each fragment for strict nullability typegen and interpretation in coordination with rolling out the nullable types on the service/schema side."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Most will do A, and that's fine - it's the preferred path if the migration will be quick and they prefer to just look ahead. Some will do B, and that's fine for small or high-communication teams where you can trust the wrongness risk. Relay and other sophisticated clients will do C, where they allow large teams to adopt this over time."}),"\n",(0,t.jsx)(i.h2,{id:"lets-look-at-the-effects-does-this-break-things",children:"Let\u2019s look at the effects. Does this break things?"}),"\n",(0,t.jsx)(i.p,{children:"Say a historical schema with many clients has now adopted nullable types and the @strictNullable modifier, what happens to backwards and forwards compatibility?"}),"\n",(0,t.jsxs)(i.p,{children:["First of all, new clients no longer see \u201cambiguous\u201d nulls. The schema now describes if a null is or is not semantically a valid value from the schema\u2019s field type, and we know how to differentiate semantic null from error null (either because ",(0,t.jsx)(i.code,{children:"Type"})," where null definitionally indicates an error, or ",(0,t.jsx)(i.code,{children:"Type?"})," where if an error result for the field exists it is an error null, otherwise it is semantic null)."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.em,{children:"Edit after @benjie's comment"})})}),"\n",(0,t.jsxs)(i.p,{children:["Even without knowledge of the schema, a client can accurately use the ",(0,t.jsx)(i.code,{children:'"errors"'})," list in the response to know which null values represent errors and which are values, since an ",(0,t.jsx)(i.em,{children:"error null"})," is always accompanied by an error in the list."]}),"\n",(0,t.jsxs)(i.p,{children:["The application of ",(0,t.jsx)(i.code,{children:"@strictNullability"})," is potentially breaking in an edge case that can be mitigated by use of Nullable types. Execution results are always unchanged for the ",(0,t.jsx)(i.code,{children:'"data"'})," response, any client which exclusively looks at this part of the response will see no change at all. After applying ",(0,t.jsx)(i.code,{children:"@strictNullability"})," unmodified types must include an error in the list for a null value. Clients which consider ",(0,t.jsx)(i.code,{children:'"errors"'})," in the response could see new errors if a service was invalidly returning null from a field not marked nullable."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsxs)(i.del,{children:["Historical clients are unchanged because critically ",(0,t.jsx)(i.em,{children:"this has not changed the way the executor works in any way"}),". No field which used to return a null value no longer does or vice versa. No new errors are being emitted in the errors result. Error handling behavior is unchanged. This has ",(0,t.jsx)(i.em,{children:"exclusively"})," changed the schema to be more descriptive in how to interpret existing results."]})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsxs)(i.del,{children:["An important subtle point is that a ",(0,t.jsx)(i.code,{children:"@strictNullability"})," service may return a null value from an unmodified field type ",(0,t.jsx)(i.em,{children:"without a resulting error payload"}),". Modern clients now know to interpret this as the field failing to resolve an error (",(0,t.jsx)(i.em,{children:"error null"}),") and not a ",(0,t.jsx)(i.em,{children:"semantic null"}),". Historical clients will continue to interpret this as ",(0,t.jsx)(i.em,{children:"ambiguous null"}),". Introducing a new error payload where there wasn't one previously would have been unsafe. Some clients throw out any result payload with any error. (Wat?! See the FAQ below)"]})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.em,{children:"End edit"})})}),"\n",(0,t.jsx)(i.h2,{id:"what-about-forward-compatibility",children:"What about forward compatibility?"}),"\n",(0,t.jsxs)(i.p,{children:["In a ",(0,t.jsx)(i.code,{children:"@strictNullability"})," service/schema, you might still begin by introducing a field with an unmodified type ",(0,t.jsx)(i.code,{children:"field: Type"}),", and while it's still true that later changing this to ",(0,t.jsx)(i.code,{children:"field: Type!"})," remains safe, once a schema is strict, later changing this to ",(0,t.jsx)(i.code,{children:"field: Type?"})," is in fact not safe."]}),"\n",(0,t.jsx)(i.p,{children:"However, I am less concerned about this for two reasons:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"The primary reason schema designers are tripped up by this forward compat issue is not missing semantic null, it's missing error null. They fail to anticipate future changes in their underlying architecture introducing new places for errors to occur, and this proposal includes error nulls as a possibility in the default unmodified type."}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:["Given the proliferation of type-safe languages today (not the case in 2012) it's likely that strict nullability is a first class\u200b design consideration for anyone with this directive enabled. If it's not, well then this is an opt-in directive and this schema design \"footgun\" is at least one that schema owners are opting themselves into rather than being surprised by. The default without-directive state will remain ",(0,t.jsx)(i.code,{children:"Type \u2192 Type | AmbiguousNull"}),", which remains fine for less sophisticated services and clients."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.h2,{id:"faq-should-we-then-continue-to-suggest-use-of-nonnull-",children:["FAQ: Should we then continue to suggest use of NonNull (",(0,t.jsx)(i.code,{children:"!"}),")?"]}),"\n",(0,t.jsx)(i.p,{children:"Yes, but far less often. It's still used sparingly but it implies something which the service guarantees will never produce a null, including an error null. That's still useful in some scenarios (obj identifiers)."}),"\n",(0,t.jsxs)(i.p,{children:["But generally most will use this a lot less with a more familiar ",(0,t.jsx)(i.code,{children:"?"})," available to them."]}),"\n",(0,t.jsx)(i.h2,{id:"faq-how-is-it-okay-for-a-strictnullability-field-to-return-null-without-a-matching-error-in-the-errors-array",children:(0,t.jsxs)(i.del,{children:["FAQ: How is it okay for a ",(0,t.jsx)(i.code,{children:"@strictNullability"})," field to return ",(0,t.jsx)(i.code,{children:"null"})," without a matching error in the ",(0,t.jsx)(i.code,{children:'"errors"'})," array?"]})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"EDIT: This section no longer applies, but leaving here for posterity"})}),"\n",(0,t.jsxs)(i.p,{children:["Currently, a field returning an ",(0,t.jsx)(i.em,{children:"ambiguous null"})," could mean one of three things:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["There is a matching error in the ",(0,t.jsx)(i.code,{children:'"errors"'})," array response, therefore it is certainly the result of an error."]}),"\n",(0,t.jsxs)(i.li,{children:["Otherwise there is not an matching error - what does that mean?","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["If the intent was that this field should in fact allow semantic null values, then that's ",(0,t.jsx)(i.em,{children:"probably"})," what this meant, but we have no way to know for absolute certain since the Schema can't yet declare whether ",(0,t.jsx)(i.em,{children:"semantic null"})," is a possible expected value (the goal of this proposal!)"]}),"\n",(0,t.jsx)(i.li,{children:"Otherwise this could be the result of a failure to load the data that's just missing an matching error."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Wait, what? How is a missing matching error possibly spec compliant?"}),"\n",(0,t.jsxs)(i.p,{children:["According to the section on ",(0,t.jsx)(i.a,{href:"http://spec.graphql.org/draft/#sec-Handling-Field-Errors",children:"Handling Field Errors"})," if a field error occurs then an error ",(0,t.jsx)(i.em,{children:"must"})," be added to the errors list. This could happen because the resolver simply failed (threw Exception, return Result<Error>, etc), it could also happen because it returned a value that failed to coerce (was the wrong type, null for a Non-Null modifier, etc). This all implies that if a field failed to return the wrong type of value or failed to return at all that it is a ",(0,t.jsx)(i.em,{children:"field error"})," and thus must have an error entry."]}),"\n",(0,t.jsxs)(i.p,{children:["So how could this a field returning an ",(0,t.jsx)(i.em,{children:"error null"})," not have a matching error in the list? Well, the field resolver happened to simply return ",(0,t.jsx)(i.code,{children:"null"}),", which is totally allowed by the executor and schema. It did this not because ",(0,t.jsx)(i.em,{children:"semantic null"})," was the right value, but just because services are weird sometimes and this is how they decided to represent a failure condition. And this is allowed... and ambiguous \ud83e\udd37"]}),"\n",(0,t.jsx)(i.p,{children:"So what do we do about this? We have two options:"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsxs)(i.strong,{children:["Option A: A ",(0,t.jsx)(i.code,{children:"@strictNullability"})," service always produces an error for nulls"]})}),"\n",(0,t.jsxs)(i.p,{children:["We amend ",(0,t.jsx)(i.a,{href:"http://spec.graphql.org/draft/#sec-Value-Completion",children:"Value Completion"})," so that in strict mode such that if a resolver returns ",(0,t.jsx)(i.code,{children:"null"}),", and it isn't explicitly a ",(0,t.jsx)(i.code,{children:"Nullable"})," type, then we throw a field error."]}),"\n",(0,t.jsx)(i.p,{children:"Pros:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Asserts that the resolver returns a correctly typed value, and when it does not (because ",(0,t.jsx)(i.code,{children:"null"})," we assume is semantic null and not valid for a strict unmodified ",(0,t.jsx)(i.code,{children:"field: Type"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:["Guarantees that every ",(0,t.jsx)(i.em,{children:"error null"})," has an matching error in the errors list."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Cons:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["It's ",(0,t.jsx)(i.em,{children:"potentially"})," breaking."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["This introduces a new error which didn't exist before. Since lots of historical clients decided to simply reject any result which had an ",(0,t.jsx)(i.code,{children:'"errors"'})," and try again, it's entirely possible that the service had made this strange choice not because they didn't know better, but because they considered the failure non-fatal and safe to omit the value. If they had thrown an error instead the client would have treated it too seriously and thrown out the whole thing. This was unfortunately a common pattern for a long time."]}),"\n",(0,t.jsxs)(i.p,{children:["This breaking change can be mitigated, but only with careful guidance! Since the directive isn't applied by default, adding this to the spec is definitely not breaking. BUT you can't simply add the directive and expect no breaking changes! You must first move every field resolver that ",(0,t.jsx)(i.em,{children:"returns null"})," to be a Nullable type! If that is true, then adding the directive introduces no change and no thus no breakage."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Option B: Do nothing."})}),"\n",(0,t.jsx)(i.p,{children:"No changes to the executor at all. Existing behavior persists."}),"\n",(0,t.jsx)(i.p,{children:"Pros:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"It's not breaking!"}),"\n",(0,t.jsx)(i.li,{children:"It sure is easy to implement"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Cons:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["It allows this non-obvious behavior to continue, and specifically means that in the case of an ",(0,t.jsx)(i.em,{children:"error null"})," you're not guaranteed to have more information describing why. This is particularly bad for clients which seek to interpret error null vs semantic null in their response parsers without requiring knowledge of the schema."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Had we been starting from scratch, I'd definitely do option A (and I'd also not make strict mode, I'd just have done this from the start - agreeing with @dschafer's comment below). The guarantee of having error info is strictly better, and we'd just have built better clients."}),"\n",(0,t.jsxs)(i.p,{children:["But alas, I think our ",(0,t.jsx)(i.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#guiding-principles",children:"Guiding Principles"})," point us to option B."]}),"\n",(0,t.jsxs)(i.p,{children:["Also, while the spec can choose to do nothing, GraphQL libraries and services can always choose to be stricter than the spec itself. We've left plenty of room in allowing resolvers to be a ",(0,t.jsx)(i.a,{href:"http://spec.graphql.org/draft/#sel-HANTJHCBCAACCZhrR",children:'"internal function"'})," for GraphQL libraries to decide what is best."]}),"\n",(0,t.jsx)(i.p,{children:"I would be totally comfortable with a non-normative note in the spec suggesting that GraphQL libraries may choose option A, but for historical reasons we don't enforce it and it's still spec compliant to not."}),"\n",(0,t.jsxs)(i.p,{children:["Also, I suspect the cost of not having an error in the list guarantee is quite low. In ",(0,t.jsx)(i.code,{children:"@strictNullability"}),' we don\'t need it to know that a field has in fact failed. If a client wanted to get this guarantee back they could always fill in the gaps and produce a generic error locally that says something akin to "this field unexpectedly returned null"']}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,l.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>a,a:()=>r});var t=n(7294);const l={},s=t.createContext(l);function r(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);