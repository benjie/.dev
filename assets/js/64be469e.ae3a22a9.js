"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[1354],{3837:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>o,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=t(5893),l=t(1151);const r={identifier:"1065",title:"SemanticNonNull type (null only on error)",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1065",events:[{type:"commitsPushed",date:new Date("2024-01-03T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/bd038f24720b0bf9dc7d9e2eb3edf4f4498a4759",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/bd038f24720b0bf9dc7d9e2eb3edf4f4498a4759",headline:"Add IsValidImplementationFieldType updates",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"prCreated",date:new Date("2023-11-24T11:32:33.000Z"),href:"https://github.com/graphql/graphql-spec/pull/1065",actor:"benjie"},{type:"commitsPushed",date:new Date("2023-11-24T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/8395fd58abf3885ddd0e1d3db793ed20deb9efb9",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/8395fd58abf3885ddd0e1d3db793ed20deb9efb9",headline:"Change name to 'SemanticNonNull' and syntax to bang prefix",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"commitsPushed",date:new Date("2023-10-04T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",headline:"Add specification changes for Null-Only-On-Error type",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/8241d78b68154ce0322fd20dc1fae0ccab9792b6",headline:"Add examples combining null-only-on-error with list and non-null",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/23fa23b7c06d0cf36b3ce53e377e0789d40c56ff",headline:"Remove duplicate coercion for brevity",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"1048, 1073, SemanticNullability, wg1394, wg1410",shortname:"SemanticNonNull type (null only on error)",image:"/img/rfc_tracker.png"},s=void 0,a={id:"1065",title:"SemanticNonNull type (null only on error)",description:"At a glance",source:"@site/rfcs/1065.md",sourceDirName:".",slug:"/1065",permalink:"/rfcs/1065",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"1065",title:"SemanticNonNull type (null only on error)",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1065",events:[{type:"commitsPushed",date:"2024-01-03T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/bd038f24720b0bf9dc7d9e2eb3edf4f4498a4759",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/bd038f24720b0bf9dc7d9e2eb3edf4f4498a4759",headline:"Add IsValidImplementationFieldType updates",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"prCreated",date:"2023-11-24T11:32:33.000Z",href:"https://github.com/graphql/graphql-spec/pull/1065",actor:"benjie"},{type:"commitsPushed",date:"2023-11-24T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/8395fd58abf3885ddd0e1d3db793ed20deb9efb9",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/8395fd58abf3885ddd0e1d3db793ed20deb9efb9",headline:"Change name to 'SemanticNonNull' and syntax to bang prefix",ghUser:"benjie",authorName:"Benjie Gillam"}]},{type:"commitsPushed",date:"2023-10-04T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",headline:"Add specification changes for Null-Only-On-Error type",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/8241d78b68154ce0322fd20dc1fae0ccab9792b6",headline:"Add examples combining null-only-on-error with list and non-null",ghUser:"benjie",authorName:"Benjie Gillam"},{href:"https://github.com/graphql/graphql-spec/commit/23fa23b7c06d0cf36b3ce53e377e0789d40c56ff",headline:"Remove duplicate coercion for brevity",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"1048, 1073, SemanticNullability, wg1394, wg1410",shortname:"SemanticNonNull type (null only on error)",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Schema Coordinates",permalink:"/rfcs/SchemaCoordinates"},next:{title:"Client Controlled Nullability",permalink:"/rfcs/ClientControlledNullability"}},h={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"The problem",id:"the-problem",level:2},{value:"The solution",id:"the-solution",level:2},{value:"Backwards compatibility",id:"backwards-compatibility",level:2},{value:"History",id:"history",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identifier"}),": #1065"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stage"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PR"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1065",children:"SemanticNonNull type (null only on error)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Related"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/1048",title:"Null-Only-On-Error / Semantically-Non-Null type (asterisk) / RFCX",children:"#1048"})," (Null-Only-On-Error / Semantically-Non-Null type (asterisk))"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/1073",title:"Be strict about error paths format / RFC3",children:"#1073"})," (Be strict about error paths format)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/SemanticNullability",title:"Semantic Nullability / RFC0",children:"SemanticNullability"})," (Semantic Nullability)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/wg1394",title:"True Nullability Schema / RFC0",children:"wg#1394"})," (True Nullability Schema)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/wg1410",title:"Strict Semantic Nullability / RFC0",children:"wg#1410"})," (Strict Semantic Nullability)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commit pushed"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/bd038f24720b0bf9dc7d9e2eb3edf4f4498a4759",children:"Add IsValidImplementationFieldType updates"})," on 2024-01-03 by ",(0,i.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1065",children:"Spec PR"})," created"]})," on 2023-11-24 by benjie"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commit pushed"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/8395fd58abf3885ddd0e1d3db793ed20deb9efb9",children:"Change name to 'SemanticNonNull' and syntax to bang prefix"})," on 2023-11-24 by ",(0,i.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"3 commits pushed"})," on 2023-10-04:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/f0e3d6e98179d898d447ddad8a390fc5d3c2369d",children:"Add specification changes for Null-Only-On-Error type"})," by ",(0,i.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/8241d78b68154ce0322fd20dc1fae0ccab9792b6",children:"Add examples combining null-only-on-error with list and non-null"})," by ",(0,i.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/23fa23b7c06d0cf36b3ce53e377e0789d40c56ff",children:"Remove duplicate coercion for brevity"})," by ",(0,i.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["TL;DR: Introduces a new type wrapper, Semantic-Non-Null, which represents that a value will not be null ",(0,i.jsx)(n.em,{children:"unless"})," an error happens, and if an error does happen then this ",(0,i.jsx)(n.code,{children:"null"})," ",(0,i.jsx)(n.strong,{children:"does not bubble"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["GraphQL.js implementation: ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-js/pull/4192",children:"https://github.com/graphql/graphql-js/pull/4192"})," (but uses ",(0,i.jsx)(n.code,{children:"Type*"})," rather than ",(0,i.jsx)(n.code,{children:"!Type"})," - just a syntax change)"]}),"\n",(0,i.jsx)(n.h2,{id:"the-problem",children:"The problem"}),"\n",(0,i.jsx)(n.p,{children:"GraphQL schema designers must use non-nullable types sparingly because if a non-nullable type were to raise an error then the entire selection set it is within will be destroyed, leading to clients receiving less usable data and making writing the results to a normalized cache a dangerous action. Because of this, nullable-by-default is a best practice in GraphQL, and non-null type wrappers should only be used for fields that the schema designer is confident will never raise an error - not just in the current schema, but in all future schemas."}),"\n",(0,i.jsxs)(n.p,{children:["Many GraphQL consumers choose to ignore the entire response from the server when any error happens, one reason for this is because the null bubbling behavior makes writing to normalized caches dangerous. For these users, when an error ",(0,i.jsx)(n.strong,{children:"doesn't"})," happen, the nullable fields they are dealing with can be frustrating because their type generation requires them to handle the null case even if it may never happen in practice, which can lead to a lot of unnecessary code that will never execute. There is currently no way for the type generators to know that a field will never be null unless there's an associated error."]}),"\n",(0,i.jsx)(n.h2,{id:"the-solution",children:"The solution"}),"\n",(0,i.jsxs)(n.p,{children:["We can categorise that there are effectively two types of ",(0,i.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Error ",(0,i.jsx)(n.code,{children:"null"}),": where a position is ",(0,i.jsx)(n.code,{children:"null"})," and there's a related error (with matching or prefixed path) in the ",(0,i.jsx)(n.code,{children:"errors"})," list - indicates that something went wrong."]}),"\n",(0,i.jsxs)(n.li,{children:["Semantic ",(0,i.jsx)(n.code,{children:"null"}),": where a position is ",(0,i.jsx)(n.code,{children:"null"})," and there is no related error - this data truly is null (e.g. a user having not yet set their avatar may have ",(0,i.jsx)(n.code,{children:"avatar: null"}),"; this is not an error)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This PR introduces a new wrapper type in addition to List and Non-Null, called Semantic-Non-Null. The Semantic-Non-Null type indicates that the field will never be a semantic ",(0,i.jsx)(n.code,{children:"null"})," - it will not be ",(0,i.jsx)(n.code,{children:"null"})," in the normal course of business, but ",(0,i.jsx)(n.em,{children:"can"})," be null ",(0,i.jsx)(n.em,{children:"only"})," if accompanied by an error in the ",(0,i.jsx)(n.code,{children:"errors"}),' list (i.e. an "error ',(0,i.jsx)(n.code,{children:"null"}),'"). Thus a client that throws out all responses with errors will never see a ',(0,i.jsx)(n.code,{children:"null"})," in this position. Also, critically, any ",(0,i.jsx)(n.code,{children:"null"})," raised by this field ",(0,i.jsx)(n.em,{children:"will not bubble"})," and thus if an error is found with the exact path to this ",(0,i.jsx)(n.code,{children:"null"})," then it is safe to store the result (including the error) into a normalized cache."]}),"\n",(0,i.jsxs)(n.p,{children:["In SDL the Semantic-Non-Null wrapper is currently represented by a ",(0,i.jsx)(n.code,{children:"!"})," prefix (as opposed to the ",(0,i.jsx)(n.code,{children:"!"})," suffix for a strict Non-Null)."]}),"\n",(0,i.jsx)(n.p,{children:"Thus we have the following:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"#"}),(0,i.jsx)(n.th,{children:"Type description"}),(0,i.jsx)(n.th,{children:"Syntax"}),(0,i.jsx)(n.th,{children:"Result values"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})}),(0,i.jsx)(n.td,{children:"Unadorned String"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsxs)(n.td,{children:["string, or error ",(0,i.jsx)(n.code,{children:"null"}),", or semantic ",(0,i.jsx)(n.code,{children:"null"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2"})}),(0,i.jsx)(n.td,{children:"Semantic-Non-Null String"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"!String"})}),(0,i.jsxs)(n.td,{children:["string, or error ",(0,i.jsx)(n.code,{children:"null"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"3"})}),(0,i.jsx)(n.td,{children:"(Strict-)Non-Null String"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String!"})}),(0,i.jsx)(n.td,{children:"string"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Note that ",(0,i.jsx)(n.code,{children:"1"})," and ",(0,i.jsx)(n.code,{children:"3"})," above are exactly the same as in the current GraphQL specification, this PR introduces ",(0,i.jsx)(n.code,{children:"2"})," which sits in the middle."]}),"\n",(0,i.jsx)(n.h2,{id:"backwards-compatibility",children:"Backwards compatibility"}),"\n",(0,i.jsxs)(n.p,{children:["All existing schemas are automatically supported because the meaning of ",(0,i.jsx)(n.code,{children:"String"})," and ",(0,i.jsx)(n.code,{children:"String!"})," is unchanged."]}),"\n",(0,i.jsxs)(n.p,{children:["To ensure that all existing clients are automatically supported, this PR introduces the ",(0,i.jsx)(n.code,{children:"includeSemanticNonNull"})," argument on ",(0,i.jsx)(n.code,{children:"__Field.type"})," which defaults to ",(0,i.jsx)(n.code,{children:"false"}),". Clients that do not pass ",(0,i.jsx)(n.code,{children:"includeSemanticNonNull: true"})," will see all Semantic-Non-Null types stripped, which will have the effect of making them appear as if they were the unadorned types. This is safe, since it means these clients will need to handle both error nulls and semantic nulls (as they traditionally would have) even though we know that a semantic null will never happen in practice."]}),"\n",(0,i.jsxs)(n.p,{children:["All existing GraphQL documentation, tutorials, examples, and everything else we've built over the last 8 years remains valid since the meaning of ",(0,i.jsx)(n.code,{children:"String"})," and ",(0,i.jsx)(n.code,{children:"String!"})," are unchanged."]}),"\n",(0,i.jsx)(n.h2,{id:"history",children:"History"}),"\n",(0,i.jsxs)(n.p,{children:["This PR is almost identical to #1048, but it changes the name of the new type wrapper from Null-Only-On-Error to Semantic-Non-Null, and changes the syntax from ",(0,i.jsx)(n.code,{children:"String*"})," to ",(0,i.jsx)(n.code,{children:"!String"}),". It addresses the ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/discussions/1394",children:"True Nullability Schema"})," discussion raised by @captbaritone and incorporates/adapts some of the terminology from @leebyron's ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/discussions/1410",children:"Strict Semantic Nullability"})," proposal."]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var i=t(7294);const l={},r=i.createContext(l);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);