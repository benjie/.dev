"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[6520],{6879:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var t=r(5893),a=r(1151);const i={identifier:"1045",title:"Remove fragmentSpreadName from visitedFragments when visit is complete",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1045",events:[{type:"prCreated",date:new Date("2023-09-11T14:54:38.000Z"),href:"https://github.com/graphql/graphql-spec/pull/1045",actor:"benjie"},{type:"commitsPushed",date:new Date("2023-09-11T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/0d2a3bb224bd5304c62535194ed922d7d03e759a",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/0d2a3bb224bd5304c62535194ed922d7d03e759a",headline:"Remove fragmentSpreadName from visitedFragments when done",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"FragmentArguments",shortname:"Remove fragmentSpreadName from visitedFragments when visit is complete",image:"/img/rfc_tracker.png"},s=void 0,l={id:"1045",title:"Remove fragmentSpreadName from visitedFragments when visit is complete",description:"At a glance",source:"@site/rfcs/1045.md",sourceDirName:".",slug:"/1045",permalink:"/rfcs/1045",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"1045",title:"Remove fragmentSpreadName from visitedFragments when visit is complete",stage:"0",champion:"benjie",prUrl:"https://github.com/graphql/graphql-spec/pull/1045",events:[{type:"prCreated",date:"2023-09-11T14:54:38.000Z",href:"https://github.com/graphql/graphql-spec/pull/1045",actor:"benjie"},{type:"commitsPushed",date:"2023-09-11T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/0d2a3bb224bd5304c62535194ed922d7d03e759a",actor:"benjie",commits:[{href:"https://github.com/graphql/graphql-spec/commit/0d2a3bb224bd5304c62535194ed922d7d03e759a",headline:"Remove fragmentSpreadName from visitedFragments when done",ghUser:"benjie",authorName:"Benjie Gillam"}]}],related:"FragmentArguments",shortname:"Remove fragmentSpreadName from visitedFragments when visit is complete",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"True Nullability Schema",permalink:"/rfcs/wg1394"},next:{title:"Full Schemas",permalink:"/rfcs/FullSchemas"}},o={},h=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identifier"}),": #1045"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stage"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Champion"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PR"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1045",children:"Remove fragmentSpreadName from visitedFragments when visit is complete"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Related"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/rfcs/FragmentArguments",title:"Fragment Arguments / RFC0",children:"FragmentArguments"})," (Fragment Arguments)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/1045",children:"Spec PR"})," created"]})," on 2023-09-11 by benjie"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Commit pushed"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/0d2a3bb224bd5304c62535194ed922d7d03e759a",children:"Remove fragmentSpreadName from visitedFragments when done"})," on 2023-09-11 by ",(0,t.jsx)(n.a,{href:"https://github.com/benjie",children:"@benjie"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["@robrichard raised an issue for ",(0,t.jsx)(n.code,{children:"@defer"})," whereby under the current draft specification if you have this query:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"query HeroNameQuery {\n  hero {\n    ...NameFragment\n    ...NameFragment @defer\n  }\n}\nfragment NameFragment on Hero {\n  name\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["then the ",(0,t.jsx)(n.code,{children:"@defer"})," will never be visited; but if you move the ",(0,t.jsx)(n.code,{children:"@defer"})," earlier:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"query HeroNameQuery {\n  hero {\n    ...NameFragment @defer\n    ...NameFragment\n  }\n}\nfragment NameFragment on Hero {\n  name\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"then the non-deferred version will never be visited."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["@mjmahone has an RFC open about ",(0,t.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/rfcs/FragmentArguments.md",children:"fragment arguments"})," which suffers a similar issue: visits to a fragment aren't equivalent depending on the variables."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"query HeroNameQuery {\n  hero {\n    ...ComponentOne\n    ...ComponentTwo\n  }\n}\nfragment ComponentOne on Hero {\n  id\n  ...HeroDetails(includeBio: true, includeAvatar: false)\n}\nfragment ComponentTwo on Hero {\n  ...HeroDetails(includeBio: false, includeAvatar: true)\n}\nfragment HeroDetails($includeBio: Boolean!, $includeAvatar: Boolean!) on Hero {\n  superheroName\n  realName\n  initials\n  ... @include(if: $includeAvatar) {\n    avatarLarge \n    avatarSmall\n  }\n  ... @include(if: $includeBio) {\n    bioTitle\n    bioSubtitle\n    bioEntryParagraph\n    bioQuote\n    bioMainText\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Matt's solution takes a Relay-esque approach and generates a key for the fragments based on the values of their arguments."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Another consideration is where there are user-defined directives; e.g. ",(0,t.jsx)(n.code,{children:"{ id ...Profile name ...Profile @live }"})," might benefit from walking ",(0,t.jsx)(n.code,{children:"Profile"})," again now that it has ",(0,t.jsx)(n.code,{children:"@live"})," attached."]}),"\n",(0,t.jsx)(n.p,{children:"A simple solution to this is rather than each of these problems having their own solution, to simply navigate the fragment spread again - it's only a single layer that we need to worry about, so the cost is likely to be marginal. This RFC proposes this with a tiny change to the spec - after adding the fragmentSpreadName to visitedFragments, and calling CollectFields, we then remove it again."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>s});var t=r(7294);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);