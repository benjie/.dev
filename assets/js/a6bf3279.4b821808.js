"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[774],{5295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(5893),a=t(1151);const o={identifier:"950",title:"allow unions to include interfaces and unions",stage:"1",champion:"yaacovCR",prUrl:"https://github.com/graphql/graphql-spec/pull/950",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-08-04.md",date:new Date("2022-08-04T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2022/2022-08-04.md",date:new Date("2022-08-04T00:00:00.000Z"),actor:null},{type:"commitsPushed",date:new Date("2022-07-28T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/ce4077336201792e8b2792eb77ce712bf9e0a598",actor:"yaacovCR",commits:[{href:"https://github.com/graphql/graphql-spec/commit/ce4077336201792e8b2792eb77ce712bf9e0a598",headline:"add requirement that implementions of interfaces included by unions m\u2026",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"},{href:"https://github.com/graphql/graphql-spec/commit/d8e52f0794423b32874e8c6972211e3dcf5e027f",headline:"update validation section to match text",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"}]},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-06-02.md",date:new Date("2022-06-02T00:00:00.000Z"),actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2022/2022-06-02.md",date:new Date("2022-06-02T00:00:00.000Z"),actor:null},{type:"commitsPushed",date:new Date("2022-05-29T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/2a4d3ed1ccce99ec6a1aa9e954107b9652b0bb01",actor:"yaacovCR",commits:[{href:"https://github.com/graphql/graphql-spec/commit/2a4d3ed1ccce99ec6a1aa9e954107b9652b0bb01",headline:"add rule requiring explicit listing of member types of child unions",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"}]},{type:"prCreated",date:new Date("2022-05-27T07:25:33.000Z"),href:"https://github.com/graphql/graphql-spec/pull/950",actor:"yaacovCR"},{type:"commitsPushed",date:new Date("2022-05-27T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/18e70e5e9dd21f533c2e08cd3ad6a51154c495dd",actor:"yaacovCR",commits:[{href:"https://github.com/graphql/graphql-spec/commit/18e70e5e9dd21f533c2e08cd3ad6a51154c495dd",headline:"allow unions to include interfaces and unions",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"}]}],related:"711, ExpandingSubtyping",shortname:"allow unions to include interfaces and unions",image:"/img/rfc_tracker.png"},l=void 0,s={id:"950",title:"allow unions to include interfaces and unions",description:"At a glance",source:"@site/rfcs/950.md",sourceDirName:".",slug:"/950",permalink:"/rfcs/950",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"950",title:"allow unions to include interfaces and unions",stage:"1",champion:"yaacovCR",prUrl:"https://github.com/graphql/graphql-spec/pull/950",events:[{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-08-04.md",date:"2022-08-04T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2022/2022-08-04.md",date:"2022-08-04T00:00:00.000Z",actor:null},{type:"commitsPushed",date:"2022-07-28T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/ce4077336201792e8b2792eb77ce712bf9e0a598",actor:"yaacovCR",commits:[{href:"https://github.com/graphql/graphql-spec/commit/ce4077336201792e8b2792eb77ce712bf9e0a598",headline:"add requirement that implementions of interfaces included by unions m\u2026",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"},{href:"https://github.com/graphql/graphql-spec/commit/d8e52f0794423b32874e8c6972211e3dcf5e027f",headline:"update validation section to match text",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"}]},{type:"wgAgenda",href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-06-02.md",date:"2022-06-02T00:00:00.000Z",actor:null},{type:"wgNotes",href:"https://github.com/graphql/graphql-wg/blob/main/notes/2022/2022-06-02.md",date:"2022-06-02T00:00:00.000Z",actor:null},{type:"commitsPushed",date:"2022-05-29T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/2a4d3ed1ccce99ec6a1aa9e954107b9652b0bb01",actor:"yaacovCR",commits:[{href:"https://github.com/graphql/graphql-spec/commit/2a4d3ed1ccce99ec6a1aa9e954107b9652b0bb01",headline:"add rule requiring explicit listing of member types of child unions",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"}]},{type:"prCreated",date:"2022-05-27T07:25:33.000Z",href:"https://github.com/graphql/graphql-spec/pull/950",actor:"yaacovCR"},{type:"commitsPushed",date:"2022-05-27T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/18e70e5e9dd21f533c2e08cd3ad6a51154c495dd",actor:"yaacovCR",commits:[{href:"https://github.com/graphql/graphql-spec/commit/18e70e5e9dd21f533c2e08cd3ad6a51154c495dd",headline:"allow unions to include interfaces and unions",ghUser:"yaacovCR",authorName:"Yaacov Rydzinski"}]}],related:"711, ExpandingSubtyping",shortname:"allow unions to include interfaces and unions",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Expand @deprecated to Objects",permalink:"/rfcs/997"},next:{title:"Add validation rule that operation types exist",permalink:"/rfcs/955"}},r={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Unions",id:"unions",level:3},{value:"Interfaces",id:"interfaces",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identifier"}),": #950"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stage"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-1-proposal",children:"RFC1: Proposal"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Champion"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/yaacovCR",children:"@yaacovCR"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PR"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/950",children:"allow unions to include interfaces and unions"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Related"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfcs/ExpandingSubtyping",title:"Expanding Subtyping (for output types) / RFC0",children:"ExpandingSubtyping"})," (Expanding Subtyping (for output types))"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"timeline",children:"Timeline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Added to ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-08-04.md",children:"2022-08-04 WG agenda"})]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Mentioned in ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2022/2022-08-04.md",children:"2022-08-04 WG notes"})]})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"2 commits pushed"})," on 2022-07-28:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/ce4077336201792e8b2792eb77ce712bf9e0a598",children:"add requirement that implementions of interfaces included by unions m\u2026"})," by ",(0,i.jsx)(n.a,{href:"https://github.com/yaacovCR",children:"@yaacovCR"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/d8e52f0794423b32874e8c6972211e3dcf5e027f",children:"update validation section to match text"})," by ",(0,i.jsx)(n.a,{href:"https://github.com/yaacovCR",children:"@yaacovCR"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Added to ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/agendas/2022/2022-06-02.md",children:"2022-06-02 WG agenda"})]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Mentioned in ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-wg/blob/main/notes/2022/2022-06-02.md",children:"2022-06-02 WG notes"})]})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commit pushed"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/2a4d3ed1ccce99ec6a1aa9e954107b9652b0bb01",children:"add rule requiring explicit listing of member types of child unions"})," on 2022-05-29 by ",(0,i.jsx)(n.a,{href:"https://github.com/yaacovCR",children:"@yaacovCR"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/pull/950",children:"Spec PR"})," created"]})," on 2022-05-27 by yaacovCR"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commit pushed"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphql-spec/commit/18e70e5e9dd21f533c2e08cd3ad6a51154c495dd",children:"allow unions to include interfaces and unions"})," on 2022-05-27 by ",(0,i.jsx)(n.a,{href:"https://github.com/yaacovCR",children:"@yaacovCR"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Complements #939\nAddresses #711"}),"\n",(0,i.jsx)(n.p,{children:"Similar to #939, this PR expands the robustness of the type system by allowing types that actually fulfill interfaces to be recognized as such by the GraphQL type system."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"interface CloningInfo {\n  ...\n}\n\nunion CowOrWolf implements Animal = Cow | Wolf  # allowed by #939\nunion CowOrCloningInfo = Cow | CloningInfo  # allowed by this PR, note that CloningInfo is an interface\nunion WolfOrCloningInfo = Wolf | CloningInfo # allowed by this PR, note that CloningInfo is an interface\n\n# note that here we are marking unions explicitly as included within a union.\n# Adding a type to the CowOrWolf union will automatically add it to the ParentUnion\n# We could also consider adding a constraint on the union definition, see below discussion\nunion Parent = CowOrCloningInfo | WolfOrCloningInfo | CowOrWolf | Cow | Wolf | CloningInfo\n\ninterface Animal {\n  parent: Parent\n}\n\ntype Cow implements Animal {\n    parent: CowOrCloningInfo  # unlocked by this PR\n}\n\ntype Wolf implements Animal{\n    parent: WolfOrCloningInfo # unlocked by this PR\n} \n"})}),"\n",(0,i.jsx)(n.h3,{id:"unions",children:"Unions"}),"\n",(0,i.jsx)(n.p,{children:"With regard to unions, the goal is to explicitly mark some unions as members of other unions. We have two alternatives:"}),"\n",(0,i.jsx)(n.p,{children:"(A). Let unions include unions as members, as shown above. We could (or could not) require\u200b that all members of the unions also be listed (similar to how interfaces implementing child interfaces are required to explicitly list the parent."}),"\n",(0,i.jsx)(n.p,{children:"Pro:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Simple to reason about, fits with how unions currently work.\nCon:"}),"\n",(0,i.jsx)(n.li,{children:"Could lead to some automatic behavior, when adding a type to a union that is part of a union, the type gets added to multiple unions. This is ameliorated by requiring all child union members to be explicitly listed."}),"\n",(0,i.jsx)(n.li,{children:"Union definitions could start to get pretty long if all the combinations must be listed therein."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"(B) Add an additional optional constraint on the union requiring all of the members to be members of some other union, similar to how we have resolved #939."}),"\n",(0,i.jsx)(n.p,{children:"Potential Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"union CowOrWolf implements Animal, subtypes Parent = Cow | Wolf \nunion CowOrCloningInfo subtypes Parent = Cow | CloningInfo \nunion WolfOrCloningInfo subtypes Parent = Wolf | CloningInfo\n\nunion Parent = Cow | Wolf | CloningInfo\n# cf\n# union Parent = CowOrCloningInfo | WolfOrCloningInfo | CowOrWolf | Cow | Wolf | CloningInfo\n"})}),"\n",(0,i.jsx)(n.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,i.jsxs)(n.p,{children:["For interfaces that are members of unions, it would ",(0,i.jsx)(n.em,{children:"not"})," seem to make sense to require\u200b all the implementations of the interfaces to be listed independently. The whole point is that it is often just as useful to indicate that several interfaces might be returned as it is that several individual member types might be returned. For unions, we also have potentially multiple layers of nesting (unions of unions of unions) for which it would be extremely helpful to require\u200b the individual member types to be listed (or to use the second syntax above) while we don't have the same issue with interfaces."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>l});var i=t(7294);const a={},o=i.createContext(a);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);