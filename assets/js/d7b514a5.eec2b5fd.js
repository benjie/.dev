"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[2840],{971:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(5893),i=n(1151);const r={identifier:"MetadataStructs",stage:"0",title:"Metadata Structs",events:[{type:"docUpdated",date:new Date("2022-08-16T09:36:49.000Z"),href:"https://github.com/graphql/graphql-wg/blob/6883f460ae07a954e5c9cc240bb280733e2a184b/rfcs/MetadataStructs.md",actor:"Benjie"},{type:"docCreated",date:new Date("2022-07-07T16:52:49.000Z"),href:"https://github.com/graphql/graphql-wg/blob/ab0985750e561225fedaf322157e974c631aadda/rfcs/MetadataStructs.md",actor:"Benjie Gillam"}],related:"300",shortname:"Metadata Structs",image:"/img/rfc_tracker.png"},s=void 0,o={id:"MetadataStructs",title:"Metadata Structs",description:"At a glance",source:"@site/rfcs/MetadataStructs.md",sourceDirName:".",slug:"/MetadataStructs",permalink:"/rfcs/MetadataStructs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"MetadataStructs",stage:"0",title:"Metadata Structs",events:[{type:"docUpdated",date:"2022-08-16T09:36:49.000Z",href:"https://github.com/graphql/graphql-wg/blob/6883f460ae07a954e5c9cc240bb280733e2a184b/rfcs/MetadataStructs.md",actor:"Benjie"},{type:"docCreated",date:"2022-07-07T16:52:49.000Z",href:"https://github.com/graphql/graphql-wg/blob/ab0985750e561225fedaf322157e974c631aadda/rfcs/MetadataStructs.md",actor:"Benjie Gillam"}],related:"300",shortname:"Metadata Structs",image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Annotation Structs",permalink:"/rfcs/AnnotationStructs"},next:{title:'"Metadata Directives" Proposal',permalink:"/rfcs/wg1096"}},l={},c=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Problems",id:"problems",level:2},{value:"Granularity",id:"granularity",level:3},{value:"Solution",id:"solution",level:2},{value:"SDL",id:"sdl",level:3},{value:"Introspection",id:"introspection",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Identifier"}),": MetadataStructs"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Stage"}),": ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Champion"}),": -"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"PR"}),": -"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/6883f460ae07a954e5c9cc240bb280733e2a184b/rfcs/MetadataStructs.md",children:"RFC document updated"})})," on 2022-08-16 by Benjie"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/blob/ab0985750e561225fedaf322157e974c631aadda/rfcs/MetadataStructs.md",children:"RFC document created"})})," on 2022-07-07 by Benjie Gillam"]}),"\n"]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.h1,{id:"metadata-structs",children:"Metadata Structs"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsxs)(t.strong,{children:["THIS PROPOSAL HAS BEEN SUPERCEDED BY\n",(0,a.jsx)(t.a,{href:"/rfcs/AnnotationStructs",children:"AnnotationStructs"}),"."]})}),"\n",(0,a.jsx)(t.p,{children:"Schema metadata has long been desired, please see this long discussion:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/issues/300",children:"https://github.com/graphql/graphql-spec/issues/300"})}),"\n",(0,a.jsx)(t.p,{children:"I digested many of the currently proposed (and in the wild) solutions to this\nproblem in my talk at the GraphQL Conference, you can see the talk here:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://youtu.be/c1oa7p73rTw",children:"https://youtu.be/c1oa7p73rTw"})}),"\n",(0,a.jsx)(t.p,{children:"It covers:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"custom introspection extensions"}),"\n",(0,a.jsx)(t.li,{children:"'SDL' field in schema, like Apollo Federation"}),"\n",(0,a.jsx)(t.li,{children:"storing metadata in the description field"}),"\n",(0,a.jsx)(t.li,{children:"adding metadata entirely in user-space"}),"\n",(0,a.jsx)(t.li,{children:"'applied directives'"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:'It expands on the pros and cons of these approaches and asks "is there a better\nsolution".'}),"\n",(0,a.jsx)(t.h2,{id:"problems",children:"Problems"}),"\n",(0,a.jsx)(t.p,{children:"Some of the main problems that need to be solved with schema metadata are:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"representing all desired metadata (including polymorphic metadata)"}),"\n",(0,a.jsx)(t.li,{children:"the need for granularity (partial introspection)"}),"\n",(0,a.jsx)(t.li,{children:"the need for support in tooling (e.g. GraphiQL) to give visibility into the\nmetadata"}),"\n",(0,a.jsx)(t.li,{children:"being able to fully introspect the GraphQL schema in a small number of\nroundtrips"}),"\n",(0,a.jsx)(t.li,{children:"avoiding the need for complex parsing on the client"}),"\n",(0,a.jsx)(t.li,{children:"allowing for future expansion of the metadata/introspection schema (without\nnamespace clashes)"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"granularity",children:"Granularity"}),"\n",(0,a.jsx)(t.p,{children:"It can be useful for clients to include small introspection queries as part of\ntheir applications - for example you might introspect a particular named enum to\nmake available sorting options in a dropdown. If the schema adds support for a\nnew sort method, the client could add this option to the dropdown without\nneeding to be updated thanks to introspection. However, enum values don't\ncurrently contain enough information for this."}),"\n",(0,a.jsx)(t.p,{children:'Consider that we add a "label" property to the metadata for each enum value -\nthen we would have all we need to display it to the user, so long as they spoke\nthat language. To cater to an international audience, we could add many\ntranslations to each enum value - but now the size of the introspection has\ngrown. A better solution might be to allow the client to select just the\ntranslation that it needs from the enum value. (We also don\'t need any of the\nother metadata for the enum values, only the labels.)'}),"\n",(0,a.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsxs)(t.p,{children:["This RFC proposes what I feel is a more capable and elegant solution than any of\nthe previously proposed solutions covered by my talk, but it's predicated on the\nexistence of a polymorphic-capable composite type that can be used symmetrically\nfor both input and output. As it happens there's ",(0,a.jsx)(t.a,{href:"/rfcs/Struct",children:"an RFC for that"}),",\nso you can see this metadata RFC as an extension of that Struct RFC."]}),"\n",(0,a.jsx)(t.h3,{id:"sdl",children:"SDL"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"meta"})," keyword, very similar to ",(0,a.jsx)(t.code,{children:"directive"}),", defines the meta types and fields.\nThe type of each field can be any type that is suitable on both input and output\n(i.e. scalar, enum, struct, struct union, and wrapping types thereof)."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-graphql",children:'meta +source(table: String, column: String, service: ServiceSource) on OBJECT | FIELD_DEFINITION\nmeta +visibility(only: [VisibilityScope!]!) required on OBJECT\nmeta +label(en: String, fr: String, de: String) on ENUM_VALUE\n\nstruct ServiceSource {\n  serviceName: string\n  identifier: string\n}\n\nenum VisibilityScope {\n  NONE\n  PERSONAL\n  TEAM\n  ORGANIZATION\n  ADMINS\n  PUBLIC +label(en: "Anyone", fr: "Tout les monde", de: "Alle")\n}\n\ntype User +source(table: "public.users") +visibility(only: [ORGANIZATION]) {\n  id: ID!\n  organization: Organization!\n  username: String! +source(column: "handle")\n  avatar: String! +source(service: {\n    serviceName: "S3"\n    identifier: "/avatars/27.png"\n  })\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Note: ",(0,a.jsx)(t.code,{children:"+visibility"})," is marked as ",(0,a.jsx)(t.code,{children:"required"}),"; in user space it must be defined\nexplicitly for each object, but for introspection types it is omitted."]}),"\n",(0,a.jsx)(t.h3,{id:"introspection",children:"Introspection"}),"\n",(0,a.jsx)(t.p,{children:"Introspection query example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-graphql",children:'{\n  User: __type(name: "User") {\n    meta\n    # Or:\n    meta {\n      source {\n        table\n      }\n      visibility {\n        only\n      }\n    }\n  }\n  VisibilityScope: __type(name: "VisibilityScope") {\n    enumValues {\n      name\n      meta {\n        label {\n          en\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Changes to the schema introspection types:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-graphql",children:"type __Schema {\n  metas: [__Meta!]!\n}\n\n# Similar to __Directive\ntype __Meta {\n  name: String!\n  description: String\n  locations: [__MetaLocation!]!\n  isRequired: Boolean!\n  #\xa0Always a struct; the fields of the struct are the parameters of the meta\n  type: __Type\n}\n\ntype __Type {\n  #...\n  meta: __TypeMeta\n}\n\nstruct __TypeMeta {\n  source: __Meta_source\n\n  # Though +visibility was defined as 'required', it is only required on\n  # user-space object types, and thus it is nullable here.\n  visibility: __Meta_visibility\n}\n\n# Auto-generated via `__Meta_` + meta name?\nstruct __Meta_source {\n  table: String\n  service: ServiceSource\n}\n\nstruct __Meta_visibility {\n  only: [VisibilityScope!]!\n}\n\ntype __Field {\n  meta: __FieldMeta\n}\ntype __EnumValue {\n  meta: __EnumValueMeta\n}\n# etc\n"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var a=n(7294);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);