"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[2576],{4904:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=n(5893),i=n(1151);const s={identifier:"wg1096",title:'"Metadata Directives" Proposal',stage:"0",champion:"leebyron",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1096",events:[{type:"wgDiscussionCreated",date:new Date("2022-08-04T20:18:26.000Z"),href:"https://github.com/graphql/graphql-wg/discussions/1096",actor:"leebyron"}],related:"AnnotationStructs",shortname:'"Metadata Directives" Proposal',image:"/img/rfc_tracker.png"},r=void 0,o={id:"wg1096",title:'"Metadata Directives" Proposal',description:"At a glance",source:"@site/rfcs/wg1096.md",sourceDirName:".",slug:"/wg1096",permalink:"/rfcs/wg1096",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"wg1096",title:'"Metadata Directives" Proposal',stage:"0",champion:"leebyron",wgDiscussionUrl:"https://github.com/graphql/graphql-wg/discussions/1096",events:[{type:"wgDiscussionCreated",date:"2022-08-04T20:18:26.000Z",href:"https://github.com/graphql/graphql-wg/discussions/1096",actor:"leebyron"}],related:"AnnotationStructs",shortname:'"Metadata Directives" Proposal',image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Metadata Structs",permalink:"/rfcs/MetadataStructs"},next:{title:"GraphQL Composite Schemas",permalink:"/rfcs/CompositeSchemas"}},l={},d=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Identifier"}),": wg#1096"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Stage"}),": ",(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Champion"}),": ",(0,a.jsx)(t.a,{href:"https://github.com/leebyron",children:"@leebyron"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"PR"}),": -"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Related"}),":","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/rfcs/AnnotationStructs",title:"Annotation Structs / RFC0",children:"AnnotationStructs"})," (Annotation Structs)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"timeline",children:"Timeline"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsxs)(t.strong,{children:[(0,a.jsx)(t.a,{href:"https://github.com/graphql/graphql-wg/discussions/1096",children:"WG discussion"})," created"]})," on 2022-08-04 by leebyron"]}),"\n"]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Given the revived discussion around schema metadata and their relationship with SDL directives, I'd like to propose a high level direction for this. My goal here is to introduce something with as few additional moving parts as possible. It's intended to be simple rather than robust."}),"\n",(0,a.jsxs)(t.p,{children:["The primary new mechanism is being able to mark an SDL Directive definition as ",(0,a.jsx)(t.code,{children:"metadata"})," and exposing such directive usages via introspection. Given an introspection result you should be able to re-create the SDL with directive usages in the right places."]}),"\n",(0,a.jsx)(t.p,{children:"The main downside is that the introspection encoding is simple to the point of requiring post-processing. There is no explicit sub-selection; all metadata gets exposed in introspection. The metadata is not in a structured JSON form, but in arrays of named groups - however this more clearly maps to the way directives are being used. It's up to tools consuming metadata to interpret these as intended."}),"\n",(0,a.jsx)(t.p,{children:"I'd love feedback on this!"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-graphql",children:'# An SDL directive can now be marked as `metadata`, mirroring how it can be \n# marked as `repeatable`. Doing so causes usages of it within a schema to be \n# visible via introspection.\n\ndirective @myCustomMetadata(myValue: String) metadata repeatable on FIELD\n\n# This appears in introspection as well. `__Directive` gains an `isMetadata` \n# field, again mirroring the existing `isRepeatable` field.\n\ntype __Directive {\n  # ...\n  isMetadata: Boolean\n}\n\n# Once a directive is marked as a "metadata" directive, then usages of it appear\n# as metadata at that location in the schema.\n#\n# Schema introspection types all get a `metadata` field, of type `[__Metadata]`.\n# This allows multiple pieces of metadata per location in an introspected schema.\n#\n# As `metadata` is a list, this allows for retaining their order (which spec \n# preserves as potentially meaningful) as well as repeated directives.\n#\n# No changes are needed to SDL, since we\'re using existing directive syntax.\n\ntype __Field {\n  # ...\n  metadata: [__Metadata!] # Example of this being added to all things.\n}\n\n# The `__Metadata` type models a single metadata directive usage at a location.\n# Therefore it both refers to the directive definition being used, as well as\n# the values being used.\n#\n# Note that `values` could be null in the case of a directive usage without args\n# ex: `{ myField @myDirective }`. Also note that since `values` is a list, that\n# the order of the directive arguments can be preserved.\n\ntype __Metadata {\n  """\n  Additional information provided for an item in a GraphQL schema.\n  """\n\n  directive: __Directive!\n  values: [__MetadataValue!]\n}\n\n# A `__MetadataValue` is very similar to the existing `__InputValue`. However,\n# as it represents a provided value instead of a definition of a value, only the \n# `name` and `value` fields are relevant.\n#\n# Similar to `defaultValue` in `__InputValue`, the `value` argument is a String \n# encoding using the GraphQL language. This allows all varities of values which\n# can be modeled as a GraphQL value. Tools may prefer to convert this to JSON \n# after fetching.\n\ntype __MetadataValue {\n  name: String!\n  value: String!\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"That's it! Let's take a look at an example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-graphql",children:"# For this type's `myField` field, a metadata directive is used with a value provided.\n\ntype MyType {\n  myField: Int @myCustomMetadata(myValue: \"some value\")\n}\n\n# Given a typical introspection query, here's some additional fields queried on \n# field during introspection:\n\nfragment FieldMetadata on __Field {\n  metadata {\n    directive { name }\n    values {\n      name\n      value\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["And here's the resulting introspection response (in JSON5) for this particular fragment applying to the ",(0,a.jsx)(t.code,{children:"myField"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json5",children:'{\n  name: "myField",\n  // ....\n  metadata: [\n    {\n      directive: { name: "myCustomMetadata" },\n      values: [\n        { \n          name: "myValue",\n          value: "\\"some value\\"" // Note GraphQL encoding.\n        }\n      ]\n    }\n  ]\n}\n\n'})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var a=n(7294);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);