"use strict";(self.webpackChunk_localrepo_benjie_dev=self.webpackChunk_localrepo_benjie_dev||[]).push([[803],{3856:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=n(5893),r=n(1151);const s={identifier:"325",title:'Add "Any" scalar type',stage:"0",champion:"IvanGoncharov",prUrl:"https://github.com/graphql/graphql-spec/pull/325",events:[{type:"prCreated",date:new Date("2017-06-19T20:12:40.000Z"),href:"https://github.com/graphql/graphql-spec/pull/325",actor:"IvanGoncharov"},{type:"commitsPushed",date:new Date("2017-06-19T00:00:00.000Z"),href:"https://github.com/graphql/graphql-spec/commit/380038d6465281ae4db893cea2bf6b70ba6690e1",actor:"IvanGoncharov",commits:[{href:"https://github.com/graphql/graphql-spec/commit/380038d6465281ae4db893cea2bf6b70ba6690e1",headline:'Add "Any" scalar type',ghUser:"IvanGoncharov",authorName:"Ivan Goncharov"}]}],shortname:'Add "Any" scalar type',image:"/img/rfc_tracker.png"},c=void 0,o={id:"325",title:'Add "Any" scalar type',description:"At a glance",source:"@site/rfcs/325.md",sourceDirName:".",slug:"/325",permalink:"/rfcs/325",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{identifier:"325",title:'Add "Any" scalar type',stage:"0",champion:"IvanGoncharov",prUrl:"https://github.com/graphql/graphql-spec/pull/325",events:[{type:"prCreated",date:"2017-06-19T20:12:40.000Z",href:"https://github.com/graphql/graphql-spec/pull/325",actor:"IvanGoncharov"},{type:"commitsPushed",date:"2017-06-19T00:00:00.000Z",href:"https://github.com/graphql/graphql-spec/commit/380038d6465281ae4db893cea2bf6b70ba6690e1",actor:"IvanGoncharov",commits:[{href:"https://github.com/graphql/graphql-spec/commit/380038d6465281ae4db893cea2bf6b70ba6690e1",headline:'Add "Any" scalar type',ghUser:"IvanGoncharov",authorName:"Ivan Goncharov"}]}],shortname:'Add "Any" scalar type',image:"/img/rfc_tracker.png"},sidebar:"rfcsSidebar",previous:{title:"Scalar serialize as built-in scalar type",permalink:"/rfcs/521"},next:{title:"Define Data Collections used in the spec",permalink:"/rfcs/1091"}},i={},l=[{value:"At a glance",id:"at-a-glance",level:2},{value:"Timeline",id:"timeline",level:2}];function h(e){const a={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"at-a-glance",children:"At a glance"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Identifier"}),": #325"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Stage"}),": ",(0,t.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/blob/main/CONTRIBUTING.md#stage-0-strawman",children:"RFC0: Strawman"})]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Champion"}),": ",(0,t.jsx)(a.a,{href:"https://github.com/IvanGoncharov",children:"@IvanGoncharov"})]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"PR"}),": ",(0,t.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/pull/325",children:'Add "Any" scalar type'})]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"timeline",children:"Timeline"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsxs)(a.strong,{children:[(0,t.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/pull/325",children:"Spec PR"})," created"]})," on 2017-06-19 by IvanGoncharov"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Commit pushed"}),": ",(0,t.jsx)(a.a,{href:"https://github.com/graphql/graphql-spec/commit/380038d6465281ae4db893cea2bf6b70ba6690e1",children:'Add "Any" scalar type'})," on 2017-06-19 by ",(0,t.jsx)(a.a,{href:"https://github.com/IvanGoncharov",children:"@IvanGoncharov"})]}),"\n"]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsxs)(a.p,{children:["In some of our tool, we need to be able to pass an arbitrary value as an argument of a directive, i.e. value which can be anything and can\u2019t be described as a single type.  The only workaround we found is to define ",(0,t.jsx)(a.code,{children:"scalar JSON"})," which can accept any JSON value including objects and arrays."]}),"\n",(0,t.jsx)(a.p,{children:"Moreover, this as popular approach in the community:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:["Graph.cool and Scaphold both allow user to use ",(0,t.jsx)(a.code,{children:"JSON"})," scalar in their schema"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://github.com/taion/graphql-type-json",children:"graphql-type-json"})," implements such scalar as a NPM package with 20+ packages ",(0,t.jsx)(a.a,{href:"https://www.npmjs.com/browse/depended/graphql-type-json",children:"depending on it"}),"."]}),"\n",(0,t.jsxs)(a.li,{children:["Apollo uses ",(0,t.jsx)(a.code,{children:"scalar JSON"})," as an example in ",(0,t.jsx)(a.a,{href:"http://dev.apollodata.com/tools/graphql-tools/scalars.html#Using-a-package",children:"their documentation"}),"."]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"AFAIK, this technique doesn\u2019t contradict GraphQL spec and solves issues at hand.\nAt the moment, it has very limited support from tooling since it\u2019s not a built-in type and introspection provides you no clue beyond the name of a scalar."}),"\n",(0,t.jsxs)(a.p,{children:["The idea behind this PR is to formalize existing practice for creating ",(0,t.jsx)(a.code,{children:"scalar JSON"})," but in protocol agnostic way, that\u2019s why I propose to use ",(0,t.jsx)(a.code,{children:"Any"})," as the name."]}),"\n",(0,t.jsxs)(a.p,{children:["The last argument I have is that all type system that I know have some form of opt-out type: ",(0,t.jsx)(a.code,{children:"any"})," in Flow and TypScript, ",(0,t.jsx)(a.code,{children:"void*"})," in C/C++, ",(0,t.jsx)(a.code,{children:"sql_variant"})," in SQL and ",(0,t.jsx)(a.code,{children:"Object"})," class\u200b in C#/JAVA."]}),"\n"]})]})}function d(e={}){const{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>o,a:()=>c});var t=n(7294);const r={},s=t.createContext(r);function c(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);